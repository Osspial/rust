rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))], reveal: UserFacing })
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits: fully_normalize_with_fulfillcx(value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))])
rustc::traits::project: normalize_with_depth(depth=0, value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))])
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0])) = []
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))] with 1 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits: fully_normalize: normalized_value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))] obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Geometry>))` at depth 0 yielded Ok(Some)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits: normalize_param_env_or_error: normalized predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::project: normalize_with_depth(depth=0, value=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))]))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))]) with 1 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Geometry>::D)
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0])) = []
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Point no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Vector no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Self,depth=0))
rustc::traits::fulfill: select(obligation-forest-size=8)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Geometry>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as std::marker::Sized>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(0/0:12 ~ impl_assoc_working[317d]::EuclideanSpace[0])) = [SizedSelf, SupertraitSelf]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(2/0:1265 ~ core[f3a2]::clone[0]::Clone[0])) = [SizedSelf]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(2/0:834 ~ core[f3a2]::marker[0]::Sized[0])) = [SizedSelf]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Sub<RHS>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as std::ops::Sub<RHS>>::Output as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<RHS as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Sub<RHS>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Sub<RHS>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as std::ops::Sub<RHS>>::Output as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<RHS as std::marker::Sized>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(2/0:869 ~ core[f3a2]::ops[0]::arith[0]::Sub[0])) = []
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<Self as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(2/0:836 ~ core[f3a2]::marker[0]::Copy[0])) = [SizedSelf]
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Self,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=<Self as Geometry>::D,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))], reveal: UserFacing })
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits: fully_normalize_with_fulfillcx(value=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))])
rustc::traits::project: normalize_with_depth(depth=0, value=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))])
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)): [ParamCandidate(Binder(<Self as Dimensionality>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), ParamCandidate(Binder(<Self as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),Binder(<Self as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Dimensionality>::Vector no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) } }, value=Normalized(<Self as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), ParamCandidate(Binder(<Self as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),Binder(<Self as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Dimensionality>::Point no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) } }, value=Normalized(<Self as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Dimensionality>::Point as EuclideanSpace>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Dimensionality>::Point as EuclideanSpace>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Dimensionality>::Point as EuclideanSpace>::Diff no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) } }, value=Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))] with 9 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits: fully_normalize: normalized_value=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))] obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=2)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), ParamCandidate(Binder(<Self as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),Binder(<Self as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Dimensionality>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))` at depth 0 yielded Ok(Some)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits: normalize_param_env_or_error: normalized predicates=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::project: normalize_with_depth(depth=0, value=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))]))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)): [ParamCandidate(Binder(<Self as Dimensionality>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), ParamCandidate(Binder(<Self as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),Binder(<Self as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Dimensionality>::Point no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) } }, value=Normalized(<Self as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), ParamCandidate(Binder(<Self as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),Binder(<Self as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Dimensionality>::Vector no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) } }, value=Normalized(<Self as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))]) with 1 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Dimensionality>::Point as EuclideanSpace>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Dimensionality>::Point as EuclideanSpace>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Dimensionality>::Point as EuclideanSpace>::Diff no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) } }, value=Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 12 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Dimensionality>::Point,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Dimensionality>::Point,depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as Dimensionality>::Point,depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 13 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 14 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 15 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0) with 15 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 14 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 15 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 16 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)),depth=0) with 16 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 14 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) with 14 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Dimensionality>::Point,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Dimensionality>::Point,depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as Dimensionality>::Point,depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Dimensionality>::Vector,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Dimensionality>::Vector,depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as Dimensionality>::Vector,depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Self,depth=0))
rustc::traits::fulfill: select(obligation-forest-size=12)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), ParamCandidate(Binder(<Self as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),Binder(<Self as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Dimensionality>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>)
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::marker::Sized>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0),Binder(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::marker::Sized>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Sized>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Sized>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Sized>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Dimensionality>::Point as std::marker::Sized>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Sized>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0),Binder(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::marker::Sized>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))` at depth 0 yielded Ok(Some)
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: obligation self ty is <Self as Dimensionality>::Point
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::marker::Copy>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::marker::Copy> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:862 ~ core[f3a2]::marker[0]::copy_impls[0]::{{impl}}[3]), obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0), impl_trait_ref=<&_ as std::marker::Copy>, skol_obligation_trait_ref=<<Self as Dimensionality>::Point as std::marker::Copy>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found reference`
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::marker::Copy>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Copy>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Copy>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0),Binder(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::marker::Copy>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Copy>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Copy>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Copy>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Dimensionality>::Point as std::marker::Copy>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Copy>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Copy>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0),Binder(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::marker::Copy>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Dimensionality>::Point)
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Sub<RHS>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as std::ops::Sub<RHS>>::Output as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<RHS as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Sub<RHS>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Sub<RHS>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as std::ops::Sub<RHS>>::Output as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<RHS as std::marker::Sized>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(2/0:869 ~ core[f3a2]::ops[0]::arith[0]::Sub[0])) = []
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0),Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0),Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::clone::Clone>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::clone::Clone> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1279 ~ core[f3a2]::clone[0]::impls[0]::{{impl}}[3]), obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0), impl_trait_ref=<&_ as std::clone::Clone>, skol_obligation_trait_ref=<<Self as Dimensionality>::Point as std::clone::Clone>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found reference`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Dimensionality>::Point)
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(2/0:1265 ~ core[f3a2]::clone[0]::Clone[0])) = [SizedSelf]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(2/0:834 ~ core[f3a2]::marker[0]::Sized[0])) = [SizedSelf]
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::clone::Clone>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::clone::Clone>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0),Binder(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::clone::Clone>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::clone::Clone>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::clone::Clone>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::clone::Clone>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Dimensionality>::Point as std::clone::Clone>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::clone::Clone>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::clone::Clone>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0),Binder(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::clone::Clone>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))` at depth 0 yielded Ok(Some)
rustc::traits::project: poly_project_and_unify_type(obligation=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)),depth=0))
rustc::traits::project: project_and_unify_type(obligation=Obligation(predicate=ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=true same_def_id=true
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=true same_def_id=true
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0),Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)
rustc::traits::project: confirm_candidate(candidate=ParamEnv(Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))), obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Dimensionality>::Point depth=0 projected_obligations=[]
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=1)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type: normalized_ty=<Self as Dimensionality>::Point depth=0
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) } }, value=Normalized(<Self as Dimensionality>::Point,[])
rustc::traits::project: project_and_unify_type: normalized_ty=<Self as Dimensionality>::Point obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=1)]
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:12 ~ impl_assoc_working[317d]::EuclideanSpace[0]), substs=[<Self as Dimensionality>::Point]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>)
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:12 ~ impl_assoc_working[317d]::EuclideanSpace[0]), substs=[<Self as Dimensionality>::Point]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>)
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::marker::Sized>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0),Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Dimensionality>::Vector as std::marker::Sized>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0),Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Self,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=<Self as Dimensionality>::Vector,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=<Self as Dimensionality>::Point,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<Self as EuclideanSpace>))], reveal: UserFacing })
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<Self as std::clone::Clone>))]
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))]
rustc::traits: fully_normalize_with_fulfillcx(value=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))])
rustc::traits::project: normalize_with_depth(depth=0, value=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))])
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as EuclideanSpace>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<Self as EuclideanSpace>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)): [ParamCandidate(Binder(<Self as EuclideanSpace>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<Self as EuclideanSpace>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as EuclideanSpace>, candidate=Ok(Some(ParamCandidate(Binder(<Self as EuclideanSpace>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<Self as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0),Binder(<Self as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<Self as EuclideanSpace>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as EuclideanSpace>::Diff no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) } }, value=Normalized(<Self as EuclideanSpace>::Diff,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))] with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits: fully_normalize: normalized_value=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))] obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<Self as EuclideanSpace>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<Self as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0),Binder(<Self as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<Self as EuclideanSpace>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as EuclideanSpace>))` at depth 0 yielded Ok(Some)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))]
rustc::traits: normalize_param_env_or_error: normalized predicates=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<Self as std::clone::Clone>))]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::project: normalize_with_depth(depth=0, value=InstantiatedPredicates([Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<Self as EuclideanSpace>))]))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as EuclideanSpace>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<Self as EuclideanSpace>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)): [ParamCandidate(Binder(<Self as EuclideanSpace>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<Self as EuclideanSpace>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as EuclideanSpace>, candidate=Ok(Some(ParamCandidate(Binder(<Self as EuclideanSpace>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<Self as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0),Binder(<Self as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<Self as EuclideanSpace>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as EuclideanSpace>::Diff no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) } }, value=Normalized(<Self as EuclideanSpace>::Diff,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=InstantiatedPredicates([Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<Self as EuclideanSpace>))]) with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>::Output as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)) is_match=true same_def_id=true
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0) poly_trait_ref=Binder(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0)): [ParamCandidate(Binder(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)))=Ok(Some(ParamCandidate(Binder(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>, candidate=Ok(Some(ParamCandidate(Binder(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0), ParamCandidate(Binder(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0),Binder(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0) poly_trait_ref=Binder(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)
rustc::traits::project: confirm_candidate(candidate=ParamEnv(Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))), obligation=Obligation(predicate=ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: opt_normalize_projection_type: projected_ty=Self depth=0 projected_obligations=[]
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) } }, value=Normalized(Self,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>::Output to Self, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as EuclideanSpace>::Diff,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as EuclideanSpace>::Diff,depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Self,depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as EuclideanSpace>::Diff,depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>::Output as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(Self,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>::Output to Self, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0) with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as EuclideanSpace>::Diff,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as EuclideanSpace>::Diff,depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Self,depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as EuclideanSpace>::Diff,depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as EuclideanSpace>::Diff,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as EuclideanSpace>::Diff,depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as EuclideanSpace>::Diff,depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Self,depth=0))
rustc::traits::fulfill: select(obligation-forest-size=9)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<Self as EuclideanSpace>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<Self as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0),Binder(<Self as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<Self as EuclideanSpace>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as EuclideanSpace>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as std::clone::Clone>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::clone::Clone>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::clone::Clone> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1279 ~ core[f3a2]::clone[0]::impls[0]::{{impl}}[3]), obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0), impl_trait_ref=<&_ as std::clone::Clone>, skol_obligation_trait_ref=<Self as std::clone::Clone>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected Self, found reference`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0) poly_trait_ref=Binder(<Self as std::clone::Clone>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0)): [ParamCandidate(Binder(<Self as std::clone::Clone>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as std::clone::Clone>)))=Ok(Some(ParamCandidate(Binder(<Self as std::clone::Clone>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as std::clone::Clone>, candidate=Ok(Some(ParamCandidate(Binder(<Self as std::clone::Clone>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0), ParamCandidate(Binder(<Self as std::clone::Clone>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0),Binder(<Self as std::clone::Clone>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0) poly_trait_ref=Binder(<Self as std::clone::Clone>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as std::clone::Clone>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as std::marker::Copy>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: obligation self ty is Self
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::marker::Copy>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::marker::Copy> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:862 ~ core[f3a2]::marker[0]::copy_impls[0]::{{impl}}[3]), obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0), impl_trait_ref=<&_ as std::marker::Copy>, skol_obligation_trait_ref=<Self as std::marker::Copy>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected Self, found reference`
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0) poly_trait_ref=Binder(<Self as std::marker::Copy>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0)): [ParamCandidate(Binder(<Self as std::marker::Copy>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as std::marker::Copy>)))=Ok(Some(ParamCandidate(Binder(<Self as std::marker::Copy>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as std::marker::Copy>, candidate=Ok(Some(ParamCandidate(Binder(<Self as std::marker::Copy>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0), ParamCandidate(Binder(<Self as std::marker::Copy>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0),Binder(<Self as std::marker::Copy>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0) poly_trait_ref=Binder(<Self as std::marker::Copy>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as std::marker::Copy>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:12 ~ impl_assoc_working[317d]::EuclideanSpace[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<Self as EuclideanSpace>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<Self as std::marker::Sized>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:12 ~ impl_assoc_working[317d]::EuclideanSpace[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<Self as EuclideanSpace>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0),Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)))=Ok(Some(ParamCandidate(Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as EuclideanSpace>::Diff as std::marker::Sized>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0),Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<Self as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0)): [ParamCandidate(Binder(<Self as std::marker::Sized>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as std::marker::Sized>)))=Ok(Some(ParamCandidate(Binder(<Self as std::marker::Sized>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as std::marker::Sized>, candidate=Ok(Some(ParamCandidate(Binder(<Self as std::marker::Sized>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<Self as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0),Binder(<Self as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<Self as std::marker::Sized>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)))=Ok(Some(ParamCandidate(Binder(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0), ParamCandidate(Binder(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0),Binder(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0) poly_trait_ref=Binder(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>))` at depth 0 yielded Ok(Some)
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: poly_project_and_unify_type(obligation=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)),depth=0))
rustc::traits::project: project_and_unify_type(obligation=Obligation(predicate=ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(Self,[])`
rustc::traits::project: project_and_unify_type: normalized_ty=Self obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0)]
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=<Self as EuclideanSpace>::Diff,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Self,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [], reveal: UserFacing })
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[]
rustc::traits: fully_normalize_with_fulfillcx(value=[])
rustc::traits::project: normalize_with_depth(depth=0, value=[])
rustc::traits::project: normalize_with_depth: depth=0 result=[] with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits: fully_normalize: normalized_value=[] obligations=[]
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[]
rustc::traits: normalize_param_env_or_error: normalized predicates=[]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::project: normalize_with_depth(depth=0, value=Binder(([]; variadic: false)->()))
rustc::traits::project: normalize_with_depth: depth=0 result=Binder(([]; variadic: false)->()) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Binder(([]; variadic: false)->()))
rustc::traits::project: normalize_with_depth: depth=0 result=Binder(([]; variadic: false)->()) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=(),depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=InstantiatedPredicates([]))
rustc::traits::project: normalize_with_depth: depth=0 result=InstantiatedPredicates([]) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=(),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits::query::outlives_bounds: implied_outlives_bounds(ty = ())
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: implied_outlives_bounds for (): Ok(
    InferOk {
        value: [],
        obligations: []
    }
)
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))], reveal: UserFacing })
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits: fully_normalize_with_fulfillcx(value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))])
rustc::traits::project: normalize_with_depth(depth=0, value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))])
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))] with 1 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits: fully_normalize: normalized_value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))] obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Geometry>))` at depth 0 yielded Ok(Some)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits: normalize_param_env_or_error: normalized predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))], reveal: UserFacing })
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits: fully_normalize_with_fulfillcx(value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))])
rustc::traits::project: normalize_with_depth(depth=0, value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))])
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))] with 1 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits: fully_normalize: normalized_value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))] obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Geometry>))` at depth 0 yielded Ok(Some)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits: normalize_param_env_or_error: normalized predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::project: normalize_with_depth(depth=0, value=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Geometry>::D)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Point no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point) with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=&Self,depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))]))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))]) with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Vector no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point) with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Self)
rustc::traits::project: normalize_with_depth: depth=0 result=Self with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=&Self)
rustc::traits::project: normalize_with_depth: depth=0 result=&Self with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: select(obligation-forest-size=10)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Geometry>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))` at depth 0 yielded Ok(Some)
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:6 ~ impl_assoc_working[317d]::Geometry[0]::min[0]), BrAnon(0)))),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:6 ~ impl_assoc_working[317d]::Geometry[0]::min[0]), BrAnon(0)))),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as std::marker::Sized>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Self,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=<Self as Geometry>::D,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:6 ~ impl_assoc_working[317d]::Geometry[0]::min[0]), BrAnon(0)))),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=&Self,depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits::query::outlives_bounds: implied_outlives_bounds(ty = &Self)
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(OutlivesPredicate(Self, '_#0r)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(OutlivesPredicate(Self, '_#0r)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: implied_outlives_bounds for &Self: Ok(
    InferOk {
        value: [
            RegionSubParam(
                ReFree(DefId(0/0:6 ~ impl_assoc_working[317d]::Geometry[0]::min[0]), BrAnon(0)),
                Self/#0
            )
        ],
        obligations: []
    }
)
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: implied_outlives_bounds(ty = <<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Geometry>::D)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Point no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Vector no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: implied_outlives_bounds for <<Self as Geometry>::D as Dimensionality>::Point: Ok(
    InferOk {
        value: [],
        obligations: []
    }
)
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))], reveal: UserFacing })
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits: fully_normalize_with_fulfillcx(value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))])
rustc::traits::project: normalize_with_depth(depth=0, value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))])
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))] with 1 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits: fully_normalize: normalized_value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))] obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Geometry>))` at depth 0 yielded Ok(Some)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits: normalize_param_env_or_error: normalized predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::project: normalize_with_depth(depth=0, value=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Geometry>::D)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Point no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point) with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=&Self,depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))]))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))]) with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Vector no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point) with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Self)
rustc::traits::project: normalize_with_depth: depth=0 result=Self with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=&Self)
rustc::traits::project: normalize_with_depth: depth=0 result=&Self with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: select(obligation-forest-size=10)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Geometry>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))` at depth 0 yielded Ok(Some)
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:7 ~ impl_assoc_working[317d]::Geometry[0]::max[0]), BrAnon(0)))),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:7 ~ impl_assoc_working[317d]::Geometry[0]::max[0]), BrAnon(0)))),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as std::marker::Sized>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Self,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=<Self as Geometry>::D,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:7 ~ impl_assoc_working[317d]::Geometry[0]::max[0]), BrAnon(0)))),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=&Self,depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits::query::outlives_bounds: implied_outlives_bounds(ty = &Self)
rustc::traits::query::outlives_bounds: implied_outlives_bounds for &Self: Ok(
    InferOk {
        value: [
            RegionSubParam(
                ReFree(DefId(0/0:7 ~ impl_assoc_working[317d]::Geometry[0]::max[0]), BrAnon(0)),
                Self/#0
            )
        ],
        obligations: []
    }
)
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: implied_outlives_bounds(ty = <<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::query::outlives_bounds: implied_outlives_bounds for <<Self as Geometry>::D as Dimensionality>::Point: Ok(
    InferOk {
        value: [],
        obligations: []
    }
)
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))], reveal: UserFacing })
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits: fully_normalize_with_fulfillcx(value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))])
rustc::traits::project: normalize_with_depth(depth=0, value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))])
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))] with 1 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits: fully_normalize: normalized_value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))] obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Geometry>))` at depth 0 yielded Ok(Some)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits: normalize_param_env_or_error: normalized predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::project: normalize_with_depth(depth=0, value=Binder(([&Self]; variadic: false)-><<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Geometry>::D)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Point no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) } }, value=Normalized(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, now with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Binder(([&Self]; variadic: false)-><<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Binder(([&Self]; variadic: false)-><<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Binder(([&Self]; variadic: false)-><<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=&Self,depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))]))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))]) with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Vector no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Binder(([&Self]; variadic: false)-><<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Binder(([&Self]; variadic: false)-><<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=Self)
rustc::traits::project: normalize_with_depth: depth=0 result=Self with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=&Self)
rustc::traits::project: normalize_with_depth: depth=0 result=&Self with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: select(obligation-forest-size=10)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Geometry>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))` at depth 0 yielded Ok(Some)
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:8 ~ impl_assoc_working[317d]::Geometry[0]::dims[0]), BrAnon(0)))),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:8 ~ impl_assoc_working[317d]::Geometry[0]::dims[0]), BrAnon(0)))),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 7 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0) with 7 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 9 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)),depth=0) with 9 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as std::marker::Sized>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=<Self as Geometry>::D,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Self,depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)


rustc::traits::select: obligation self ty is <<Self as Geometry>::D as Dimensionality>::Point
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::marker::Copy>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::marker::Copy> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:862 ~ core[f3a2]::marker[0]::copy_impls[0]::{{impl}}[3]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0), impl_trait_ref=<&_ as std::marker::Copy>, skol_obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found reference`
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]

~~~ YOU ARE HERE ~~~
rustc::traits::select:
    match_projection_obligation_against_definition_bounds:
        bounds=InstantiatedPredicates(
            [
                Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),
                Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
                Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),


rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]

rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::clone::Clone>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::clone::Clone> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1279 ~ core[f3a2]::clone[0]::impls[0]::{{impl}}[3]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0), impl_trait_ref=<&_ as std::clone::Clone>, skol_obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found reference`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))` at depth 0 yielded Ok(Some)
rustc::traits::project: poly_project_and_unify_type(obligation=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)),depth=0))
rustc::traits::project: project_and_unify_type(obligation=Obligation(predicate=ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)) is_match=true same_def_id=true
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: confirm_candidate(candidate=TraitDef(Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))), obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Point depth=0 projected_obligations=[]
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=1)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=1)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type: normalized_ty=<<Self as Geometry>::D as Dimensionality>::Point depth=0
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])
rustc::traits::project: project_and_unify_type: normalized_ty=<<Self as Geometry>::D as Dimensionality>::Point obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1)]
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:12 ~ impl_assoc_working[317d]::EuclideanSpace[0]), substs=[<<Self as Geometry>::D as Dimensionality>::Point]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)), Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:12 ~ impl_assoc_working[317d]::EuclideanSpace[0]), substs=[<<Self as Geometry>::D as Dimensionality>::Point]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)), Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:8 ~ impl_assoc_working[317d]::Geometry[0]::dims[0]), BrAnon(0)))),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=&Self,depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits::query::outlives_bounds: implied_outlives_bounds(ty = &Self)
rustc::traits::query::outlives_bounds: implied_outlives_bounds for &Self: Ok(
    InferOk {
        value: [
            RegionSubParam(
                ReFree(DefId(0/0:8 ~ impl_assoc_working[317d]::Geometry[0]::dims[0]), BrAnon(0)),
                Self/#0
            )
        ],
        obligations: []
    }
)
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: implied_outlives_bounds(ty = <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff)
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Geometry>::D)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Point no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0) with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) } }, value=Normalized(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 6 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0) with 6 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 9 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)),depth=0) with 9 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Vector no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: implied_outlives_bounds for <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff: Ok(
    InferOk {
        value: [],
        obligations: []
    }
)
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))], reveal: UserFacing })
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits: fully_normalize_with_fulfillcx(value=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))])
rustc::traits::project: normalize_with_depth(depth=0, value=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))])
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)): [ParamCandidate(Binder(<Self as Dimensionality>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), ParamCandidate(Binder(<Self as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),Binder(<Self as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Dimensionality>::Vector no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) } }, value=Normalized(<Self as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), ParamCandidate(Binder(<Self as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),Binder(<Self as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Dimensionality>::Point no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) } }, value=Normalized(<Self as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Dimensionality>::Point as EuclideanSpace>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Dimensionality>::Point as EuclideanSpace>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Dimensionality>::Point as EuclideanSpace>::Diff no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) } }, value=Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))] with 9 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits: fully_normalize: normalized_value=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))] obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=2)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), ParamCandidate(Binder(<Self as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),Binder(<Self as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Dimensionality>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))` at depth 0 yielded Ok(Some)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits: normalize_param_env_or_error: normalized predicates=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))], reveal: UserFacing })
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits: fully_normalize_with_fulfillcx(value=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))])
rustc::traits::project: normalize_with_depth(depth=0, value=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))])
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)): [ParamCandidate(Binder(<Self as Dimensionality>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), ParamCandidate(Binder(<Self as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),Binder(<Self as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Dimensionality>::Vector no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) } }, value=Normalized(<Self as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), ParamCandidate(Binder(<Self as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),Binder(<Self as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Dimensionality>::Point no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) } }, value=Normalized(<Self as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Dimensionality>::Point as EuclideanSpace>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Dimensionality>::Point as EuclideanSpace>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Dimensionality>::Point as EuclideanSpace>::Diff no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) } }, value=Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Dimensionality>::Point as EuclideanSpace>::Diff, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))] with 9 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits: fully_normalize: normalized_value=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))] obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=2)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), ParamCandidate(Binder(<Self as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),Binder(<Self as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Dimensionality>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))` at depth 0 yielded Ok(Some)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits: normalize_param_env_or_error: normalized predicates=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<Self as EuclideanSpace>))], reveal: UserFacing })
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<Self as std::clone::Clone>))]
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))]
rustc::traits: fully_normalize_with_fulfillcx(value=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))])
rustc::traits::project: normalize_with_depth(depth=0, value=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))])
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as EuclideanSpace>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<Self as EuclideanSpace>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)): [ParamCandidate(Binder(<Self as EuclideanSpace>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<Self as EuclideanSpace>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as EuclideanSpace>, candidate=Ok(Some(ParamCandidate(Binder(<Self as EuclideanSpace>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<Self as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0),Binder(<Self as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<Self as EuclideanSpace>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as EuclideanSpace>::Diff no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) } }, value=Normalized(<Self as EuclideanSpace>::Diff,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))] with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits: fully_normalize: normalized_value=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))] obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<Self as EuclideanSpace>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<Self as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0),Binder(<Self as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<Self as EuclideanSpace>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as EuclideanSpace>))` at depth 0 yielded Ok(Some)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))]
rustc::traits: normalize_param_env_or_error: normalized predicates=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::project: normalize_with_depth(depth=0, value=([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Geometry>::D)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Point no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<_ as std::marker::Sized>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=0, value=_)
rustc::traits::project: normalize_with_depth: depth=0 result=&Self with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Deref>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Deref>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as std::ops::Deref>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Deref>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Deref>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::ops::Deref>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::ops::Deref> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:956 ~ core[f3a2]::ops[0]::deref[0]::{{impl}}[0]), obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Deref>)),depth=0), impl_trait_ref=<&_ as std::ops::Deref>, skol_obligation_trait_ref=<Self as std::ops::Deref>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected Self, found reference`
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::ops::Deref>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::ops::Deref> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:959 ~ core[f3a2]::ops[0]::deref[0]::{{impl}}[1]), obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Deref>)),depth=0), impl_trait_ref=<&mut _ as std::ops::Deref>, skol_obligation_trait_ref=<Self as std::ops::Deref>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected Self, found &mut _`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Deref>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Deref>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Deref>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(2/0:953 ~ core[f3a2]::ops[0]::deref[0]::Deref[0])) = []
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Deref>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Deref>)),depth=0))
rustc::traits::select: assemble_candidates_from_auto_impls(self_ty=Self)
rustc::traits::select: candidate list size: 0
rustc::traits::select: assembled 0 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Deref>)),depth=0)): []
rustc::traits::select: winnowed to 0 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Deref>)),depth=0)): []
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as std::ops::Deref>)))=Err(Unimplemented)
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as std::ops::Deref>, candidate=Err(Unimplemented)) local
rustc::traits::select: CACHE MISS: EVAL(Binder(<Self as std::ops::Deref>))=EvaluatedToErr
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<Self as std::ops::Deref>), candidate=EvaluatedToErr)
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: normalize_with_depth(depth=0, value=&Self)
rustc::traits::project: normalize_with_depth: depth=0 result=&Self with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point, InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point, InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::util: predicates_for_generics(generic_bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))]))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Self,depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=fn(&Self) -> <<Self as Geometry>::D as Dimensionality>::Point,depth=0))
rustc::traits::fulfill: select(obligation-forest-size=7)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<&Self as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: builtin_bound: nested=Binder([])
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0)): [BuiltinCandidate { has_nested: false }]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<&Self as std::marker::Sized>)))=Ok(Some(BuiltinCandidate { has_nested: false }))
rustc::traits::select: insert_candidate_cache(trait_ref=<&Self as std::marker::Sized>, candidate=Ok(Some(BuiltinCandidate { has_nested: false }))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0), BuiltinCandidate { has_nested: false })
rustc::traits::select: confirm_builtin_candidate(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0), false)
rustc::traits::select: confirm_builtin_candidate: obligations=[]
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<&Self as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Geometry>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as std::marker::Sized>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(OutlivesPredicate(Self, '_#1r)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(OutlivesPredicate(Self, '_#1r)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Vector no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Self,depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=<Self as Geometry>::D,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(OutlivesPredicate(Self, '_#1r)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=fn(&Self) -> <<Self as Geometry>::D as Dimensionality>::Point,depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<FreshTy(0)>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::ops::CoerceUnsized<&mut _>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::ops::CoerceUnsized<&mut _>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1108 ~ core[f3a2]::ops[0]::unsize[0]::{{impl}}[0]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0), impl_trait_ref=<&mut _ as std::ops::CoerceUnsized<&mut _>>, skol_obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found &mut _`
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::ops::CoerceUnsized<*const _>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::ops::CoerceUnsized<*const _>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1113 ~ core[f3a2]::ops[0]::unsize[0]::{{impl}}[5]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0), impl_trait_ref=<&_ as std::ops::CoerceUnsized<*const _>>, skol_obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found reference`
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::ops::CoerceUnsized<&_>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::ops::CoerceUnsized<&_>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1112 ~ core[f3a2]::ops[0]::unsize[0]::{{impl}}[4]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0), impl_trait_ref=<&_ as std::ops::CoerceUnsized<&_>>, skol_obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found reference`
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::ops::CoerceUnsized<&_>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::ops::CoerceUnsized<&_>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1109 ~ core[f3a2]::ops[0]::unsize[0]::{{impl}}[1]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0), impl_trait_ref=<&mut _ as std::ops::CoerceUnsized<&_>>, skol_obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found &mut _`
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::ops::CoerceUnsized<*const _>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::ops::CoerceUnsized<*const _>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1111 ~ core[f3a2]::ops[0]::unsize[0]::{{impl}}[3]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0), impl_trait_ref=<&mut _ as std::ops::CoerceUnsized<*const _>>, skol_obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found &mut _`
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::ops::CoerceUnsized<*mut _>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::ops::CoerceUnsized<*mut _>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1110 ~ core[f3a2]::ops[0]::unsize[0]::{{impl}}[2]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0), impl_trait_ref=<&mut _ as std::ops::CoerceUnsized<*mut _>>, skol_obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found &mut _`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::CoerceUnsized<T>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<T as std::marker::Sized>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(2/0:1107 ~ core[f3a2]::ops[0]::unsize[0]::CoerceUnsized[0])) = []
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=None
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0))
rustc::traits::select: assemble_candidates_from_auto_impls(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: candidate list size: 0
rustc::traits::select: assembled 0 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0)): []
rustc::traits::select: winnowed to 0 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0)): []
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<FreshTy(0)>>)))=Err(Unimplemented)
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<FreshTy(0)>>, candidate=Err(Unimplemented)) local
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<FreshTy(0)>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<FreshTy(0)>>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<FreshTy(0)>>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<FreshTy(0)>>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<FreshTy(0)>>), candidate=EvaluatedToOk)
rustc::traits::project: normalize_with_depth(depth=0, value=([<<Self as Geometry>::D as Dimensionality>::Point, _]; variadic: false)-><<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>::Output)
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, _], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, _], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, _], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, _], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)) is_match=true same_def_id=true
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<FreshTy(0)>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<FreshTy(0)>>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<FreshTy(0)>>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: confirm_candidate(candidate=TraitDef(Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))), obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, _], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Point depth=0 projected_obligations=[]
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=1)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=1)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type: normalized_ty=<<Self as Geometry>::D as Dimensionality>::Point depth=0
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, _], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>::Output to <<Self as Geometry>::D as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=([<<Self as Geometry>::D as Dimensionality>::Point, _]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point with 6 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1)]
rustc::traits::project: normalize_with_depth(depth=0, value=InstantiatedPredicates([Binder(TraitPredicate(<_ as std::marker::Sized>)), Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>::Output as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>))]))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) } }, value=Normalized(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)) is_match=true same_def_id=true
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: confirm_candidate(candidate=TraitDef(Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))), obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Point depth=0 projected_obligations=[]
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=1)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=1)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type: normalized_ty=<<Self as Geometry>::D as Dimensionality>::Point depth=0
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>::Output to <<Self as Geometry>::D as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, now with 14 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=InstantiatedPredicates([Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))]) with 14 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)]
rustc::traits::util: predicates_for_generics(generic_bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))]))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=fn(<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff) -> <<Self as Geometry>::D as Dimensionality>::Point,depth=0))
rustc::traits::fulfill: select(obligation-forest-size=3)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:12 ~ impl_assoc_working[317d]::EuclideanSpace[0]), substs=[<<Self as Geometry>::D as Dimensionality>::Point]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)), Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:12 ~ impl_assoc_working[317d]::EuclideanSpace[0]), substs=[<<Self as Geometry>::D as Dimensionality>::Point]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)), Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))` at depth 0 yielded Ok(Some)
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 7 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0) with 7 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 9 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)),depth=0) with 9 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: obligation self ty is <<Self as Geometry>::D as Dimensionality>::Point
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::marker::Copy>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::marker::Copy> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:862 ~ core[f3a2]::marker[0]::copy_impls[0]::{{impl}}[3]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0), impl_trait_ref=<&_ as std::marker::Copy>, skol_obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found reference`
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::clone::Clone>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::clone::Clone> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1279 ~ core[f3a2]::clone[0]::impls[0]::{{impl}}[3]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0), impl_trait_ref=<&_ as std::clone::Clone>, skol_obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found reference`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))` at depth 0 yielded Ok(Some)
rustc::traits::project: poly_project_and_unify_type(obligation=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)),depth=0))
rustc::traits::project: project_and_unify_type(obligation=Obligation(predicate=ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: project_and_unify_type: normalized_ty=<<Self as Geometry>::D as Dimensionality>::Point obligations=[Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=fn(<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff) -> <<Self as Geometry>::D as Dimensionality>::Point,depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::project: normalize_with_depth(depth=0, value=_)
rustc::traits::project: normalize_with_depth: depth=0 result=&Self with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: normalize_with_depth(depth=0, value=&Self)
rustc::traits::project: normalize_with_depth: depth=0 result=&Self with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=(([&Self]; variadic: false)-><<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=(([&Self]; variadic: false)-><<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])) with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::util: predicates_for_generics(generic_bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))]))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Self,depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=fn(&Self) -> <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,depth=0))
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(OutlivesPredicate(Self, '_#3r)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(OutlivesPredicate(Self, '_#3r)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 7 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0) with 7 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 9 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)),depth=0) with 9 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(OutlivesPredicate(Self, '_#3r)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=fn(&Self) -> <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::ops::CoerceUnsized<_>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::ops::CoerceUnsized<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::ops::CoerceUnsized<_>>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::ops::CoerceUnsized<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::ops::CoerceUnsized<&mut _>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::ops::CoerceUnsized<&mut _>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1108 ~ core[f3a2]::ops[0]::unsize[0]::{{impl}}[0]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::ops::CoerceUnsized<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0), impl_trait_ref=<&mut _ as std::ops::CoerceUnsized<&mut _>>, skol_obligation_trait_ref=<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::ops::CoerceUnsized<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found &mut _`
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::ops::CoerceUnsized<&_>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::ops::CoerceUnsized<&_>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1112 ~ core[f3a2]::ops[0]::unsize[0]::{{impl}}[4]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::ops::CoerceUnsized<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0), impl_trait_ref=<&_ as std::ops::CoerceUnsized<&_>>, skol_obligation_trait_ref=<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::ops::CoerceUnsized<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found reference`
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::ops::CoerceUnsized<&_>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::ops::CoerceUnsized<&_>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1109 ~ core[f3a2]::ops[0]::unsize[0]::{{impl}}[1]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::ops::CoerceUnsized<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0), impl_trait_ref=<&mut _ as std::ops::CoerceUnsized<&_>>, skol_obligation_trait_ref=<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::ops::CoerceUnsized<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found &mut _`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::ops::CoerceUnsized<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::ops::CoerceUnsized<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:12 ~ impl_assoc_working[317d]::EuclideanSpace[0]), substs=[<<Self as Geometry>::D as Dimensionality>::Point]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)), Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=None
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::ops::CoerceUnsized<_>>)),depth=0))
rustc::traits::select: assemble_candidates_from_auto_impls(self_ty=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff)
rustc::traits::select: candidate list size: 0
rustc::traits::select: assembled 0 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::ops::CoerceUnsized<_>>)),depth=0)): []
rustc::traits::select: winnowed to 0 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::ops::CoerceUnsized<_>>)),depth=0)): []
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::ops::CoerceUnsized<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)))=Err(Unimplemented)
rustc::traits::select: insert_candidate_cache(trait_ref=<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::ops::CoerceUnsized<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>, candidate=Err(Unimplemented)) local
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<<<Self as Geometry>::D as Dimensionality>::Point>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<<<Self as Geometry>::D as Dimensionality>::Point>>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::ops::CoerceUnsized<&mut _>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::ops::CoerceUnsized<&mut _>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1108 ~ core[f3a2]::ops[0]::unsize[0]::{{impl}}[0]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<<<Self as Geometry>::D as Dimensionality>::Point>>)),depth=0), impl_trait_ref=<&mut _ as std::ops::CoerceUnsized<&mut _>>, skol_obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<<<Self as Geometry>::D as Dimensionality>::Point>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found &mut _`
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::ops::CoerceUnsized<&_>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::ops::CoerceUnsized<&_>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1112 ~ core[f3a2]::ops[0]::unsize[0]::{{impl}}[4]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<<<Self as Geometry>::D as Dimensionality>::Point>>)),depth=0), impl_trait_ref=<&_ as std::ops::CoerceUnsized<&_>>, skol_obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<<<Self as Geometry>::D as Dimensionality>::Point>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found reference`
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::ops::CoerceUnsized<&_>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::ops::CoerceUnsized<&_>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1109 ~ core[f3a2]::ops[0]::unsize[0]::{{impl}}[1]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<<<Self as Geometry>::D as Dimensionality>::Point>>)),depth=0), impl_trait_ref=<&mut _ as std::ops::CoerceUnsized<&_>>, skol_obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<<<Self as Geometry>::D as Dimensionality>::Point>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found &mut _`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<<<Self as Geometry>::D as Dimensionality>::Point>>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<<<Self as Geometry>::D as Dimensionality>::Point>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=None
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0))
rustc::traits::select: assemble_candidates_from_auto_impls(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: candidate list size: 0
rustc::traits::select: assembled 0 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0)): []
rustc::traits::select: winnowed to 0 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0)): []
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<<<Self as Geometry>::D as Dimensionality>::Point>>)))=Err(Unimplemented)
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<<<Self as Geometry>::D as Dimensionality>::Point>>, candidate=Err(Unimplemented)) local
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<<<Self as Geometry>::D as Dimensionality>::Point>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<<<Self as Geometry>::D as Dimensionality>::Point>>)))=Err(Unimplemented)
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits::query::outlives_bounds: implied_outlives_bounds(ty = &Self)
rustc::traits::query::outlives_bounds: implied_outlives_bounds for &Self: Ok(
    InferOk {
        value: [
            RegionSubParam(
                ReFree(DefId(0/0:6 ~ impl_assoc_working[317d]::Geometry[0]::min[0]), BrAnon(0)),
                Self/#0
            )
        ],
        obligations: []
    }
)
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: implied_outlives_bounds(ty = <<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::query::outlives_bounds: implied_outlives_bounds for <<Self as Geometry>::D as Dimensionality>::Point: Ok(
    InferOk {
        value: [],
        obligations: []
    }
)
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::dropck_outlives: dropck_outlives(ty=<<Self as Geometry>::D as Dimensionality>::Point, param_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))], reveal: UserFacing })
rustc::traits::query::dropck_outlives: c_ty = Canonical { variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))], reveal: UserFacing }, value: <<Self as Geometry>::D as Dimensionality>::Point } }
rustc::traits::query::normalize: normalize::<&rustc::ty::TyS>(value=<<Self as Geometry>::D as Dimensionality>::Point, param_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))], reveal: UserFacing })
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                Self
            ],
            item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <Self as Geometry>::D
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                <Self as Geometry>::D
            ],
            item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Geometry>::D)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Point no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <<Self as Geometry>::D as Dimensionality>::Point
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::dropck_outlives: dropck_outlives(ty=<<Self as Geometry>::D as Dimensionality>::Point, param_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))], reveal: UserFacing })
rustc::traits::query::dropck_outlives: c_ty = Canonical { variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))], reveal: UserFacing }, value: <<Self as Geometry>::D as Dimensionality>::Point } }
rustc::traits::query::dropck_outlives: dropck_outlives(ty=<<Self as Geometry>::D as Dimensionality>::Point, param_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))], reveal: UserFacing })
rustc::traits::query::dropck_outlives: c_ty = Canonical { variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))], reveal: UserFacing }, value: <<Self as Geometry>::D as Dimensionality>::Point } }
rustc::traits::query::dropck_outlives: dropck_outlives(ty=&Self, param_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))], reveal: UserFacing })
rustc::traits::query::dropck_outlives: dropck_outlives(ty=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, param_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))], reveal: UserFacing })
rustc::traits::query::dropck_outlives: c_ty = Canonical { variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))], reveal: UserFacing }, value: <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff } }
rustc::traits::query::normalize: normalize::<&rustc::ty::TyS>(value=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, param_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))], reveal: UserFacing })
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                Self
            ],
            item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <Self as Geometry>::D
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                <Self as Geometry>::D
            ],
            item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <<Self as Geometry>::D as Dimensionality>::Point
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                <<Self as Geometry>::D as Dimensionality>::Point
            ],
            item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) } }, value=Normalized(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,[])
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::dropck_outlives: dropck_outlives(ty=&Self, param_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))], reveal: UserFacing })
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<Self as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<Self as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<Self as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<Self as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<Self as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<Self as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<Self as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<Self as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: normalize_with_depth(depth=0, value=([]; variadic: false)->())
rustc::traits::project: normalize_with_depth: depth=0 result=([]; variadic: false)->() with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Sized>)),depth=0))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<() as std::ops::CoerceUnsized<_>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<() as std::ops::CoerceUnsized<()>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<() as std::ops::CoerceUnsized<_>>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<() as std::ops::CoerceUnsized<()>>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::ops::CoerceUnsized<&mut _>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::ops::CoerceUnsized<&mut _>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1108 ~ core[f3a2]::ops[0]::unsize[0]::{{impl}}[0]), obligation=Obligation(predicate=Binder(TraitPredicate(<() as std::ops::CoerceUnsized<()>>)),depth=0), impl_trait_ref=<&mut _ as std::ops::CoerceUnsized<&mut _>>, skol_obligation_trait_ref=<() as std::ops::CoerceUnsized<()>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected (), found &mut _`
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::ops::CoerceUnsized<&_>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::ops::CoerceUnsized<&_>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1112 ~ core[f3a2]::ops[0]::unsize[0]::{{impl}}[4]), obligation=Obligation(predicate=Binder(TraitPredicate(<() as std::ops::CoerceUnsized<()>>)),depth=0), impl_trait_ref=<&_ as std::ops::CoerceUnsized<&_>>, skol_obligation_trait_ref=<() as std::ops::CoerceUnsized<()>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected (), found reference`
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::ops::CoerceUnsized<&_>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::ops::CoerceUnsized<&_>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1109 ~ core[f3a2]::ops[0]::unsize[0]::{{impl}}[1]), obligation=Obligation(predicate=Binder(TraitPredicate(<() as std::ops::CoerceUnsized<()>>)),depth=0), impl_trait_ref=<&mut _ as std::ops::CoerceUnsized<&_>>, skol_obligation_trait_ref=<() as std::ops::CoerceUnsized<()>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected (), found &mut _`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=())
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<() as std::ops::CoerceUnsized<()>>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<() as std::ops::CoerceUnsized<_>>)),depth=0))
rustc::traits::select: assemble_candidates_from_auto_impls(self_ty=())
rustc::traits::select: candidate list size: 0
rustc::traits::select: assembled 0 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<() as std::ops::CoerceUnsized<_>>)),depth=0)): []
rustc::traits::select: winnowed to 0 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<() as std::ops::CoerceUnsized<_>>)),depth=0)): []
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<() as std::ops::CoerceUnsized<()>>)))=Err(Unimplemented)
rustc::traits::select: insert_candidate_cache(trait_ref=<() as std::ops::CoerceUnsized<()>>, candidate=Err(Unimplemented)) global
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<() as std::process::Termination>)),depth=0))
rustc::traits::fulfill: select(obligation-forest-size=2)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Sized>)),depth=0)) - in global
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<() as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: builtin_bound: nested=Binder([])
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Sized>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Sized>)),depth=0)): [BuiltinCandidate { has_nested: false }]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<() as std::marker::Sized>)))=Ok(Some(BuiltinCandidate { has_nested: false }))
rustc::traits::select: insert_candidate_cache(trait_ref=<() as std::marker::Sized>, candidate=Ok(Some(BuiltinCandidate { has_nested: false }))) global
rustc::traits::select: evaluate_candidate: depth=0 candidate=BuiltinCandidate { has_nested: false }
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Sized>)),depth=0), BuiltinCandidate { has_nested: false })
rustc::traits::select: confirm_builtin_candidate(Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Sized>)),depth=0), false)
rustc::traits::select: confirm_builtin_candidate: obligations=[]
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<() as std::marker::Sized>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<() as std::marker::Sized>), candidate=EvaluatedToOk) global
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<() as std::marker::Sized>))` at depth 0 evaluated to holds
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<() as std::process::Termination>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<() as std::process::Termination>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<() as std::process::Termination>)),depth=0)) - in global
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<() as std::process::Termination>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<() as std::process::Termination>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<() as std::process::Termination>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<() as std::process::Termination>)
rustc::traits::project: normalize_with_depth: depth=1 result=<() as std::process::Termination> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(1/0:3163 ~ std[b095]::process[0]::{{impl}}[37]), obligation=Obligation(predicate=Binder(TraitPredicate(<() as std::process::Termination>)),depth=0), impl_trait_ref=<() as std::process::Termination>, skol_obligation_trait_ref=<() as std::process::Termination>)
rustc::traits::select: match_impl: success impl_substs=[]
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=())
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::process::Termination>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::process::Termination>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(1/0:3161 ~ std[b095]::process[0]::Termination[0])) = []
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<() as std::process::Termination>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<() as std::process::Termination>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<() as std::process::Termination>)),depth=0)): [ImplCandidate(DefId(1/0:3163 ~ std[b095]::process[0]::{{impl}}[37]))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<() as std::process::Termination>)))=Ok(Some(ImplCandidate(DefId(1/0:3163 ~ std[b095]::process[0]::{{impl}}[37]))))
rustc::traits::select: insert_candidate_cache(trait_ref=<() as std::process::Termination>, candidate=Ok(Some(ImplCandidate(DefId(1/0:3163 ~ std[b095]::process[0]::{{impl}}[37]))))) global
rustc::traits::select: evaluate_candidate: depth=0 candidate=ImplCandidate(DefId(1/0:3163 ~ std[b095]::process[0]::{{impl}}[37]))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<() as std::process::Termination>)),depth=0), ImplCandidate(DefId(1/0:3163 ~ std[b095]::process[0]::{{impl}}[37])))
rustc::traits::select: confirm_impl_candidate(Obligation(predicate=Binder(TraitPredicate(<() as std::process::Termination>)),depth=0),DefId(1/0:3163 ~ std[b095]::process[0]::{{impl}}[37]))
rustc::traits::project: normalize_with_depth(depth=1, value=<() as std::process::Termination>)
rustc::traits::project: normalize_with_depth: depth=1 result=<() as std::process::Termination> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(1/0:3163 ~ std[b095]::process[0]::{{impl}}[37]), obligation=Obligation(predicate=Binder(TraitPredicate(<() as std::process::Termination>)),depth=0), impl_trait_ref=<() as std::process::Termination>, skol_obligation_trait_ref=<() as std::process::Termination>)
rustc::traits::select: match_impl: success impl_substs=[]
rustc::traits::select: confirm_impl_candidate substs=Normalized([],[])
rustc::traits::select: vtable_impl(impl_def_id=DefId(1/0:3163 ~ std[b095]::process[0]::{{impl}}[37]), substs=Normalized([],[]), recursion_depth=1, skol_map={})
rustc::traits::select: impl_or_trait_obligations(def_id=DefId(1/0:3163 ~ std[b095]::process[0]::{{impl}}[37]))
rustc::traits::select: vtable_impl: impl_def_id=DefId(1/0:3163 ~ std[b095]::process[0]::{{impl}}[37]) impl_obligations=[]
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<() as std::process::Termination>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<() as std::process::Termination>), candidate=EvaluatedToOk) global
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<() as std::process::Termination>))` at depth 0 evaluated to holds
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<() as std::process::Termination>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Sized>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits::query::outlives_bounds: implied_outlives_bounds(ty = ())
rustc::traits::query::outlives_bounds: implied_outlives_bounds for (): Ok(
    InferOk {
        value: [],
        obligations: []
    }
)
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::dropck_outlives: dropck_outlives(ty=(), param_env=ParamEnv { caller_bounds: [], reveal: UserFacing })
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: type_known_to_meet_bound(ty=&Self, bound="std::marker::Copy")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Copy>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Copy>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<&Self as std::marker::Copy>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Copy>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: obligation self ty is &Self
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Copy>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::marker::Copy>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::marker::Copy> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:862 ~ core[f3a2]::marker[0]::copy_impls[0]::{{impl}}[3]), obligation=Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Copy>)),depth=0), impl_trait_ref=<&_ as std::marker::Copy>, skol_obligation_trait_ref=<&Self as std::marker::Copy>)
rustc::traits::select: match_impl: success impl_substs=['_#1r, _]
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Copy>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Copy>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Copy>)),depth=0)): [ImplCandidate(DefId(2/0:862 ~ core[f3a2]::marker[0]::copy_impls[0]::{{impl}}[3]))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<&Self as std::marker::Copy>)))=Ok(Some(ImplCandidate(DefId(2/0:862 ~ core[f3a2]::marker[0]::copy_impls[0]::{{impl}}[3]))))
rustc::traits::select: insert_candidate_cache(trait_ref=<&Self as std::marker::Copy>, candidate=Ok(Some(ImplCandidate(DefId(2/0:862 ~ core[f3a2]::marker[0]::copy_impls[0]::{{impl}}[3]))))) local
rustc::traits::select: evaluate_candidate: depth=0 candidate=ImplCandidate(DefId(2/0:862 ~ core[f3a2]::marker[0]::copy_impls[0]::{{impl}}[3]))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Copy>)),depth=0), ImplCandidate(DefId(2/0:862 ~ core[f3a2]::marker[0]::copy_impls[0]::{{impl}}[3])))
rustc::traits::select: confirm_impl_candidate(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Copy>)),depth=0),DefId(2/0:862 ~ core[f3a2]::marker[0]::copy_impls[0]::{{impl}}[3]))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::marker::Copy>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::marker::Copy> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:862 ~ core[f3a2]::marker[0]::copy_impls[0]::{{impl}}[3]), obligation=Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Copy>)),depth=0), impl_trait_ref=<&_ as std::marker::Copy>, skol_obligation_trait_ref=<&Self as std::marker::Copy>)
rustc::traits::select: match_impl: success impl_substs=['_#1r, _]
rustc::traits::select: confirm_impl_candidate substs=Normalized(['_#1r, _],[])
rustc::traits::select: vtable_impl(impl_def_id=DefId(2/0:862 ~ core[f3a2]::marker[0]::copy_impls[0]::{{impl}}[3]), substs=Normalized(['_#1r, _],[]), recursion_depth=1, skol_map={})
rustc::traits::select: impl_or_trait_obligations(def_id=DefId(2/0:862 ~ core[f3a2]::marker[0]::copy_impls[0]::{{impl}}[3]))
rustc::traits::select: vtable_impl: impl_def_id=DefId(2/0:862 ~ core[f3a2]::marker[0]::copy_impls[0]::{{impl}}[3]) impl_obligations=[]
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<&Self as std::marker::Copy>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<&Self as std::marker::Copy>), candidate=EvaluatedToOk)
rustc::traits: type_known_to_meet_ty=&Self bound=std::marker::Copy => true
rustc::traits: type_known_to_meet_bound(ty=<<Self as Geometry>::D as Dimensionality>::Point, bound="std::marker::Copy")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: obligation self ty is <<Self as Geometry>::D as Dimensionality>::Point
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::marker::Copy>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::marker::Copy> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:862 ~ core[f3a2]::marker[0]::copy_impls[0]::{{impl}}[3]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0), impl_trait_ref=<&_ as std::marker::Copy>, skol_obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found reference`
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>), candidate=EvaluatedToOk)
rustc::traits: type_known_to_meet_ty=<<Self as Geometry>::D as Dimensionality>::Point bound=std::marker::Copy => true
rustc::traits: type_known_to_meet_bound(ty=&Self, bound="std::marker::Copy")
rustc::traits: type_known_to_meet_ty=&Self bound=std::marker::Copy => true
rustc::traits: type_known_to_meet_bound(ty=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, bound="std::marker::Copy")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Copy>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Copy>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Copy>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Copy>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: obligation self ty is <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Copy>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::marker::Copy>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::marker::Copy> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:862 ~ core[f3a2]::marker[0]::copy_impls[0]::{{impl}}[3]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Copy>)),depth=0), impl_trait_ref=<&_ as std::marker::Copy>, skol_obligation_trait_ref=<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Copy>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found reference`
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Copy>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Copy>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:12 ~ impl_assoc_working[317d]::EuclideanSpace[0]), substs=[<<Self as Geometry>::D as Dimensionality>::Point]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)), Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=None
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Copy>)),depth=0))
rustc::traits::select: assemble_candidates_from_auto_impls(self_ty=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff)
rustc::traits::select: candidate list size: 0
rustc::traits::select: assembled 0 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Copy>)),depth=0)): []
rustc::traits::select: winnowed to 0 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Copy>)),depth=0)): []
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Copy>)))=Err(Unimplemented)
rustc::traits::select: insert_candidate_cache(trait_ref=<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Copy>, candidate=Err(Unimplemented)) local
rustc::traits::select: CACHE MISS: EVAL(Binder(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Copy>))=EvaluatedToErr
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Copy>), candidate=EvaluatedToErr)
rustc::traits: type_known_to_meet_ty=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff bound=std::marker::Copy => false
rustc::traits: type_known_to_meet_bound(ty=&Self, bound="std::marker::Copy")
rustc::traits: type_known_to_meet_ty=&Self bound=std::marker::Copy => true
rustc::traits: type_known_to_meet_bound(ty=(), bound="std::marker::Copy")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Copy>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Copy>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Copy>)),depth=0)) - in global
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<() as std::marker::Copy>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Copy>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: obligation self ty is ()
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Copy>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::marker::Copy>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::marker::Copy> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:862 ~ core[f3a2]::marker[0]::copy_impls[0]::{{impl}}[3]), obligation=Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Copy>)),depth=0), impl_trait_ref=<&_ as std::marker::Copy>, skol_obligation_trait_ref=<() as std::marker::Copy>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected (), found reference`
rustc::traits::select: builtin_bound: nested=Binder([])
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Copy>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Copy>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Copy>)),depth=0)): [BuiltinCandidate { has_nested: false }]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<() as std::marker::Copy>)))=Ok(Some(BuiltinCandidate { has_nested: false }))
rustc::traits::select: insert_candidate_cache(trait_ref=<() as std::marker::Copy>, candidate=Ok(Some(BuiltinCandidate { has_nested: false }))) global
rustc::traits::select: evaluate_candidate: depth=0 candidate=BuiltinCandidate { has_nested: false }
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Copy>)),depth=0), BuiltinCandidate { has_nested: false })
rustc::traits::select: confirm_builtin_candidate(Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Copy>)),depth=0), false)
rustc::traits::select: confirm_builtin_candidate: obligations=[]
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<() as std::marker::Copy>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<() as std::marker::Copy>), candidate=EvaluatedToOk) global
rustc::traits: type_known_to_meet_ty=() bound=std::marker::Copy => true
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::query::normalize: normalize::<rustc::ty::Predicate>(value=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), param_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))], reveal: UserFacing })
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                Self
            ],
            item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <Self as Geometry>::D
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as std::marker::Sized>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::normalize: normalize::<rustc::ty::Predicate>(value=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), param_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))], reveal: UserFacing })
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                Self
            ],
            item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <Self as Geometry>::D
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Geometry>::D)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))` at depth 0 yielded Ok(Some)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Geometry>))` at depth 0 yielded Ok(Some)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::normalize: normalize::<rustc::ty::Predicate>(value=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)), param_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))], reveal: UserFacing })
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                Self
            ],
            item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <Self as Geometry>::D
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                <Self as Geometry>::D
            ],
            item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <<Self as Geometry>::D as Dimensionality>::Point
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                <<Self as Geometry>::D as Dimensionality>::Point
            ],
            item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:12 ~ impl_assoc_working[317d]::EuclideanSpace[0]), substs=[<<Self as Geometry>::D as Dimensionality>::Point]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)), Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:12 ~ impl_assoc_working[317d]::EuclideanSpace[0]), substs=[<<Self as Geometry>::D as Dimensionality>::Point]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)), Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::normalize: normalize::<rustc::ty::Predicate>(value=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>::Output as std::marker::Sized>)), param_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))], reveal: UserFacing })
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                Self
            ],
            item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <Self as Geometry>::D
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                <Self as Geometry>::D
            ],
            item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <<Self as Geometry>::D as Dimensionality>::Point
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                Self
            ],
            item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <Self as Geometry>::D
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                <Self as Geometry>::D
            ],
            item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <<Self as Geometry>::D as Dimensionality>::Point
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                <<Self as Geometry>::D as Dimensionality>::Point
            ],
            item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                <<Self as Geometry>::D as Dimensionality>::Point,
                <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff
            ],
            item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)) is_match=true same_def_id=true
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: confirm_candidate(candidate=TraitDef(Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))), obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Point depth=0 projected_obligations=[]
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=1)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=1))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=1))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=1)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=1))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=1))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=1))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Geometry>::D)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))]
rustc::traits::select: evaluate_candidate: depth=1 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: evaluate_candidate: depth=1 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=1 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: evaluate_candidate: depth=1 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Point no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type: normalized_ty=<<Self as Geometry>::D as Dimensionality>::Point depth=0
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <<Self as Geometry>::D as Dimensionality>::Point
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::normalize: normalize::<rustc::ty::Predicate>(value=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), param_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))], reveal: UserFacing })
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                Self
            ],
            item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <Self as Geometry>::D
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                <Self as Geometry>::D
            ],
            item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <<Self as Geometry>::D as Dimensionality>::Point
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                Self
            ],
            item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <Self as Geometry>::D
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                <Self as Geometry>::D
            ],
            item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <<Self as Geometry>::D as Dimensionality>::Point
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                <<Self as Geometry>::D as Dimensionality>::Point
            ],
            item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))` at depth 0 yielded Ok(Some)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: type_known_to_meet_bound(ty=<<Self as Geometry>::D as Dimensionality>::Point, bound="std::marker::Sized")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>), candidate=EvaluatedToOk)
rustc::traits: type_known_to_meet_ty=<<Self as Geometry>::D as Dimensionality>::Point bound=std::marker::Sized => true
rustc::traits: type_known_to_meet_bound(ty=&Self, bound="std::marker::Sized")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<&Self as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: builtin_bound: nested=Binder([])
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0)): [BuiltinCandidate { has_nested: false }]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<&Self as std::marker::Sized>)))=Ok(Some(BuiltinCandidate { has_nested: false }))
rustc::traits::select: insert_candidate_cache(trait_ref=<&Self as std::marker::Sized>, candidate=Ok(Some(BuiltinCandidate { has_nested: false }))) local
rustc::traits::select: evaluate_candidate: depth=0 candidate=BuiltinCandidate { has_nested: false }
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0), BuiltinCandidate { has_nested: false })
rustc::traits::select: confirm_builtin_candidate(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0), false)
rustc::traits::select: confirm_builtin_candidate: obligations=[]
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<&Self as std::marker::Sized>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<&Self as std::marker::Sized>), candidate=EvaluatedToOk)
rustc::traits: type_known_to_meet_ty=&Self bound=std::marker::Sized => true
rustc::traits: type_known_to_meet_bound(ty=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, bound="std::marker::Sized")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:12 ~ impl_assoc_working[317d]::EuclideanSpace[0]), substs=[<<Self as Geometry>::D as Dimensionality>::Point]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)), Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:12 ~ impl_assoc_working[317d]::EuclideanSpace[0]), substs=[<<Self as Geometry>::D as Dimensionality>::Point]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)), Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>), candidate=EvaluatedToOk)
rustc::traits: type_known_to_meet_ty=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff bound=std::marker::Sized => true
rustc::traits::query::normalize: normalize::<rustc::ty::FnSig>(value=([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point, param_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))], reveal: UserFacing })
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                Self
            ],
            item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <Self as Geometry>::D
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                <Self as Geometry>::D
            ],
            item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <<Self as Geometry>::D as Dimensionality>::Point
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=&Self,depth=0))
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(OutlivesPredicate(Self, '_#0r)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(OutlivesPredicate(Self, '_#0r)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(OutlivesPredicate(Self, '_#0r)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=&Self,depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::normalize: normalize::<rustc::ty::FnSig>(value=([&Self]; variadic: false)-><<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, param_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))], reveal: UserFacing })
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                Self
            ],
            item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <Self as Geometry>::D
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                <Self as Geometry>::D
            ],
            item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <<Self as Geometry>::D as Dimensionality>::Point
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                <<Self as Geometry>::D as Dimensionality>::Point
            ],
            item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::normalize: normalize::<rustc::ty::FnSig>(value=([<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff]; variadic: false)-><<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>::Output, param_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))], reveal: UserFacing })
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                Self
            ],
            item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <Self as Geometry>::D
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                <Self as Geometry>::D
            ],
            item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <<Self as Geometry>::D as Dimensionality>::Point
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                Self
            ],
            item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <Self as Geometry>::D
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                <Self as Geometry>::D
            ],
            item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <<Self as Geometry>::D as Dimensionality>::Point
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                <<Self as Geometry>::D as Dimensionality>::Point
            ],
            item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                Self
            ],
            item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <Self as Geometry>::D
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                <Self as Geometry>::D
            ],
            item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <<Self as Geometry>::D as Dimensionality>::Point
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                Self
            ],
            item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <Self as Geometry>::D
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                <Self as Geometry>::D
            ],
            item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <<Self as Geometry>::D as Dimensionality>::Point
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                <<Self as Geometry>::D as Dimensionality>::Point
            ],
            item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [
                Binder(TraitPredicate(<Self as Geometry>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
            ],
            reveal: UserFacing
        },
        value: ProjectionTy {
            substs: [
                <<Self as Geometry>::D as Dimensionality>::Point,
                <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff
            ],
            item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: <<Self as Geometry>::D as Dimensionality>::Point
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0))
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Geometry>::D)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Point no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Vector no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Geometry>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as std::marker::Sized>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Self,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=<Self as Geometry>::D,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,depth=0))
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Geometry>::D)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Point no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0) with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) } }, value=Normalized(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 6 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0) with 6 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 9 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)),depth=0) with 9 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc_working[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: obligation self ty is <<Self as Geometry>::D as Dimensionality>::Point
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::marker::Copy>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::marker::Copy> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:862 ~ core[f3a2]::marker[0]::copy_impls[0]::{{impl}}[3]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0), impl_trait_ref=<&_ as std::marker::Copy>, skol_obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found reference`
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Geometry>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::clone::Clone>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::clone::Clone> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1279 ~ core[f3a2]::clone[0]::impls[0]::{{impl}}[3]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0), impl_trait_ref=<&_ as std::clone::Clone>, skol_obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found reference`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))` at depth 0 yielded Ok(Some)
rustc::traits::project: poly_project_and_unify_type(obligation=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)),depth=0))
rustc::traits::project: project_and_unify_type(obligation=Obligation(predicate=ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)) is_match=true same_def_id=true
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: confirm_candidate(candidate=TraitDef(Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))), obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Point depth=0 projected_obligations=[]
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=1)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=1)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type: normalized_ty=<<Self as Geometry>::D as Dimensionality>::Point depth=0
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])
rustc::traits::project: project_and_unify_type: normalized_ty=<<Self as Geometry>::D as Dimensionality>::Point obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1)]
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:12 ~ impl_assoc_working[317d]::EuclideanSpace[0]), substs=[<<Self as Geometry>::D as Dimensionality>::Point]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)), Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:12 ~ impl_assoc_working[317d]::EuclideanSpace[0]), substs=[<<Self as Geometry>::D as Dimensionality>::Point]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)), Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc_working[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Vector no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc_working[317d]::Dimensionality[0]::Vector[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc_working[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc_working[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as std::marker::Sized>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Self,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=<Self as Geometry>::D,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff,depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: type_known_to_meet_bound(ty=&Self, bound="std::marker::Freeze")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Freeze>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Freeze>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<&Self as std::marker::Freeze>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Freeze>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Freeze>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::marker::Freeze>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::marker::Freeze> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:851 ~ core[f3a2]::marker[0]::{{impl}}[9]), obligation=Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Freeze>)),depth=0), impl_trait_ref=<&mut _ as std::marker::Freeze>, skol_obligation_trait_ref=<&Self as std::marker::Freeze>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `types differ in mutability`
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::marker::Freeze>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::marker::Freeze> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:850 ~ core[f3a2]::marker[0]::{{impl}}[8]), obligation=Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Freeze>)),depth=0), impl_trait_ref=<&_ as std::marker::Freeze>, skol_obligation_trait_ref=<&Self as std::marker::Freeze>)
rustc::traits::select: match_impl: success impl_substs=['_#1r, _]
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=&Self)
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Freeze>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0])) = []
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Freeze>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Freeze>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Freeze>)),depth=0)): [ImplCandidate(DefId(2/0:850 ~ core[f3a2]::marker[0]::{{impl}}[8]))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<&Self as std::marker::Freeze>)))=Ok(Some(ImplCandidate(DefId(2/0:850 ~ core[f3a2]::marker[0]::{{impl}}[8]))))
rustc::traits::select: insert_candidate_cache(trait_ref=<&Self as std::marker::Freeze>, candidate=Ok(Some(ImplCandidate(DefId(2/0:850 ~ core[f3a2]::marker[0]::{{impl}}[8]))))) local
rustc::traits::select: evaluate_candidate: depth=0 candidate=ImplCandidate(DefId(2/0:850 ~ core[f3a2]::marker[0]::{{impl}}[8]))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Freeze>)),depth=0), ImplCandidate(DefId(2/0:850 ~ core[f3a2]::marker[0]::{{impl}}[8])))
rustc::traits::select: confirm_impl_candidate(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Freeze>)),depth=0),DefId(2/0:850 ~ core[f3a2]::marker[0]::{{impl}}[8]))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::marker::Freeze>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::marker::Freeze> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:850 ~ core[f3a2]::marker[0]::{{impl}}[8]), obligation=Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Freeze>)),depth=0), impl_trait_ref=<&_ as std::marker::Freeze>, skol_obligation_trait_ref=<&Self as std::marker::Freeze>)
rustc::traits::select: match_impl: success impl_substs=['_#1r, _]
rustc::traits::select: confirm_impl_candidate substs=Normalized(['_#1r, _],[])
rustc::traits::select: vtable_impl(impl_def_id=DefId(2/0:850 ~ core[f3a2]::marker[0]::{{impl}}[8]), substs=Normalized(['_#1r, _],[]), recursion_depth=1, skol_map={})
rustc::traits::select: impl_or_trait_obligations(def_id=DefId(2/0:850 ~ core[f3a2]::marker[0]::{{impl}}[8]))
rustc::traits::select: vtable_impl: impl_def_id=DefId(2/0:850 ~ core[f3a2]::marker[0]::{{impl}}[8]) impl_obligations=[]
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<&Self as std::marker::Freeze>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<&Self as std::marker::Freeze>), candidate=EvaluatedToOk)
rustc::traits: type_known_to_meet_ty=&Self bound=std::marker::Freeze => true
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [], reveal: UserFacing })
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[]
rustc::traits: fully_normalize_with_fulfillcx(value=[])
rustc::traits::project: normalize_with_depth(depth=0, value=[])
rustc::traits::project: normalize_with_depth: depth=0 result=[] with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits: fully_normalize: normalized_value=[] obligations=[]
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[]
rustc::traits: normalize_param_env_or_error: normalized predicates=[]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[]
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [], reveal: UserFacing })
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[]
rustc::traits: fully_normalize_with_fulfillcx(value=[])
rustc::traits::project: normalize_with_depth(depth=0, value=[])
rustc::traits::project: normalize_with_depth: depth=0 result=[] with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits: fully_normalize: normalized_value=[] obligations=[]
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[]
rustc::traits: normalize_param_env_or_error: normalized predicates=[]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[]
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [], reveal: UserFacing })
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[]
rustc::traits: fully_normalize_with_fulfillcx(value=[])
rustc::traits::project: normalize_with_depth(depth=0, value=[])
rustc::traits::project: normalize_with_depth: depth=0 result=[] with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits: fully_normalize: normalized_value=[] obligations=[]
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[]
rustc::traits: normalize_param_env_or_error: normalized predicates=[]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[]
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc_working[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=fn(fn() -> T, isize, *const *const u8) -> isize {std::rt::lang_start::<T>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(fn(), isize, *const *const u8) -> isize {std::rt::lang_start::<()>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: substitute_normalize_and_test_predicates(key=(DefId(0/0:14 ~ impl_assoc_working[317d]::main[0]), []))
rustc::traits: normalize_and_test_predicates(predicates=[])
rustc::traits::project: normalize_with_depth(depth=0, value=[])
rustc::traits::project: normalize_with_depth: depth=0 result=[] with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: normalize_and_test_predicates(predicates=[]) = true
rustc::traits: substitute_normalize_and_test_predicates(key=(DefId(0/0:14 ~ impl_assoc_working[317d]::main[0]), [])) = true
rustc::traits: substitute_normalize_and_test_predicates(key=(DefId(1/0:4462 ~ std[b095]::rt[0]::lang_start[0]), [()]))
rustc::traits: normalize_and_test_predicates(predicates=[Binder(TraitPredicate(<() as std::marker::Sized>)), Binder(OutlivesPredicate((), ReStatic)), Binder(TraitPredicate(<() as std::process::Termination>))])
rustc::traits::project: normalize_with_depth(depth=0, value=[Binder(TraitPredicate(<() as std::marker::Sized>)), Binder(OutlivesPredicate((), ReStatic)), Binder(TraitPredicate(<() as std::process::Termination>))])
rustc::traits::project: normalize_with_depth: depth=0 result=[Binder(TraitPredicate(<() as std::marker::Sized>)), Binder(OutlivesPredicate((), ReStatic)), Binder(TraitPredicate(<() as std::process::Termination>))] with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(OutlivesPredicate((), ReStatic)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<() as std::process::Termination>)),depth=0))
rustc::traits::fulfill: select(obligation-forest-size=3)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Sized>)),depth=0)) - in global
rustc::traits::select: CACHE HIT: EVAL(Binder(<() as std::marker::Sized>))=EvaluatedToOk
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<() as std::marker::Sized>))` at depth 0 evaluated to holds
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<() as std::process::Termination>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<() as std::process::Termination>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<() as std::process::Termination>)),depth=0)) - in global
rustc::traits::select: CACHE HIT: EVAL(Binder(<() as std::process::Termination>))=EvaluatedToOk
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<() as std::process::Termination>))` at depth 0 evaluated to holds
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<() as std::process::Termination>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(OutlivesPredicate((), ReStatic)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<() as std::marker::Sized>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: normalize_and_test_predicates(predicates=[Binder(TraitPredicate(<() as std::marker::Sized>)), Binder(OutlivesPredicate((), ReStatic)), Binder(TraitPredicate(<() as std::process::Termination>))]) = true
rustc::traits: substitute_normalize_and_test_predicates(key=(DefId(1/0:4462 ~ std[b095]::rt[0]::lang_start[0]), [()])) = true
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=bool, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn() -> T], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: type_known_to_meet_bound(ty=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], bound="std::marker::Sized")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: builtin_bound: nested=Binder([])
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Sized>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Sized>)),depth=0)): [BuiltinCandidate { has_nested: false }]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Sized>)))=Ok(Some(BuiltinCandidate { has_nested: false }))
rustc::traits::select: insert_candidate_cache(trait_ref=<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Sized>, candidate=Ok(Some(BuiltinCandidate { has_nested: false }))) global
rustc::traits::select: evaluate_candidate: depth=0 candidate=BuiltinCandidate { has_nested: false }
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Sized>)),depth=0), BuiltinCandidate { has_nested: false })
rustc::traits::select: confirm_builtin_candidate(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Sized>)),depth=0), false)
rustc::traits::select: confirm_builtin_candidate: obligations=[]
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Sized>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Sized>), candidate=EvaluatedToOk) global
rustc::traits: type_known_to_meet_ty=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] bound=std::marker::Sized => true
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Sized>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Sized>)))=Ok(Some(BuiltinCandidate { has_nested: false }))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Sized>)),depth=0), BuiltinCandidate { has_nested: false })
rustc::traits::select: confirm_builtin_candidate(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Sized>)),depth=0), false)
rustc::traits::select: confirm_builtin_candidate: obligations=[]
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Sized>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: type_known_to_meet_bound: ty=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] bound=std::marker::Sized success
rustc::traits: vtable_methods(Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::Fn<()>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::Fn<()>>)) predicates=[Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>))]
rustc::traits: vtable_methods: trait_method=AssociatedItem { def_id: DefId(2/0:971 ~ core[f3a2]::ops[0]::function[0]::Fn[0]::call[0]), ident: call#0, kind: Method, vis: Public, defaultness: Default { has_value: false }, container: TraitContainer(DefId(2/0:970 ~ core[f3a2]::ops[0]::function[0]::Fn[0])), method_has_self_argument: true }
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Fn<Args>>)) predicates=[Binder(TraitPredicate(<Self as std::ops::FnMut<Args>>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Args as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnMut<Args>>)) predicates=[Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Fn<Args>>)) predicates=[Binder(TraitPredicate(<Self as std::ops::FnMut<Args>>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnMut<Args>>)) predicates=[Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)) predicates=[]
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::List<ty::subst::Kind>>(value=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: normalize_and_test_predicates(predicates=[])
rustc::traits::project: normalize_with_depth(depth=0, value=[])
rustc::traits::project: normalize_with_depth: depth=0 result=[] with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: normalize_and_test_predicates(predicates=[]) = true
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>)) predicates=[Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>))]
rustc::traits: vtable_methods: trait_method=AssociatedItem { def_id: DefId(2/0:973 ~ core[f3a2]::ops[0]::function[0]::FnMut[0]::call_mut[0]), ident: call_mut#0, kind: Method, vis: Public, defaultness: Default { has_value: false }, container: TraitContainer(DefId(2/0:972 ~ core[f3a2]::ops[0]::function[0]::FnMut[0])), method_has_self_argument: true }
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnMut<Args>>)) predicates=[Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Args as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnMut<Args>>)) predicates=[Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)) predicates=[]
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::List<ty::subst::Kind>>(value=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: normalize_and_test_predicates(predicates=[])
rustc::traits::project: normalize_with_depth(depth=0, value=[])
rustc::traits::project: normalize_with_depth: depth=0 result=[] with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: normalize_and_test_predicates(predicates=[]) = true
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>)) predicates=[]
rustc::traits: vtable_methods: trait_method=AssociatedItem { def_id: DefId(2/0:976 ~ core[f3a2]::ops[0]::function[0]::FnOnce[0]::call_once[0]), ident: call_once#0, kind: Method, vis: Public, defaultness: Default { has_value: false }, container: TraitContainer(DefId(2/0:974 ~ core[f3a2]::ops[0]::function[0]::FnOnce[0])), method_has_self_argument: true }
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as std::ops::FnOnce<Args>>::Output as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Args as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)) predicates=[]
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::List<ty::subst::Kind>>(value=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: normalize_and_test_predicates(predicates=[])
rustc::traits::project: normalize_with_depth(depth=0, value=[])
rustc::traits::project: normalize_with_depth: depth=0 result=[] with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: normalize_and_test_predicates(predicates=[]) = true
rustc::traits::codegen: codegen_fulfill_obligation(trait_ref=(ParamEnv { caller_bounds: [], reveal: All }, Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::Fn<()>>)), def_id=DefId(2/0:970 ~ core[f3a2]::ops[0]::function[0]::Fn[0]))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::Fn<()>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::Fn<()>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::Fn<()>>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_unboxed_candidates: kind=Fn obligation=Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::Fn<()>>)),depth=0)
rustc::traits::select: assemble_unboxed_candidates: closure_kind = Fn
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::Fn<()>>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::ops::Fn<_>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::ops::Fn<_>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:978 ~ core[f3a2]::ops[0]::function[0]::impls[0]::{{impl}}[0]), obligation=Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::Fn<()>>)),depth=0), impl_trait_ref=<&_ as std::ops::Fn<_>>, skol_obligation_trait_ref=<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::Fn<()>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected closure, found reference`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Fn<Args>>)) predicates=[Binder(TraitPredicate(<Self as std::ops::FnMut<Args>>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Args as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnMut<Args>>)) predicates=[Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Fn<Args>>)) predicates=[Binder(TraitPredicate(<Self as std::ops::FnMut<Args>>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnMut<Args>>)) predicates=[Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Fn<Args>>)) predicates=[Binder(TraitPredicate(<Self as std::ops::FnMut<Args>>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Args as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnMut<Args>>)) predicates=[Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(2/0:970 ~ core[f3a2]::ops[0]::function[0]::Fn[0])) = []
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnMut<Args>>)) predicates=[Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Args as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnMut<Args>>)) predicates=[Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnMut<Args>>)) predicates=[Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Args as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(2/0:972 ~ core[f3a2]::ops[0]::function[0]::FnMut[0])) = []
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as std::ops::FnOnce<Args>>::Output as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Args as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as std::ops::FnOnce<Args>>::Output as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Args as std::marker::Sized>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(2/0:974 ~ core[f3a2]::ops[0]::function[0]::FnOnce[0])) = []
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::Fn<()>>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::Fn<()>>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::Fn<()>>)),depth=0)): [ClosureCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::Fn<()>>)))=Ok(Some(ClosureCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::Fn<()>>, candidate=Ok(Some(ClosureCandidate))) global
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::Fn<()>>)),depth=0), ClosureCandidate)
rustc::traits::select: confirm_closure_candidate(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::Fn<()>>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::Fn<()>>))
rustc::traits::project: normalize_with_depth: depth=1 result=Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::Fn<()>>) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: confirm_closure_candidate(closure_def_id=DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), trait_ref=Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::Fn<()>>), obligations=[])
rustc::traits::codegen: fulfill_obligation: selection=VtableClosure(closure_def_id=DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), substs=ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, nested=[Obligation(predicate=ClosureKind(DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, Fn),depth=0)])
rustc::traits::codegen: fulfill_obligation: register_predicate_obligation Obligation(predicate=ClosureKind(DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, Fn),depth=0)
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=ClosureKind(DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, Fn),depth=0))
rustc::traits::codegen: drain_fulfillment_cx_or_panic()
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=ClosureKind(DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, Fn),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::codegen: Cache miss: Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::Fn<()>>) => VtableClosure(closure_def_id=DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), substs=ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, nested=[()])
rustc::traits::codegen: codegen_fulfill_obligation(trait_ref=(ParamEnv { caller_bounds: [], reveal: All }, Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>)), def_id=DefId(2/0:972 ~ core[f3a2]::ops[0]::function[0]::FnMut[0]))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_unboxed_candidates: kind=FnMut obligation=Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>)),depth=0)
rustc::traits::select: assemble_unboxed_candidates: closure_kind = Fn
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::ops::FnMut<_>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::ops::FnMut<_>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:980 ~ core[f3a2]::ops[0]::function[0]::impls[0]::{{impl}}[1]), obligation=Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>)),depth=0), impl_trait_ref=<&_ as std::ops::FnMut<_>>, skol_obligation_trait_ref=<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected closure, found reference`
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::ops::FnMut<_>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::ops::FnMut<_>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:985 ~ core[f3a2]::ops[0]::function[0]::impls[0]::{{impl}}[3]), obligation=Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>)),depth=0), impl_trait_ref=<&mut _ as std::ops::FnMut<_>>, skol_obligation_trait_ref=<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected closure, found &mut _`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnMut<Args>>)) predicates=[Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Args as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnMut<Args>>)) predicates=[Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnMut<Args>>)) predicates=[Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Args as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(2/0:972 ~ core[f3a2]::ops[0]::function[0]::FnMut[0])) = []
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as std::ops::FnOnce<Args>>::Output as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Args as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as std::ops::FnOnce<Args>>::Output as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Args as std::marker::Sized>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(2/0:974 ~ core[f3a2]::ops[0]::function[0]::FnOnce[0])) = []
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>)),depth=0)): [ClosureCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>)))=Ok(Some(ClosureCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>, candidate=Ok(Some(ClosureCandidate))) global
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>)),depth=0), ClosureCandidate)
rustc::traits::select: confirm_closure_candidate(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>))
rustc::traits::project: normalize_with_depth: depth=1 result=Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: confirm_closure_candidate(closure_def_id=DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), trait_ref=Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>), obligations=[])
rustc::traits::codegen: fulfill_obligation: selection=VtableClosure(closure_def_id=DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), substs=ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, nested=[Obligation(predicate=ClosureKind(DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, FnMut),depth=0)])
rustc::traits::codegen: fulfill_obligation: register_predicate_obligation Obligation(predicate=ClosureKind(DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, FnMut),depth=0)
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=ClosureKind(DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, FnMut),depth=0))
rustc::traits::codegen: drain_fulfillment_cx_or_panic()
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=ClosureKind(DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, FnMut),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::codegen: Cache miss: Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>) => VtableClosure(closure_def_id=DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), substs=ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, nested=[()])
rustc::traits::codegen: codegen_fulfill_obligation(trait_ref=(ParamEnv { caller_bounds: [], reveal: All }, Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>)), def_id=DefId(2/0:974 ~ core[f3a2]::ops[0]::function[0]::FnOnce[0]))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_unboxed_candidates: kind=FnOnce obligation=Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>)),depth=0)
rustc::traits::select: assemble_unboxed_candidates: closure_kind = Fn
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::ops::FnOnce<_>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::ops::FnOnce<_>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:982 ~ core[f3a2]::ops[0]::function[0]::impls[0]::{{impl}}[2]), obligation=Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>)),depth=0), impl_trait_ref=<&_ as std::ops::FnOnce<_>>, skol_obligation_trait_ref=<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected closure, found reference`
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::ops::FnOnce<_>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::ops::FnOnce<_>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:987 ~ core[f3a2]::ops[0]::function[0]::impls[0]::{{impl}}[4]), obligation=Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>)),depth=0), impl_trait_ref=<&mut _ as std::ops::FnOnce<_>>, skol_obligation_trait_ref=<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected closure, found &mut _`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as std::ops::FnOnce<Args>>::Output as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Args as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as std::ops::FnOnce<Args>>::Output as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Args as std::marker::Sized>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(2/0:974 ~ core[f3a2]::ops[0]::function[0]::FnOnce[0])) = []
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>)),depth=0)): [ClosureCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>)))=Ok(Some(ClosureCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>, candidate=Ok(Some(ClosureCandidate))) global
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>)),depth=0), ClosureCandidate)
rustc::traits::select: confirm_closure_candidate(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>))
rustc::traits::project: normalize_with_depth: depth=1 result=Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: confirm_closure_candidate(closure_def_id=DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), trait_ref=Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>), obligations=[])
rustc::traits::codegen: fulfill_obligation: selection=VtableClosure(closure_def_id=DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), substs=ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, nested=[Obligation(predicate=ClosureKind(DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, FnOnce),depth=0)])
rustc::traits::codegen: fulfill_obligation: register_predicate_obligation Obligation(predicate=ClosureKind(DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, FnOnce),depth=0)
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=ClosureKind(DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, FnOnce),depth=0))
rustc::traits::codegen: drain_fulfillment_cx_or_panic()
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=ClosureKind(DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, FnOnce),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::codegen: Cache miss: Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>) => VtableClosure(closure_def_id=DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), substs=ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, nested=[()])
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([()]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]], value=unsafe fn(*mut T) {std::ptr::drop_in_place::<T>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=unsafe fn(*mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]) {std::ptr::drop_in_place::<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: type_known_to_meet_bound(ty=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], bound="std::marker::Copy")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Copy>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Copy>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Copy>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Copy>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: obligation self ty is [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Copy>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::marker::Copy>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::marker::Copy> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:862 ~ core[f3a2]::marker[0]::copy_impls[0]::{{impl}}[3]), obligation=Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Copy>)),depth=0), impl_trait_ref=<&_ as std::marker::Copy>, skol_obligation_trait_ref=<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Copy>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected closure, found reference`
rustc::traits::select: builtin_bound: nested=Binder([fn()])
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Copy>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Copy>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Copy>)),depth=0)): [BuiltinCandidate { has_nested: true }]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Copy>)))=Ok(Some(BuiltinCandidate { has_nested: true }))
rustc::traits::select: insert_candidate_cache(trait_ref=<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Copy>, candidate=Ok(Some(BuiltinCandidate { has_nested: true }))) global
rustc::traits::select: evaluate_candidate: depth=0 candidate=BuiltinCandidate { has_nested: true }
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Copy>)),depth=0), BuiltinCandidate { has_nested: true })
rustc::traits::select: confirm_builtin_candidate(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Copy>)),depth=0), true)
rustc::traits::project: normalize_with_depth(depth=1, value=fn())
rustc::traits::project: normalize_with_depth: depth=1 result=fn() with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: confirm_builtin_candidate: obligations=[Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Copy>)),depth=1)]
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Copy>)),depth=1))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Copy>)),depth=1))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Copy>)),depth=1)) - in global
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<fn() as std::marker::Copy>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Copy>)),depth=1)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: obligation self ty is fn()
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Copy>)),depth=1))
rustc::traits::project: normalize_with_depth(depth=2, value=<&_ as std::marker::Copy>)
rustc::traits::project: normalize_with_depth: depth=2 result=<&_ as std::marker::Copy> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=2 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:862 ~ core[f3a2]::marker[0]::copy_impls[0]::{{impl}}[3]), obligation=Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Copy>)),depth=1), impl_trait_ref=<&_ as std::marker::Copy>, skol_obligation_trait_ref=<fn() as std::marker::Copy>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected fn pointer, found reference`
rustc::traits::select: builtin_bound: nested=Binder([])
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Copy>)),depth=1))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Copy>)),depth=1))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Copy>)),depth=1)): [BuiltinCandidate { has_nested: false }]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<fn() as std::marker::Copy>)))=Ok(Some(BuiltinCandidate { has_nested: false }))
rustc::traits::select: insert_candidate_cache(trait_ref=<fn() as std::marker::Copy>, candidate=Ok(Some(BuiltinCandidate { has_nested: false }))) global
rustc::traits::select: evaluate_candidate: depth=1 candidate=BuiltinCandidate { has_nested: false }
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Copy>)),depth=1), BuiltinCandidate { has_nested: false })
rustc::traits::select: confirm_builtin_candidate(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Copy>)),depth=1), false)
rustc::traits::select: confirm_builtin_candidate: obligations=[]
rustc::traits::select: evaluate_candidate: depth=1 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<fn() as std::marker::Copy>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<fn() as std::marker::Copy>), candidate=EvaluatedToOk) global
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Copy>)),depth=1)) = EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Copy>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Copy>), candidate=EvaluatedToOk) global
rustc::traits: type_known_to_meet_ty=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] bound=std::marker::Copy => true
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Copy>)),depth=0))
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Copy>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Copy>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Copy>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Copy>)))=Ok(Some(BuiltinCandidate { has_nested: true }))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Copy>)),depth=0), BuiltinCandidate { has_nested: true })
rustc::traits::select: confirm_builtin_candidate(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Copy>)),depth=0), true)
rustc::traits::project: normalize_with_depth(depth=1, value=fn())
rustc::traits::project: normalize_with_depth: depth=1 result=fn() with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: confirm_builtin_candidate: obligations=[Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Copy>)),depth=1)]
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Copy>))` at depth 0 yielded Ok(Some)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Copy>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Copy>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Copy>)),depth=0)) - in global
rustc::traits::select: CACHE HIT: EVAL(Binder(<fn() as std::marker::Copy>))=EvaluatedToOk
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<fn() as std::marker::Copy>))` at depth 1 evaluated to holds
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Copy>)),depth=1),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Copy>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: type_known_to_meet_bound: ty=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] bound=std::marker::Copy success
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=for<'r> fn(&'r (dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe + 'r), isize, *const *const u8) -> isize {std::rt::lang_start_internal}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=for<'r> fn(&'r (dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe + 'r), isize, *const *const u8) -> isize {std::rt::lang_start_internal}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=for<'r> fn(&'r (dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe + 'r), isize, *const *const u8) -> isize {std::rt::lang_start_internal}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=for<'r> fn(&'r (dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe + 'r), isize, *const *const u8) -> isize {std::rt::lang_start_internal}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([()]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([]; variadic: false)->(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[(), i8, extern "rust-call" fn(()) -> i32, fn()], value=fn() -> T, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[(), i8, extern "rust-call" fn(()) -> i32, fn()], value=fn(T) -> i32 {<T as std::process::Termination>::report}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(()) -> i32 {<() as std::process::Termination>::report}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: codegen_fulfill_obligation(trait_ref=(ParamEnv { caller_bounds: [], reveal: All }, Binder(<() as std::process::Termination>)), def_id=DefId(1/0:3161 ~ std[b095]::process[0]::Termination[0]))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<() as std::process::Termination>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<() as std::process::Termination>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<() as std::process::Termination>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<() as std::process::Termination>)))=Ok(Some(ImplCandidate(DefId(1/0:3163 ~ std[b095]::process[0]::{{impl}}[37]))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<() as std::process::Termination>)),depth=0), ImplCandidate(DefId(1/0:3163 ~ std[b095]::process[0]::{{impl}}[37])))
rustc::traits::select: confirm_impl_candidate(Obligation(predicate=Binder(TraitPredicate(<() as std::process::Termination>)),depth=0),DefId(1/0:3163 ~ std[b095]::process[0]::{{impl}}[37]))
rustc::traits::project: normalize_with_depth(depth=1, value=<() as std::process::Termination>)
rustc::traits::project: normalize_with_depth: depth=1 result=<() as std::process::Termination> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(1/0:3163 ~ std[b095]::process[0]::{{impl}}[37]), obligation=Obligation(predicate=Binder(TraitPredicate(<() as std::process::Termination>)),depth=0), impl_trait_ref=<() as std::process::Termination>, skol_obligation_trait_ref=<() as std::process::Termination>)
rustc::traits::select: match_impl: success impl_substs=[]
rustc::traits::select: confirm_impl_candidate substs=Normalized([],[])
rustc::traits::select: vtable_impl(impl_def_id=DefId(1/0:3163 ~ std[b095]::process[0]::{{impl}}[37]), substs=Normalized([],[]), recursion_depth=1, skol_map={})
rustc::traits::select: impl_or_trait_obligations(def_id=DefId(1/0:3163 ~ std[b095]::process[0]::{{impl}}[37]))
rustc::traits::select: vtable_impl: impl_def_id=DefId(1/0:3163 ~ std[b095]::process[0]::{{impl}}[37]) impl_obligations=[]
rustc::traits::codegen: fulfill_obligation: selection=VtableImpl(impl_def_id=DefId(1/0:3163 ~ std[b095]::process[0]::{{impl}}[37]), substs=[], nested=[])
rustc::traits::codegen: drain_fulfillment_cx_or_panic()
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::codegen: Cache miss: Binder(<() as std::process::Termination>) => VtableImpl(impl_def_id=DefId(1/0:3163 ~ std[b095]::process[0]::{{impl}}[37]), substs=[], nested=[])
rustc::traits::specialize::specialization_graph: insert_blindly: impl_def_id=DefId(1/0:3163 ~ std[b095]::process[0]::{{impl}}[37]) sty=TupleSimplifiedType(0)
rustc::traits::specialize::specialization_graph: insert_blindly: impl_def_id=DefId(1/0:3165 ~ std[b095]::process[0]::{{impl}}[38]) sty=AdtSimplifiedType(DefId(2/0:20559 ~ core[f3a2]::result[0]::Result[0]))
rustc::traits::specialize::specialization_graph: insert_blindly: impl_def_id=DefId(1/0:3167 ~ std[b095]::process[0]::{{impl}}[39]) sty=NeverSimplifiedType
rustc::traits::specialize::specialization_graph: insert_blindly: impl_def_id=DefId(1/0:3169 ~ std[b095]::process[0]::{{impl}}[40]) sty=AdtSimplifiedType(DefId(2/0:20559 ~ core[f3a2]::result[0]::Result[0]))
rustc::traits::specialize::specialization_graph: insert_blindly: impl_def_id=DefId(1/0:3171 ~ std[b095]::process[0]::{{impl}}[41]) sty=AdtSimplifiedType(DefId(1/0:5219 ~ std[b095]::process[0]::ExitCode[0]))
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=fn(std::process::ExitCode) -> i32 {<std::process::ExitCode as std::process::Termination>::report}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(std::process::ExitCode) -> i32 {<std::process::ExitCode as std::process::Termination>::report}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: codegen_fulfill_obligation(trait_ref=(ParamEnv { caller_bounds: [], reveal: All }, Binder(<std::process::ExitCode as std::process::Termination>)), def_id=DefId(1/0:3161 ~ std[b095]::process[0]::Termination[0]))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::process::Termination>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<std::process::ExitCode as std::process::Termination>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::process::Termination>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::process::Termination>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<std::process::ExitCode as std::process::Termination>)
rustc::traits::project: normalize_with_depth: depth=1 result=<std::process::ExitCode as std::process::Termination> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(1/0:3171 ~ std[b095]::process[0]::{{impl}}[41]), obligation=Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::process::Termination>)),depth=0), impl_trait_ref=<std::process::ExitCode as std::process::Termination>, skol_obligation_trait_ref=<std::process::ExitCode as std::process::Termination>)
rustc::traits::select: match_impl: success impl_substs=[]
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=std::process::ExitCode)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::process::Termination>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::process::Termination>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::process::Termination>)),depth=0)): [ImplCandidate(DefId(1/0:3171 ~ std[b095]::process[0]::{{impl}}[41]))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<std::process::ExitCode as std::process::Termination>)))=Ok(Some(ImplCandidate(DefId(1/0:3171 ~ std[b095]::process[0]::{{impl}}[41]))))
rustc::traits::select: insert_candidate_cache(trait_ref=<std::process::ExitCode as std::process::Termination>, candidate=Ok(Some(ImplCandidate(DefId(1/0:3171 ~ std[b095]::process[0]::{{impl}}[41]))))) global
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::process::Termination>)),depth=0), ImplCandidate(DefId(1/0:3171 ~ std[b095]::process[0]::{{impl}}[41])))
rustc::traits::select: confirm_impl_candidate(Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::process::Termination>)),depth=0),DefId(1/0:3171 ~ std[b095]::process[0]::{{impl}}[41]))
rustc::traits::project: normalize_with_depth(depth=1, value=<std::process::ExitCode as std::process::Termination>)
rustc::traits::project: normalize_with_depth: depth=1 result=<std::process::ExitCode as std::process::Termination> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(1/0:3171 ~ std[b095]::process[0]::{{impl}}[41]), obligation=Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::process::Termination>)),depth=0), impl_trait_ref=<std::process::ExitCode as std::process::Termination>, skol_obligation_trait_ref=<std::process::ExitCode as std::process::Termination>)
rustc::traits::select: match_impl: success impl_substs=[]
rustc::traits::select: confirm_impl_candidate substs=Normalized([],[])
rustc::traits::select: vtable_impl(impl_def_id=DefId(1/0:3171 ~ std[b095]::process[0]::{{impl}}[41]), substs=Normalized([],[]), recursion_depth=1, skol_map={})
rustc::traits::select: impl_or_trait_obligations(def_id=DefId(1/0:3171 ~ std[b095]::process[0]::{{impl}}[41]))
rustc::traits::select: vtable_impl: impl_def_id=DefId(1/0:3171 ~ std[b095]::process[0]::{{impl}}[41]) impl_obligations=[]
rustc::traits::codegen: fulfill_obligation: selection=VtableImpl(impl_def_id=DefId(1/0:3171 ~ std[b095]::process[0]::{{impl}}[41]), substs=[], nested=[])
rustc::traits::codegen: drain_fulfillment_cx_or_panic()
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::codegen: Cache miss: Binder(<std::process::ExitCode as std::process::Termination>) => VtableImpl(impl_def_id=DefId(1/0:3171 ~ std[b095]::process[0]::{{impl}}[41]), substs=[], nested=[])
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=[], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::List<ty::subst::Kind>>(value=[], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=std::process::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::process::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::process::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [], reveal: UserFacing })
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[]
rustc::traits: fully_normalize_with_fulfillcx(value=[])
rustc::traits::project: normalize_with_depth(depth=0, value=[])
rustc::traits::project: normalize_with_depth: depth=0 result=[] with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits: fully_normalize: normalized_value=[] obligations=[]
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[]
rustc::traits: normalize_param_env_or_error: normalized predicates=[]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[]
rustc::traits: type_known_to_meet_bound(ty=u8, bound="std::marker::Sized")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Sized>)),depth=0)) - in global
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<u8 as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: builtin_bound: nested=Binder([])
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Sized>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Sized>)),depth=0)): [BuiltinCandidate { has_nested: false }]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<u8 as std::marker::Sized>)))=Ok(Some(BuiltinCandidate { has_nested: false }))
rustc::traits::select: insert_candidate_cache(trait_ref=<u8 as std::marker::Sized>, candidate=Ok(Some(BuiltinCandidate { has_nested: false }))) global
rustc::traits::select: evaluate_candidate: depth=0 candidate=BuiltinCandidate { has_nested: false }
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Sized>)),depth=0), BuiltinCandidate { has_nested: false })
rustc::traits::select: confirm_builtin_candidate(Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Sized>)),depth=0), false)
rustc::traits::select: confirm_builtin_candidate: obligations=[]
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<u8 as std::marker::Sized>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<u8 as std::marker::Sized>), candidate=EvaluatedToOk) global
rustc::traits: type_known_to_meet_ty=u8 bound=std::marker::Sized => true
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [], reveal: UserFacing })
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[]
rustc::traits: fully_normalize_with_fulfillcx(value=[])
rustc::traits::project: normalize_with_depth(depth=0, value=[])
rustc::traits::project: normalize_with_depth: depth=0 result=[] with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits: fully_normalize: normalized_value=[] obligations=[]
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[]
rustc::traits: normalize_param_env_or_error: normalized predicates=[]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[]
rustc::traits: type_known_to_meet_bound(ty=std::sys::unix::process::process_common::ExitCode, bound="std::marker::Sized")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Sized>)),depth=0)) - in global
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: builtin_bound: nested=Binder([])
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Sized>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Sized>)),depth=0)): [BuiltinCandidate { has_nested: false }]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Sized>)))=Ok(Some(BuiltinCandidate { has_nested: false }))
rustc::traits::select: insert_candidate_cache(trait_ref=<std::sys::unix::process::process_common::ExitCode as std::marker::Sized>, candidate=Ok(Some(BuiltinCandidate { has_nested: false }))) global
rustc::traits::select: evaluate_candidate: depth=0 candidate=BuiltinCandidate { has_nested: false }
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Sized>)),depth=0), BuiltinCandidate { has_nested: false })
rustc::traits::select: confirm_builtin_candidate(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Sized>)),depth=0), false)
rustc::traits::select: confirm_builtin_candidate: obligations=[]
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<std::sys::unix::process::process_common::ExitCode as std::marker::Sized>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<std::sys::unix::process::process_common::ExitCode as std::marker::Sized>), candidate=EvaluatedToOk) global
rustc::traits: type_known_to_meet_ty=std::sys::unix::process::process_common::ExitCode bound=std::marker::Sized => true
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::process::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::process::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=[], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::List<ty::subst::Kind>>(value=[], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=[], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::List<ty::subst::Kind>>(value=[], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: type_known_to_meet_bound(ty=i32, bound="std::marker::Freeze")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<i32 as std::marker::Freeze>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<i32 as std::marker::Freeze>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<i32 as std::marker::Freeze>)),depth=0)) - in global
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<i32 as std::marker::Freeze>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<i32 as std::marker::Freeze>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<i32 as std::marker::Freeze>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::marker::Freeze>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::marker::Freeze> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:851 ~ core[f3a2]::marker[0]::{{impl}}[9]), obligation=Obligation(predicate=Binder(TraitPredicate(<i32 as std::marker::Freeze>)),depth=0), impl_trait_ref=<&mut _ as std::marker::Freeze>, skol_obligation_trait_ref=<i32 as std::marker::Freeze>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected i32, found &mut _`
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::marker::Freeze>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::marker::Freeze> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:850 ~ core[f3a2]::marker[0]::{{impl}}[8]), obligation=Obligation(predicate=Binder(TraitPredicate(<i32 as std::marker::Freeze>)),depth=0), impl_trait_ref=<&_ as std::marker::Freeze>, skol_obligation_trait_ref=<i32 as std::marker::Freeze>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected i32, found reference`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=i32)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<i32 as std::marker::Freeze>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<i32 as std::marker::Freeze>)),depth=0))
rustc::traits::select: assemble_candidates_from_auto_impls(self_ty=i32)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<i32 as std::marker::Freeze>)),depth=0)): [AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<i32 as std::marker::Freeze>)))=Ok(Some(AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))))
rustc::traits::select: insert_candidate_cache(trait_ref=<i32 as std::marker::Freeze>, candidate=Ok(Some(AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))))) global
rustc::traits::select: evaluate_candidate: depth=0 candidate=AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<i32 as std::marker::Freeze>)),depth=0), AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0])))
rustc::traits::select: confirm_auto_impl_candidate(Obligation(predicate=Binder(TraitPredicate(<i32 as std::marker::Freeze>)),depth=0), DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::select: vtable_auto_impl: nested=Binder([])
rustc::traits::select: impl_or_trait_obligations(def_id=DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::project: normalize_with_depth(depth=1, value=Binder(TraitPredicate(<i32 as std::marker::Freeze>)))
rustc::traits::project: normalize_with_depth: depth=1 result=Binder(TraitPredicate(<i32 as std::marker::Freeze>)) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: vtable_auto_impl: obligations=[Obligation(predicate=Binder(TraitPredicate(<i32 as std::marker::Freeze>)),depth=1)]
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<i32 as std::marker::Freeze>)),depth=1))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<i32 as std::marker::Freeze>)),depth=1))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<i32 as std::marker::Freeze>)),depth=1)) - in global
rustc::traits::select: evaluate_stack(Binder(<i32 as std::marker::Freeze>)) --> recursive
rustc::traits::select: coinductive_predicate(Binder(TraitPredicate(<i32 as std::marker::Freeze>))) = true
rustc::traits::select: evaluate_stack(Binder(<i32 as std::marker::Freeze>)) --> recursive, coinductive
rustc::traits::select: CACHE MISS: EVAL(Binder(<i32 as std::marker::Freeze>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<i32 as std::marker::Freeze>), candidate=EvaluatedToOk) global
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<i32 as std::marker::Freeze>)),depth=1)) = EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<i32 as std::marker::Freeze>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<i32 as std::marker::Freeze>), candidate=EvaluatedToOk) global
rustc::traits: type_known_to_meet_ty=i32 bound=std::marker::Freeze => true
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: type_known_to_meet_bound(ty=std::sys::unix::process::process_common::ExitCode, bound="std::marker::Freeze")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)),depth=0)) - in global
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::marker::Freeze>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::marker::Freeze> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:851 ~ core[f3a2]::marker[0]::{{impl}}[9]), obligation=Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)),depth=0), impl_trait_ref=<&mut _ as std::marker::Freeze>, skol_obligation_trait_ref=<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected struct `std::sys::unix::process::process_common::ExitCode`, found &mut _`
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::marker::Freeze>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::marker::Freeze> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:850 ~ core[f3a2]::marker[0]::{{impl}}[8]), obligation=Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)),depth=0), impl_trait_ref=<&_ as std::marker::Freeze>, skol_obligation_trait_ref=<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected struct `std::sys::unix::process::process_common::ExitCode`, found reference`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=std::sys::unix::process::process_common::ExitCode)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)),depth=0))
rustc::traits::select: assemble_candidates_from_auto_impls(self_ty=std::sys::unix::process::process_common::ExitCode)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)),depth=0)): [AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)))=Ok(Some(AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))))
rustc::traits::select: insert_candidate_cache(trait_ref=<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>, candidate=Ok(Some(AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))))) global
rustc::traits::select: evaluate_candidate: depth=0 candidate=AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)),depth=0), AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0])))
rustc::traits::select: confirm_auto_impl_candidate(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)),depth=0), DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::select: vtable_auto_impl: nested=Binder([u8])
rustc::traits::project: normalize_with_depth(depth=1, value=u8)
rustc::traits::project: normalize_with_depth: depth=1 result=u8 with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: impl_or_trait_obligations(def_id=DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::project: normalize_with_depth(depth=1, value=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)))
rustc::traits::project: normalize_with_depth: depth=1 result=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: vtable_auto_impl: obligations=[Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Freeze>)),depth=1), Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)),depth=1)]
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Freeze>)),depth=1))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Freeze>)),depth=1))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Freeze>)),depth=1)) - in global
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<u8 as std::marker::Freeze>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Freeze>)),depth=1)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Freeze>)),depth=1))
rustc::traits::project: normalize_with_depth(depth=2, value=<&mut _ as std::marker::Freeze>)
rustc::traits::project: normalize_with_depth: depth=2 result=<&mut _ as std::marker::Freeze> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=2 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:851 ~ core[f3a2]::marker[0]::{{impl}}[9]), obligation=Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Freeze>)),depth=1), impl_trait_ref=<&mut _ as std::marker::Freeze>, skol_obligation_trait_ref=<u8 as std::marker::Freeze>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected u8, found &mut _`
rustc::traits::project: normalize_with_depth(depth=2, value=<&_ as std::marker::Freeze>)
rustc::traits::project: normalize_with_depth: depth=2 result=<&_ as std::marker::Freeze> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=2 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:850 ~ core[f3a2]::marker[0]::{{impl}}[8]), obligation=Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Freeze>)),depth=1), impl_trait_ref=<&_ as std::marker::Freeze>, skol_obligation_trait_ref=<u8 as std::marker::Freeze>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected u8, found reference`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=u8)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Freeze>)),depth=1))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Freeze>)),depth=1))
rustc::traits::select: assemble_candidates_from_auto_impls(self_ty=u8)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Freeze>)),depth=1)): [AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<u8 as std::marker::Freeze>)))=Ok(Some(AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))))
rustc::traits::select: insert_candidate_cache(trait_ref=<u8 as std::marker::Freeze>, candidate=Ok(Some(AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))))) global
rustc::traits::select: evaluate_candidate: depth=1 candidate=AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Freeze>)),depth=1), AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0])))
rustc::traits::select: confirm_auto_impl_candidate(Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Freeze>)),depth=1), DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::select: vtable_auto_impl: nested=Binder([])
rustc::traits::select: impl_or_trait_obligations(def_id=DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::project: normalize_with_depth(depth=2, value=Binder(TraitPredicate(<u8 as std::marker::Freeze>)))
rustc::traits::project: normalize_with_depth: depth=2 result=Binder(TraitPredicate(<u8 as std::marker::Freeze>)) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=2 obligations=[]
rustc::traits::select: vtable_auto_impl: obligations=[Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Freeze>)),depth=2)]
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Freeze>)),depth=2))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Freeze>)),depth=2))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Freeze>)),depth=2)) - in global
rustc::traits::select: evaluate_stack(Binder(<u8 as std::marker::Freeze>)) --> recursive
rustc::traits::select: coinductive_predicate(Binder(TraitPredicate(<u8 as std::marker::Freeze>))) = true
rustc::traits::select: evaluate_stack(Binder(<u8 as std::marker::Freeze>)) --> recursive, coinductive
rustc::traits::select: CACHE MISS: EVAL(Binder(<u8 as std::marker::Freeze>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<u8 as std::marker::Freeze>), candidate=EvaluatedToOk) global
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Freeze>)),depth=2)) = EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=1 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<u8 as std::marker::Freeze>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<u8 as std::marker::Freeze>), candidate=EvaluatedToOk) global
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Freeze>)),depth=1)) = EvaluatedToOk
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)),depth=1))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)),depth=1))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)),depth=1)) - in global
rustc::traits::select: evaluate_stack(Binder(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)) --> recursive
rustc::traits::select: coinductive_predicate(Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>))) = true
rustc::traits::select: evaluate_stack(Binder(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)) --> recursive, coinductive
rustc::traits::select: CACHE MISS: EVAL(Binder(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>), candidate=EvaluatedToOk) global
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)),depth=1)) = EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>), candidate=EvaluatedToOk) global
rustc::traits: type_known_to_meet_ty=std::sys::unix::process::process_common::ExitCode bound=std::marker::Freeze => true
rustc::traits: type_known_to_meet_bound(ty=std::process::ExitCode, bound="std::marker::Freeze")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::marker::Freeze>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::marker::Freeze>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::marker::Freeze>)),depth=0)) - in global
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<std::process::ExitCode as std::marker::Freeze>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::marker::Freeze>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::marker::Freeze>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::marker::Freeze>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::marker::Freeze> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:851 ~ core[f3a2]::marker[0]::{{impl}}[9]), obligation=Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::marker::Freeze>)),depth=0), impl_trait_ref=<&mut _ as std::marker::Freeze>, skol_obligation_trait_ref=<std::process::ExitCode as std::marker::Freeze>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected struct `std::process::ExitCode`, found &mut _`
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::marker::Freeze>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::marker::Freeze> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:850 ~ core[f3a2]::marker[0]::{{impl}}[8]), obligation=Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::marker::Freeze>)),depth=0), impl_trait_ref=<&_ as std::marker::Freeze>, skol_obligation_trait_ref=<std::process::ExitCode as std::marker::Freeze>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected struct `std::process::ExitCode`, found reference`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=std::process::ExitCode)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::marker::Freeze>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::marker::Freeze>)),depth=0))
rustc::traits::select: assemble_candidates_from_auto_impls(self_ty=std::process::ExitCode)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::marker::Freeze>)),depth=0)): [AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<std::process::ExitCode as std::marker::Freeze>)))=Ok(Some(AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))))
rustc::traits::select: insert_candidate_cache(trait_ref=<std::process::ExitCode as std::marker::Freeze>, candidate=Ok(Some(AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))))) global
rustc::traits::select: evaluate_candidate: depth=0 candidate=AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::marker::Freeze>)),depth=0), AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0])))
rustc::traits::select: confirm_auto_impl_candidate(Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::marker::Freeze>)),depth=0), DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::select: vtable_auto_impl: nested=Binder([std::sys::unix::process::process_common::ExitCode])
rustc::traits::project: normalize_with_depth(depth=1, value=std::sys::unix::process::process_common::ExitCode)
rustc::traits::project: normalize_with_depth: depth=1 result=std::sys::unix::process::process_common::ExitCode with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: impl_or_trait_obligations(def_id=DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::project: normalize_with_depth(depth=1, value=Binder(TraitPredicate(<std::process::ExitCode as std::marker::Freeze>)))
rustc::traits::project: normalize_with_depth: depth=1 result=Binder(TraitPredicate(<std::process::ExitCode as std::marker::Freeze>)) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: vtable_auto_impl: obligations=[Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)),depth=1), Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::marker::Freeze>)),depth=1)]
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)),depth=1))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)),depth=1))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)),depth=1)) - in global
rustc::traits::select: CACHE HIT: EVAL(Binder(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>))=EvaluatedToOk
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Freeze>)),depth=1)) = EvaluatedToOk
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::marker::Freeze>)),depth=1))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::marker::Freeze>)),depth=1))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::marker::Freeze>)),depth=1)) - in global
rustc::traits::select: evaluate_stack(Binder(<std::process::ExitCode as std::marker::Freeze>)) --> recursive
rustc::traits::select: coinductive_predicate(Binder(TraitPredicate(<std::process::ExitCode as std::marker::Freeze>))) = true
rustc::traits::select: evaluate_stack(Binder(<std::process::ExitCode as std::marker::Freeze>)) --> recursive, coinductive
rustc::traits::select: CACHE MISS: EVAL(Binder(<std::process::ExitCode as std::marker::Freeze>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<std::process::ExitCode as std::marker::Freeze>), candidate=EvaluatedToOk) global
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<std::process::ExitCode as std::marker::Freeze>)),depth=1)) = EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<std::process::ExitCode as std::marker::Freeze>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<std::process::ExitCode as std::marker::Freeze>), candidate=EvaluatedToOk) global
rustc::traits: type_known_to_meet_ty=std::process::ExitCode bound=std::marker::Freeze => true
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=for<'r> fn(&'r std::sys::unix::process::process_common::ExitCode) -> i32 {std::sys::unix::process::process_common::ExitCode::as_i32}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=for<'r> fn(&'r std::sys::unix::process::process_common::ExitCode) -> i32 {std::sys::unix::process::process_common::ExitCode::as_i32}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=for<'r> fn(&'r std::sys::unix::process::process_common::ExitCode) -> i32 {std::sys::unix::process::process_common::ExitCode::as_i32}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=for<'r> fn(&'r std::sys::unix::process::process_common::ExitCode) -> i32 {std::sys::unix::process::process_common::ExitCode::as_i32}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([()]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([]; variadic: false)->(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<Args as std::marker::Sized>)), Binder(TraitPredicate(<<Self as std::ops::FnOnce<Args>>::Output as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>))], reveal: UserFacing })
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as std::ops::FnOnce<Args>>::Output as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Args as std::marker::Sized>)) predicates=[]
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)), Binder(TraitPredicate(<<Self as std::ops::FnOnce<Args>>::Output as std::marker::Sized>)), Binder(TraitPredicate(<Args as std::marker::Sized>))]
rustc::traits: fully_normalize_with_fulfillcx(value=[Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)), Binder(TraitPredicate(<<Self as std::ops::FnOnce<Args>>::Output as std::marker::Sized>)), Binder(TraitPredicate(<Args as std::marker::Sized>))])
rustc::traits::project: normalize_with_depth(depth=0, value=[Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)), Binder(TraitPredicate(<<Self as std::ops::FnOnce<Args>>::Output as std::marker::Sized>)), Binder(TraitPredicate(<Args as std::marker::Sized>))])
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self, Args], item_def_id: DefId(2/0:975 ~ core[f3a2]::ops[0]::function[0]::FnOnce[0]::Output[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self, Args], item_def_id: DefId(2/0:975 ~ core[f3a2]::ops[0]::function[0]::FnOnce[0]::Output[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as std::ops::FnOnce<Args>>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self, Args], item_def_id: DefId(2/0:975 ~ core[f3a2]::ops[0]::function[0]::FnOnce[0]::Output[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as std::ops::FnOnce<Args>>::Output as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Args as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::ops::FnOnce<_>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::ops::FnOnce<_>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:982 ~ core[f3a2]::ops[0]::function[0]::impls[0]::{{impl}}[2]), obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)),depth=0), impl_trait_ref=<&_ as std::ops::FnOnce<_>>, skol_obligation_trait_ref=<Self as std::ops::FnOnce<Args>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected Self, found reference`
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::ops::FnOnce<_>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::ops::FnOnce<_>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:987 ~ core[f3a2]::ops[0]::function[0]::impls[0]::{{impl}}[4]), obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)),depth=0), impl_trait_ref=<&mut _ as std::ops::FnOnce<_>>, skol_obligation_trait_ref=<Self as std::ops::FnOnce<Args>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected Self, found &mut _`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)),depth=0) poly_trait_ref=Binder(<Self as std::ops::FnOnce<Args>>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)),depth=0)): [ParamCandidate(Binder(<Self as std::ops::FnOnce<Args>>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)))=Ok(Some(ParamCandidate(Binder(<Self as std::ops::FnOnce<Args>>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as std::ops::FnOnce<Args>>, candidate=Ok(Some(ParamCandidate(Binder(<Self as std::ops::FnOnce<Args>>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)),depth=0), ParamCandidate(Binder(<Self as std::ops::FnOnce<Args>>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)),depth=0),Binder(<Self as std::ops::FnOnce<Args>>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)),depth=0) poly_trait_ref=Binder(<Self as std::ops::FnOnce<Args>>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as std::ops::FnOnce<Args>>::Output no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self, Args], item_def_id: DefId(2/0:975 ~ core[f3a2]::ops[0]::function[0]::FnOnce[0]::Output[0]) } }, value=Normalized(<Self as std::ops::FnOnce<Args>>::Output,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as std::ops::FnOnce<Args>>::Output to <Self as std::ops::FnOnce<Args>>::Output, now with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=[Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)), Binder(TraitPredicate(<<Self as std::ops::FnOnce<Args>>::Output as std::marker::Sized>)), Binder(TraitPredicate(<Args as std::marker::Sized>))] with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits: fully_normalize: normalized_value=[Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)), Binder(TraitPredicate(<<Self as std::ops::FnOnce<Args>>::Output as std::marker::Sized>)), Binder(TraitPredicate(<Args as std::marker::Sized>))] obligations=[]
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)), Binder(TraitPredicate(<<Self as std::ops::FnOnce<Args>>::Output as std::marker::Sized>)), Binder(TraitPredicate(<Args as std::marker::Sized>))]
rustc::traits: normalize_param_env_or_error: normalized predicates=[Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)), Binder(TraitPredicate(<<Self as std::ops::FnOnce<Args>>::Output as std::marker::Sized>)), Binder(TraitPredicate(<Args as std::marker::Sized>))]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[Binder(TraitPredicate(<Self as std::ops::FnOnce<Args>>)), Binder(TraitPredicate(<<Self as std::ops::FnOnce<Args>>::Output as std::marker::Sized>)), Binder(TraitPredicate(<Args as std::marker::Sized>))]
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], value=for<'r> extern "rust-call" fn(&'r mut Self, Args) -> <Self as std::ops::FnOnce<Args>>::Output {<Self as std::ops::FnMut<Args>>::call_mut}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=for<'r> extern "rust-call" fn(&'r mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()) -> <[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>::Output {<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>::call_mut}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], value=Self, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]], value=unsafe fn(*mut T) {std::ptr::drop_in_place::<T>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=unsafe fn(*mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]) {std::ptr::drop_in_place::<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], value=Self, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]], value=unsafe fn(*mut T) {std::ptr::drop_in_place::<T>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=unsafe fn(*mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]) {std::ptr::drop_in_place::<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [], reveal: UserFacing })
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[]
rustc::traits: fully_normalize_with_fulfillcx(value=[])
rustc::traits::project: normalize_with_depth(depth=0, value=[])
rustc::traits::project: normalize_with_depth: depth=0 result=[] with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits: fully_normalize: normalized_value=[] obligations=[]
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[]
rustc::traits: normalize_param_env_or_error: normalized predicates=[]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[]
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=std::process::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::process::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([()]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([]; variadic: false)->(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([()]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([]; variadic: false)->(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([()]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([]; variadic: false)->(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=fn(fn() -> T, isize, *const *const u8) -> isize {std::rt::lang_start::<T>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(fn(), isize, *const *const u8) -> isize {std::rt::lang_start::<()>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([fn(), isize, *const *const u8]; variadic: false)->isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*const *const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: type_known_to_meet_bound(ty=*const u8, bound="std::marker::Sized")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<*const u8 as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<*const u8 as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<*const u8 as std::marker::Sized>)),depth=0)) - in global
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<*const u8 as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<*const u8 as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: builtin_bound: nested=Binder([])
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<*const u8 as std::marker::Sized>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<*const u8 as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<*const u8 as std::marker::Sized>)),depth=0)): [BuiltinCandidate { has_nested: false }]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<*const u8 as std::marker::Sized>)))=Ok(Some(BuiltinCandidate { has_nested: false }))
rustc::traits::select: insert_candidate_cache(trait_ref=<*const u8 as std::marker::Sized>, candidate=Ok(Some(BuiltinCandidate { has_nested: false }))) global
rustc::traits::select: evaluate_candidate: depth=0 candidate=BuiltinCandidate { has_nested: false }
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<*const u8 as std::marker::Sized>)),depth=0), BuiltinCandidate { has_nested: false })
rustc::traits::select: confirm_builtin_candidate(Obligation(predicate=Binder(TraitPredicate(<*const u8 as std::marker::Sized>)),depth=0), false)
rustc::traits::select: confirm_builtin_candidate: obligations=[]
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<*const u8 as std::marker::Sized>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<*const u8 as std::marker::Sized>), candidate=EvaluatedToOk) global
rustc::traits: type_known_to_meet_ty=*const u8 bound=std::marker::Sized => true
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: type_known_to_meet_bound(ty=u8, bound="std::marker::Sized")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<u8 as std::marker::Sized>)),depth=0)) - in global
rustc::traits::select: CACHE HIT: EVAL(Binder(<u8 as std::marker::Sized>))=EvaluatedToOk
rustc::traits: type_known_to_meet_ty=u8 bound=std::marker::Sized => true
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([]; variadic: false)->(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([()]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([]; variadic: false)->(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[(), i8, extern "rust-call" fn(()) -> i32, fn()], value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:<upvar>], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: type_known_to_meet_bound(ty=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], bound="std::marker::Freeze")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::marker::Freeze>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::marker::Freeze> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:851 ~ core[f3a2]::marker[0]::{{impl}}[9]), obligation=Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)),depth=0), impl_trait_ref=<&mut _ as std::marker::Freeze>, skol_obligation_trait_ref=<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected closure, found &mut _`
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::marker::Freeze>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::marker::Freeze> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:850 ~ core[f3a2]::marker[0]::{{impl}}[8]), obligation=Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)),depth=0), impl_trait_ref=<&_ as std::marker::Freeze>, skol_obligation_trait_ref=<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected closure, found reference`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()])
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)),depth=0))
rustc::traits::select: assemble_candidates_from_auto_impls(self_ty=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()])
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)),depth=0)): [AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)))=Ok(Some(AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))))
rustc::traits::select: insert_candidate_cache(trait_ref=<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>, candidate=Ok(Some(AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))))) global
rustc::traits::select: evaluate_candidate: depth=0 candidate=AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)),depth=0), AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0])))
rustc::traits::select: confirm_auto_impl_candidate(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)),depth=0), DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::select: vtable_auto_impl: nested=Binder([fn()])
rustc::traits::project: normalize_with_depth(depth=1, value=fn())
rustc::traits::project: normalize_with_depth: depth=1 result=fn() with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: impl_or_trait_obligations(def_id=DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::project: normalize_with_depth(depth=1, value=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)))
rustc::traits::project: normalize_with_depth: depth=1 result=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: vtable_auto_impl: obligations=[Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Freeze>)),depth=1), Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)),depth=1)]
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Freeze>)),depth=1))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Freeze>)),depth=1))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Freeze>)),depth=1)) - in global
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<fn() as std::marker::Freeze>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Freeze>)),depth=1)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Freeze>)),depth=1))
rustc::traits::project: normalize_with_depth(depth=2, value=<&mut _ as std::marker::Freeze>)
rustc::traits::project: normalize_with_depth: depth=2 result=<&mut _ as std::marker::Freeze> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=2 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:851 ~ core[f3a2]::marker[0]::{{impl}}[9]), obligation=Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Freeze>)),depth=1), impl_trait_ref=<&mut _ as std::marker::Freeze>, skol_obligation_trait_ref=<fn() as std::marker::Freeze>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected fn pointer, found &mut _`
rustc::traits::project: normalize_with_depth(depth=2, value=<&_ as std::marker::Freeze>)
rustc::traits::project: normalize_with_depth: depth=2 result=<&_ as std::marker::Freeze> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=2 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:850 ~ core[f3a2]::marker[0]::{{impl}}[8]), obligation=Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Freeze>)),depth=1), impl_trait_ref=<&_ as std::marker::Freeze>, skol_obligation_trait_ref=<fn() as std::marker::Freeze>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected fn pointer, found reference`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=fn())
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Freeze>)),depth=1))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Freeze>)),depth=1))
rustc::traits::select: assemble_candidates_from_auto_impls(self_ty=fn())
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Freeze>)),depth=1)): [AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<fn() as std::marker::Freeze>)))=Ok(Some(AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))))
rustc::traits::select: insert_candidate_cache(trait_ref=<fn() as std::marker::Freeze>, candidate=Ok(Some(AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))))) global
rustc::traits::select: evaluate_candidate: depth=1 candidate=AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Freeze>)),depth=1), AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0])))
rustc::traits::select: confirm_auto_impl_candidate(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Freeze>)),depth=1), DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::select: vtable_auto_impl: nested=Binder([])
rustc::traits::select: impl_or_trait_obligations(def_id=DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::project: normalize_with_depth(depth=2, value=Binder(TraitPredicate(<fn() as std::marker::Freeze>)))
rustc::traits::project: normalize_with_depth: depth=2 result=Binder(TraitPredicate(<fn() as std::marker::Freeze>)) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=2 obligations=[]
rustc::traits::select: vtable_auto_impl: obligations=[Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Freeze>)),depth=2)]
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Freeze>)),depth=2))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Freeze>)),depth=2))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Freeze>)),depth=2)) - in global
rustc::traits::select: evaluate_stack(Binder(<fn() as std::marker::Freeze>)) --> recursive
rustc::traits::select: coinductive_predicate(Binder(TraitPredicate(<fn() as std::marker::Freeze>))) = true
rustc::traits::select: evaluate_stack(Binder(<fn() as std::marker::Freeze>)) --> recursive, coinductive
rustc::traits::select: CACHE MISS: EVAL(Binder(<fn() as std::marker::Freeze>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<fn() as std::marker::Freeze>), candidate=EvaluatedToOk) global
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Freeze>)),depth=2)) = EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=1 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<fn() as std::marker::Freeze>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<fn() as std::marker::Freeze>), candidate=EvaluatedToOk) global
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Freeze>)),depth=1)) = EvaluatedToOk
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)),depth=1))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)),depth=1))
rustc::traits::select: evaluate_stack(Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)) --> recursive
rustc::traits::select: coinductive_predicate(Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>))) = true
rustc::traits::select: evaluate_stack(Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)) --> recursive, coinductive
rustc::traits::select: CACHE MISS: EVAL(Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>), candidate=EvaluatedToOk) global
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)),depth=1)) = EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>), candidate=EvaluatedToOk) global
rustc::traits: type_known_to_meet_ty=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] bound=std::marker::Freeze => true
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)),depth=0))
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)))=Ok(Some(AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)),depth=0), AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0])))
rustc::traits::select: confirm_auto_impl_candidate(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)),depth=0), DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::select: vtable_auto_impl: nested=Binder([fn()])
rustc::traits::project: normalize_with_depth(depth=1, value=fn())
rustc::traits::project: normalize_with_depth: depth=1 result=fn() with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: impl_or_trait_obligations(def_id=DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::project: normalize_with_depth(depth=1, value=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)))
rustc::traits::project: normalize_with_depth: depth=1 result=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: vtable_auto_impl: obligations=[Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Freeze>)),depth=1), Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)),depth=1)]
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>))` at depth 0 yielded Ok(Some)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Freeze>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Freeze>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Freeze>)),depth=0)) - in global
rustc::traits::select: CACHE HIT: EVAL(Binder(<fn() as std::marker::Freeze>))=EvaluatedToOk
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<fn() as std::marker::Freeze>))` at depth 1 evaluated to holds
rustc::traits::select: coinductive_predicate(Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>))) = true
rustc::traits::fulfill: process_child_obligations: coinductive match
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Freeze>)),depth=1),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::marker::Freeze>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: type_known_to_meet_bound: ty=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] bound=std::marker::Freeze success
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([()]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([]; variadic: false)->(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=fn(fn() -> T, isize, *const *const u8) -> isize {std::rt::lang_start::<T>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(fn(), isize, *const *const u8) -> isize {std::rt::lang_start::<()>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([fn(), isize, *const *const u8]; variadic: false)->isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*const *const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=fn() -> T, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=*const *const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*const *const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*const *const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: type_known_to_meet_bound(ty=dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, bound="std::marker::Sized")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Sized>)),depth=0)) - in global
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Sized>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Sized>)),depth=0))
rustc::traits::select: assemble_candidates_from_auto_impls(self_ty=dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe)
rustc::traits::select: candidate list size: 0
rustc::traits::select: assembled 0 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Sized>)),depth=0)): []
rustc::traits::select: winnowed to 0 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Sized>)),depth=0)): []
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Sized>)))=Err(Unimplemented)
rustc::traits::select: insert_candidate_cache(trait_ref=<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Sized>, candidate=Err(Unimplemented)) global
rustc::traits::select: CACHE MISS: EVAL(Binder(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Sized>))=EvaluatedToErr
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Sized>), candidate=EvaluatedToErr) global
rustc::traits: type_known_to_meet_ty=dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe bound=std::marker::Sized => false
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn() -> T], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn() -> T], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn() -> T], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=*const *const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*const *const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*const *const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn() -> T], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn() -> T], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn() -> T], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=*const *const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*const *const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*const *const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: type_known_to_meet_bound(ty=fn(), bound="std::marker::Sized")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Sized>)),depth=0)) - in global
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<fn() as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: builtin_bound: nested=Binder([])
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Sized>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Sized>)),depth=0)): [BuiltinCandidate { has_nested: false }]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<fn() as std::marker::Sized>)))=Ok(Some(BuiltinCandidate { has_nested: false }))
rustc::traits::select: insert_candidate_cache(trait_ref=<fn() as std::marker::Sized>, candidate=Ok(Some(BuiltinCandidate { has_nested: false }))) global
rustc::traits::select: evaluate_candidate: depth=0 candidate=BuiltinCandidate { has_nested: false }
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Sized>)),depth=0), BuiltinCandidate { has_nested: false })
rustc::traits::select: confirm_builtin_candidate(Obligation(predicate=Binder(TraitPredicate(<fn() as std::marker::Sized>)),depth=0), false)
rustc::traits::select: confirm_builtin_candidate: obligations=[]
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<fn() as std::marker::Sized>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<fn() as std::marker::Sized>), candidate=EvaluatedToOk) global
rustc::traits: type_known_to_meet_ty=fn() bound=std::marker::Sized => true
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=fn() -> T, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn() -> T], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn() -> T], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*mut dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&'static [usize; 3], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[usize; 3], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: type_known_to_meet_bound(ty=[usize; 3], bound="std::marker::Sized")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<[usize; 3] as std::marker::Sized>)),depth=0))
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<[usize; 3] as std::marker::Sized>)),depth=0))
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<[usize; 3] as std::marker::Sized>)),depth=0)) - in global
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<[usize; 3] as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<[usize; 3] as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: builtin_bound: nested=Binder([])
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<[usize; 3] as std::marker::Sized>)),depth=0))
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<[usize; 3] as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<[usize; 3] as std::marker::Sized>)),depth=0)): [BuiltinCandidate { has_nested: false }]
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<[usize; 3] as std::marker::Sized>)))=Ok(Some(BuiltinCandidate { has_nested: false }))
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: insert_candidate_cache(trait_ref=<[usize; 3] as std::marker::Sized>, candidate=Ok(Some(BuiltinCandidate { has_nested: false }))) global
rustc::traits::select: evaluate_candidate: depth=0 candidate=BuiltinCandidate { has_nested: false }
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<[usize; 3] as std::marker::Sized>)),depth=0), BuiltinCandidate { has_nested: false })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: confirm_builtin_candidate(Obligation(predicate=Binder(TraitPredicate(<[usize; 3] as std::marker::Sized>)),depth=0), false)
rustc::traits::select: confirm_builtin_candidate: obligations=[]
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: CACHE MISS: EVAL(Binder(<[usize; 3] as std::marker::Sized>))=EvaluatedToOk
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<[usize; 3] as std::marker::Sized>), candidate=EvaluatedToOk) global
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: type_known_to_meet_ty=[usize; 3] bound=std::marker::Sized => true
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]], value=unsafe fn(*mut T) {std::ptr::drop_in_place::<T>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=unsafe fn(*mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]) {std::ptr::drop_in_place::<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]], value=unsafe fn(*mut T) {std::ptr::drop_in_place::<T>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=unsafe fn(*mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]) {std::ptr::drop_in_place::<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=unsafe fn(*mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([*mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]]; variadic: false)->(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([*mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]]; variadic: false)->(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[(), i8, extern "rust-call" fn(()) -> i32, fn()], value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:<upvar>], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[(), i8, extern "rust-call" fn(()) -> i32, fn()], value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:<upvar>], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([()]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], value=extern "rust-call" fn(Self, Args) -> <Self as std::ops::FnOnce<Args>>::Output {<Self as std::ops::FnOnce<Args>>::call_once}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=extern "rust-call" fn([closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()) -> <[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>::Output {<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>::call_once}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=extern "rust-call" fn([closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()) -> <[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>::Output, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize: normalize::<&rustc::ty::TyS>(value=extern "rust-call" fn([closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()) -> <[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>::Output, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [],
            reveal: All
        },
        value: ProjectionTy {
            substs: [
                [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()],
                ()
            ],
            item_def_id: DefId(2/0:975 ~ core[f3a2]::ops[0]::function[0]::FnOnce[0]::Output[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], item_def_id: DefId(2/0:975 ~ core[f3a2]::ops[0]::function[0]::FnOnce[0]::Output[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], item_def_id: DefId(2/0:975 ~ core[f3a2]::ops[0]::function[0]::FnOnce[0]::Output[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], item_def_id: DefId(2/0:975 ~ core[f3a2]::ops[0]::function[0]::FnOnce[0]::Output[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>)))=Ok(Some(ClosureCandidate))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>)),depth=0), ClosureCandidate)
rustc::traits::select: confirm_closure_candidate(Obligation(predicate=Binder(TraitPredicate(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>))
rustc::traits::project: normalize_with_depth: depth=1 result=Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: confirm_closure_candidate(closure_def_id=DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), trait_ref=Binder(<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>), obligations=[])
rustc::traits::project: assemble_candidates_from_impls: vtable=VtableClosure(closure_def_id=DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), substs=ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, nested=[Obligation(predicate=ClosureKind(DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, FnOnce),depth=0)])
rustc::traits::project: confirm_candidate(candidate=Select(VtableClosure(closure_def_id=DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), substs=ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, nested=[Obligation(predicate=ClosureKind(DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, FnOnce),depth=0)])), obligation=Obligation(predicate=ProjectionTy { substs: [[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], item_def_id: DefId(2/0:975 ~ core[f3a2]::ops[0]::function[0]::FnOnce[0]::Output[0]) },depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=Binder(([()]; variadic: false)->i32))
rustc::traits::project: normalize_with_depth: depth=1 result=Binder(([()]; variadic: false)->i32) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::project: confirm_closure_candidate: obligation=Obligation(predicate=ProjectionTy { substs: [[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], item_def_id: DefId(2/0:975 ~ core[f3a2]::ops[0]::function[0]::FnOnce[0]::Output[0]) },depth=0),closure_sig=Binder(([()]; variadic: false)->i32),obligations=[]
rustc::traits::project: confirm_callable_candidate(Obligation(predicate=ProjectionTy { substs: [[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], item_def_id: DefId(2/0:975 ~ core[f3a2]::ops[0]::function[0]::FnOnce[0]::Output[0]) },depth=0),Binder(([()]; variadic: false)->i32))
rustc::traits::project: with_addl_obligations: self.obligations.len=0 obligations.len=1
rustc::traits::project: with_addl_obligations: self.obligations=[] obligations=[Obligation(predicate=ClosureKind(DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, FnOnce),depth=0)]
rustc::traits::project: with_addl_obligations: self.obligations.len=1 obligations.len=0
rustc::traits::project: with_addl_obligations: self.obligations=[Obligation(predicate=ClosureKind(DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, FnOnce),depth=0)] obligations=[]
rustc::traits::project: opt_normalize_projection_type: projected_ty=i32 depth=0 projected_obligations=[Obligation(predicate=ClosureKind(DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, FnOnce),depth=0)]
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], item_def_id: DefId(2/0:975 ~ core[f3a2]::ops[0]::function[0]::FnOnce[0]::Output[0]) } }, value=Normalized(i32,[])
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=ClosureKind(DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, FnOnce),depth=0))
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=ClosureKind(DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]), ClosureSubsts { substs: [(), i8, extern "rust-call" fn(()) -> i32, fn()] }, FnOnce),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: i32
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()]; variadic: false)-><[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>::Output, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize: normalize::<&rustc::ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize: normalize::<&rustc::ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize: normalize::<&rustc::ty::TyS>(value=<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>::Output, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize: QueryNormalizer: c_data = Canonical {
    variables: [],
    value: ParamEnvAnd {
        param_env: ParamEnv {
            caller_bounds: [],
            reveal: All
        },
        value: ProjectionTy {
            substs: [
                [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()],
                ()
            ],
            item_def_id: DefId(2/0:975 ~ core[f3a2]::ops[0]::function[0]::FnOnce[0]::Output[0])
        }
    }
}
rustc::traits::query::normalize: QueryNormalizer: orig_values = []
rustc::traits::query::normalize: QueryNormalizer: result = NormalizationResult {
    normalized_ty: i32
}
rustc::traits::query::normalize: QueryNormalizer: obligations = []
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[usize; 3], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=*const *const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*const *const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*const *const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=for<'r> fn(&'r (dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe + 'r), isize, *const *const u8) -> isize {std::rt::lang_start_internal}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=for<'r> fn(&'r (dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe + 'r), isize, *const *const u8) -> isize {std::rt::lang_start_internal}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=Const { ty: for<'r> fn(&'r (dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe + 'r), isize, *const *const u8) -> isize {std::rt::lang_start_internal}, val: Scalar(Bits { size: 0, bits: 0 }) }, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::sty::Const>(value=Const { ty: for<'r> fn(&'r (dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe + 'r), isize, *const *const u8) -> isize {std::rt::lang_start_internal}, val: Scalar(Bits { size: 0, bits: 0 }) }, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=for<'r> fn(&'r (dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe + 'r), isize, *const *const u8) -> isize {std::rt::lang_start_internal}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=for<'r> fn(&'r (dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe + 'r), isize, *const *const u8) -> isize {std::rt::lang_start_internal}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=for<'r> fn(&'r (dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe + 'r), isize, *const *const u8) -> isize {std::rt::lang_start_internal}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, isize, *const *const u8]; variadic: false)->isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: type_known_to_meet_bound(ty=dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, bound="std::marker::Freeze")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Freeze>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Freeze>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Freeze>)),depth=0)) - in global
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Freeze>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Freeze>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Freeze>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::marker::Freeze>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::marker::Freeze> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:851 ~ core[f3a2]::marker[0]::{{impl}}[9]), obligation=Obligation(predicate=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Freeze>)),depth=0), impl_trait_ref=<&mut _ as std::marker::Freeze>, skol_obligation_trait_ref=<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Freeze>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected trait std::ops::Fn, found &mut _`
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::marker::Freeze>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::marker::Freeze> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:850 ~ core[f3a2]::marker[0]::{{impl}}[8]), obligation=Obligation(predicate=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Freeze>)),depth=0), impl_trait_ref=<&_ as std::marker::Freeze>, skol_obligation_trait_ref=<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Freeze>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected trait std::ops::Fn, found reference`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe)
rustc::traits::select: assemble_candidates_from_object_ty: poly_trait_ref=Binder(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::ops::Fn<()>>)
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::ops::Fn<()>>)) predicates=[Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::ops::FnMut<()>>))]
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Freeze>)),depth=0) poly_trait_ref=Binder(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::ops::Fn<()>>)
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::ops::FnMut<()>>)) predicates=[Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::ops::FnOnce<()>>))]
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Freeze>)),depth=0) poly_trait_ref=Binder(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::ops::FnMut<()>>)
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::ops::FnOnce<()>>)) predicates=[]
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Freeze>)),depth=0) poly_trait_ref=Binder(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::ops::FnOnce<()>>)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Freeze>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Freeze>)),depth=0))
rustc::traits::select: assemble_candidates_from_auto_impls(self_ty=dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe)
rustc::traits::select: candidate list size: 0
rustc::traits::select: assembled 0 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Freeze>)),depth=0)): []
rustc::traits::select: winnowed to 0 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Freeze>)),depth=0)): []
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Freeze>)))=Err(Unimplemented)
rustc::traits::select: insert_candidate_cache(trait_ref=<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Freeze>, candidate=Err(Unimplemented)) global
rustc::traits::select: CACHE MISS: EVAL(Binder(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Freeze>))=EvaluatedToErr
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe as std::marker::Freeze>), candidate=EvaluatedToErr) global
rustc::traits: type_known_to_meet_ty=dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe bound=std::marker::Freeze => false
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&'static mut (), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: type_known_to_meet_bound(ty=(), bound="std::marker::Sized")
rustc::traits: type_known_to_meet_ty=() bound=std::marker::Sized => true
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&'static [usize; 3], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[usize; 3], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: type_known_to_meet_bound(ty=[usize; 3], bound="std::marker::Freeze")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<[usize; 3] as std::marker::Freeze>)),depth=0))
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<[usize; 3] as std::marker::Freeze>)),depth=0))
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<[usize; 3] as std::marker::Freeze>)),depth=0)) - in global
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<[usize; 3] as std::marker::Freeze>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<[usize; 3] as std::marker::Freeze>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<[usize; 3] as std::marker::Freeze>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::marker::Freeze>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::marker::Freeze> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:851 ~ core[f3a2]::marker[0]::{{impl}}[9]), obligation=Obligation(predicate=Binder(TraitPredicate(<[usize; 3] as std::marker::Freeze>)),depth=0), impl_trait_ref=<&mut _ as std::marker::Freeze>, skol_obligation_trait_ref=<[usize; 3] as std::marker::Freeze>)
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected array of 3 elements, found &mut _`
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::marker::Freeze>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::marker::Freeze> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:850 ~ core[f3a2]::marker[0]::{{impl}}[8]), obligation=Obligation(predicate=Binder(TraitPredicate(<[usize; 3] as std::marker::Freeze>)),depth=0), impl_trait_ref=<&_ as std::marker::Freeze>, skol_obligation_trait_ref=<[usize; 3] as std::marker::Freeze>)
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected array of 3 elements, found reference`
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=[usize; 3])
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<[usize; 3] as std::marker::Freeze>)),depth=0))
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<[usize; 3] as std::marker::Freeze>)),depth=0))
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: assemble_candidates_from_auto_impls(self_ty=[usize; 3])
rustc::traits::select: candidate list size: 1
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<[usize; 3] as std::marker::Freeze>)),depth=0)): [AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))]
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<[usize; 3] as std::marker::Freeze>)))=Ok(Some(AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))))
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: insert_candidate_cache(trait_ref=<[usize; 3] as std::marker::Freeze>, candidate=Ok(Some(AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))))) global
rustc::traits::select: evaluate_candidate: depth=0 candidate=AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<[usize; 3] as std::marker::Freeze>)),depth=0), AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0])))
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: confirm_auto_impl_candidate(Obligation(predicate=Binder(TraitPredicate(<[usize; 3] as std::marker::Freeze>)),depth=0), DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::select: vtable_auto_impl: nested=Binder([usize])
rustc::traits::project: normalize_with_depth(depth=1, value=usize)
rustc::traits::project: normalize_with_depth: depth=1 result=usize with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: impl_or_trait_obligations(def_id=DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::project: normalize_with_depth(depth=1, value=Binder(TraitPredicate(<[usize; 3] as std::marker::Freeze>)))
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::project: normalize_with_depth: depth=1 result=Binder(TraitPredicate(<[usize; 3] as std::marker::Freeze>)) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: vtable_auto_impl: obligations=[Obligation(predicate=Binder(TraitPredicate(<usize as std::marker::Freeze>)),depth=1), Obligation(predicate=Binder(TraitPredicate(<[usize; 3] as std::marker::Freeze>)),depth=1)]
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<usize as std::marker::Freeze>)),depth=1))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<usize as std::marker::Freeze>)),depth=1))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<usize as std::marker::Freeze>)),depth=1)) - in global
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<usize as std::marker::Freeze>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<usize as std::marker::Freeze>)),depth=1)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<usize as std::marker::Freeze>)),depth=1))
rustc::traits::project: normalize_with_depth(depth=2, value=<&mut _ as std::marker::Freeze>)
rustc::traits::project: normalize_with_depth: depth=2 result=<&mut _ as std::marker::Freeze> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=2 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:851 ~ core[f3a2]::marker[0]::{{impl}}[9]), obligation=Obligation(predicate=Binder(TraitPredicate(<usize as std::marker::Freeze>)),depth=1), impl_trait_ref=<&mut _ as std::marker::Freeze>, skol_obligation_trait_ref=<usize as std::marker::Freeze>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected usize, found &mut _`
rustc::traits::project: normalize_with_depth(depth=2, value=<&_ as std::marker::Freeze>)
rustc::traits::project: normalize_with_depth: depth=2 result=<&_ as std::marker::Freeze> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=2 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:850 ~ core[f3a2]::marker[0]::{{impl}}[8]), obligation=Obligation(predicate=Binder(TraitPredicate(<usize as std::marker::Freeze>)),depth=1), impl_trait_ref=<&_ as std::marker::Freeze>, skol_obligation_trait_ref=<usize as std::marker::Freeze>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected usize, found reference`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=usize)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<usize as std::marker::Freeze>)),depth=1))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<usize as std::marker::Freeze>)),depth=1))
rustc::traits::select: assemble_candidates_from_auto_impls(self_ty=usize)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<usize as std::marker::Freeze>)),depth=1)): [AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<usize as std::marker::Freeze>)))=Ok(Some(AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))))
rustc::traits::select: insert_candidate_cache(trait_ref=<usize as std::marker::Freeze>, candidate=Ok(Some(AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))))) global
rustc::traits::select: evaluate_candidate: depth=1 candidate=AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<usize as std::marker::Freeze>)),depth=1), AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0])))
rustc::traits::select: confirm_auto_impl_candidate(Obligation(predicate=Binder(TraitPredicate(<usize as std::marker::Freeze>)),depth=1), DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::select: vtable_auto_impl: nested=Binder([])
rustc::traits::select: impl_or_trait_obligations(def_id=DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::project: normalize_with_depth(depth=2, value=Binder(TraitPredicate(<usize as std::marker::Freeze>)))
rustc::traits::project: normalize_with_depth: depth=2 result=Binder(TraitPredicate(<usize as std::marker::Freeze>)) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=2 obligations=[]
rustc::traits::select: vtable_auto_impl: obligations=[Obligation(predicate=Binder(TraitPredicate(<usize as std::marker::Freeze>)),depth=2)]
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<usize as std::marker::Freeze>)),depth=2))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<usize as std::marker::Freeze>)),depth=2))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<usize as std::marker::Freeze>)),depth=2)) - in global
rustc::traits::select: evaluate_stack(Binder(<usize as std::marker::Freeze>)) --> recursive
rustc::traits::select: coinductive_predicate(Binder(TraitPredicate(<usize as std::marker::Freeze>))) = true
rustc::traits::select: evaluate_stack(Binder(<usize as std::marker::Freeze>)) --> recursive, coinductive
rustc::traits::select: CACHE MISS: EVAL(Binder(<usize as std::marker::Freeze>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<usize as std::marker::Freeze>), candidate=EvaluatedToOk) global
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<usize as std::marker::Freeze>)),depth=2)) = EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=1 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<usize as std::marker::Freeze>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<usize as std::marker::Freeze>), candidate=EvaluatedToOk) global
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<usize as std::marker::Freeze>)),depth=1)) = EvaluatedToOk
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<[usize; 3] as std::marker::Freeze>)),depth=1))
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<[usize; 3] as std::marker::Freeze>)),depth=1))
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<[usize; 3] as std::marker::Freeze>)),depth=1)) - in global
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: evaluate_stack(Binder(<[usize; 3] as std::marker::Freeze>)) --> recursive
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: coinductive_predicate(Binder(TraitPredicate(<[usize; 3] as std::marker::Freeze>))) = true
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: evaluate_stack(Binder(<[usize; 3] as std::marker::Freeze>)) --> recursive, coinductive
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: CACHE MISS: EVAL(Binder(<[usize; 3] as std::marker::Freeze>))=EvaluatedToOk
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<[usize; 3] as std::marker::Freeze>), candidate=EvaluatedToOk) global
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<[usize; 3] as std::marker::Freeze>)),depth=1)) = EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: CACHE MISS: EVAL(Binder(<[usize; 3] as std::marker::Freeze>))=EvaluatedToOk
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<[usize; 3] as std::marker::Freeze>), candidate=EvaluatedToOk) global
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: type_known_to_meet_ty=[usize; 3] bound=std::marker::Freeze => true
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*const *const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=*const *const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*const *const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*const *const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=for<'r> fn(&'r (dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe + 'r), isize, *const *const u8) -> isize {std::rt::lang_start_internal}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=for<'r> fn(&'r (dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe + 'r), isize, *const *const u8) -> isize {std::rt::lang_start_internal}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=for<'r> fn(&'r (dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe + 'r), isize, *const *const u8) -> isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, isize, *const *const u8]; variadic: false)->isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*const *const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&'static mut (), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&'static [usize; 3], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, isize, *const *const u8]; variadic: false)->isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*const *const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&'static mut (), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&'static [usize; 3], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([()]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([]; variadic: false)->(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[(), i8, extern "rust-call" fn(()) -> i32, fn()], value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:<upvar>], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[(), i8, extern "rust-call" fn(()) -> i32, fn()], value=Ty { ty: [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn() -> T] }, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<rustc::mir::tcx::PlaceTy>(value=Ty { ty: [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] }, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[(), i8, extern "rust-call" fn(()) -> i32, fn()], value=fn() -> T, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[(), i8, extern "rust-call" fn(()) -> i32, fn()], value=Ty { ty: &[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn() -> T] }, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<rustc::mir::tcx::PlaceTy>(value=Ty { ty: &[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] }, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[(), i8, extern "rust-call" fn(()) -> i32, fn()], value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[(), i8, extern "rust-call" fn(()) -> i32, fn()], value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[(), i8, extern "rust-call" fn(()) -> i32, fn()], value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn() -> T], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[(), i8, extern "rust-call" fn(()) -> i32, fn()], value=T, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[(), i8, extern "rust-call" fn(()) -> i32, fn()], value=fn() -> T, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[(), i8, extern "rust-call" fn(()) -> i32, fn()], value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[(), i8, extern "rust-call" fn(()) -> i32, fn()], value=T, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[(), i8, extern "rust-call" fn(()) -> i32, fn()], value=fn() -> T, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[(), i8, extern "rust-call" fn(()) -> i32, fn()], value=fn() -> T, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[(), i8, extern "rust-call" fn(()) -> i32, fn()], value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn() -> T], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[(), i8, extern "rust-call" fn(()) -> i32, fn()], value=fn() -> T, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([]; variadic: false)->(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[(), i8, extern "rust-call" fn(()) -> i32, fn()], value=fn(T) -> i32 {<T as std::process::Termination>::report}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(()) -> i32 {<() as std::process::Termination>::report}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[(), i8, extern "rust-call" fn(()) -> i32, fn()], value=Const { ty: fn(T) -> i32 {<T as std::process::Termination>::report}, val: Scalar(Bits { size: 0, bits: 0 }) }, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::sty::Const>(value=Const { ty: fn(()) -> i32 {<() as std::process::Termination>::report}, val: Scalar(Bits { size: 0, bits: 0 }) }, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(()) -> i32 {<() as std::process::Termination>::report}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([()]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[(), i8, extern "rust-call" fn(()) -> i32, fn()], value=T, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=fn(()) -> i32 {<() as std::process::Termination>::report}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(()) -> i32 {<() as std::process::Termination>::report}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(()) -> i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([()]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([()]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[(), i8, extern "rust-call" fn(()) -> i32, fn()], value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([()]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([]; variadic: false)->(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=for<'r> fn(&'r std::sys::unix::process::process_common::ExitCode) -> i32 {std::sys::unix::process::process_common::ExitCode::as_i32}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=for<'r> fn(&'r std::sys::unix::process::process_common::ExitCode) -> i32 {std::sys::unix::process::process_common::ExitCode::as_i32}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([&std::sys::unix::process::process_common::ExitCode]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: type_known_to_meet_bound(ty=std::sys::unix::process::process_common::ExitCode, bound="std::marker::Sized")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<std::sys::unix::process::process_common::ExitCode as std::marker::Sized>)),depth=0)) - in global
rustc::traits::select: CACHE HIT: EVAL(Binder(<std::sys::unix::process::process_common::ExitCode as std::marker::Sized>))=EvaluatedToOk
rustc::traits: type_known_to_meet_ty=std::sys::unix::process::process_common::ExitCode bound=std::marker::Sized => true
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=for<'r> fn(&'r std::sys::unix::process::process_common::ExitCode) -> i32 {std::sys::unix::process::process_common::ExitCode::as_i32}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=for<'r> fn(&'r std::sys::unix::process::process_common::ExitCode) -> i32 {std::sys::unix::process::process_common::ExitCode::as_i32}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([&std::sys::unix::process::process_common::ExitCode]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=Ty { ty: std::sys::unix::process::process_common::ExitCode }, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<rustc::mir::tcx::PlaceTy>(value=Ty { ty: std::sys::unix::process::process_common::ExitCode }, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=Ty { ty: &std::sys::unix::process::process_common::ExitCode }, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<rustc::mir::tcx::PlaceTy>(value=Ty { ty: &std::sys::unix::process::process_common::ExitCode }, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=&std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=&std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=fn(()) -> i32 {<() as std::process::Termination>::report}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(()) -> i32 {<() as std::process::Termination>::report}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([()]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=fn(std::process::ExitCode) -> i32 {<std::process::ExitCode as std::process::Termination>::report}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(std::process::ExitCode) -> i32 {<std::process::ExitCode as std::process::Termination>::report}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([std::process::ExitCode]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::process::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=fn(()) -> i32 {<() as std::process::Termination>::report}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(()) -> i32 {<() as std::process::Termination>::report}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([()]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=fn(std::process::ExitCode) -> i32 {<std::process::ExitCode as std::process::Termination>::report}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(std::process::ExitCode) -> i32 {<std::process::ExitCode as std::process::Termination>::report}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=Const { ty: fn(std::process::ExitCode) -> i32 {<std::process::ExitCode as std::process::Termination>::report}, val: Scalar(Bits { size: 0, bits: 0 }) }, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::sty::Const>(value=Const { ty: fn(std::process::ExitCode) -> i32 {<std::process::ExitCode as std::process::Termination>::report}, val: Scalar(Bits { size: 0, bits: 0 }) }, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(std::process::ExitCode) -> i32 {<std::process::ExitCode as std::process::Termination>::report}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([std::process::ExitCode]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::process::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=std::process::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::process::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=Const { ty: std::process::ExitCode, val: Unevaluated(DefId(1/0:3150 ~ std[b095]::process[0]::{{impl}}[35]::SUCCESS[0]), []) }, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::sty::Const>(value=Const { ty: std::process::ExitCode, val: Unevaluated(DefId(1/0:3150 ~ std[b095]::process[0]::{{impl}}[35]::SUCCESS[0]), []) }, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize: normalize::<&rustc::ty::TyS>(value=std::process::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=std::process::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::process::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::process::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=fn(std::process::ExitCode) -> i32 {<std::process::ExitCode as std::process::Termination>::report}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(std::process::ExitCode) -> i32 {<std::process::ExitCode as std::process::Termination>::report}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=fn(std::process::ExitCode) -> i32 {<std::process::ExitCode as std::process::Termination>::report}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(std::process::ExitCode) -> i32 {<std::process::ExitCode as std::process::Termination>::report}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([std::process::ExitCode]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::process::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=std::process::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::process::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::process::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=&std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=&std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=for<'r> fn(&'r std::sys::unix::process::process_common::ExitCode) -> i32 {std::sys::unix::process::process_common::ExitCode::as_i32}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=for<'r> fn(&'r std::sys::unix::process::process_common::ExitCode) -> i32 {std::sys::unix::process::process_common::ExitCode::as_i32}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=Const { ty: for<'r> fn(&'r std::sys::unix::process::process_common::ExitCode) -> i32 {std::sys::unix::process::process_common::ExitCode::as_i32}, val: Scalar(Bits { size: 0, bits: 0 }) }, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::sty::Const>(value=Const { ty: for<'r> fn(&'r std::sys::unix::process::process_common::ExitCode) -> i32 {std::sys::unix::process::process_common::ExitCode::as_i32}, val: Scalar(Bits { size: 0, bits: 0 }) }, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=for<'r> fn(&'r std::sys::unix::process::process_common::ExitCode) -> i32 {std::sys::unix::process::process_common::ExitCode::as_i32}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=for<'r> fn(&'r std::sys::unix::process::process_common::ExitCode) -> i32 {std::sys::unix::process::process_common::ExitCode::as_i32}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=for<'r> fn(&'r std::sys::unix::process::process_common::ExitCode) -> i32 {std::sys::unix::process::process_common::ExitCode::as_i32}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([&std::sys::unix::process::process_common::ExitCode]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=&std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=for<'r> fn(&'r std::sys::unix::process::process_common::ExitCode) -> i32 {std::sys::unix::process::process_common::ExitCode::as_i32}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=for<'r> fn(&'r std::sys::unix::process::process_common::ExitCode) -> i32 {std::sys::unix::process::process_common::ExitCode::as_i32}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=for<'r> fn(&'r std::sys::unix::process::process_common::ExitCode) -> i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([&std::sys::unix::process::process_common::ExitCode]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([&std::sys::unix::process::process_common::ExitCode]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&std::sys::unix::process::process_common::ExitCode, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], value=extern "rust-call" fn(Self, Args) -> <Self as std::ops::FnOnce<Args>>::Output {<Self as std::ops::FnOnce<Args>>::call_once}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=extern "rust-call" fn([closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()) -> <[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>::Output {<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>::call_once}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()]; variadic: false)-><[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>::Output, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]], value=unsafe fn(*mut T) {std::ptr::drop_in_place::<T>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=unsafe fn(*mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]) {std::ptr::drop_in_place::<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([*mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]]; variadic: false)->(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], value=extern "rust-call" fn(Self, Args) -> <Self as std::ops::FnOnce<Args>>::Output {<Self as std::ops::FnOnce<Args>>::call_once}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=extern "rust-call" fn([closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()) -> <[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>::Output {<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>::call_once}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()]; variadic: false)-><[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>::Output, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=unsafe extern "C" fn(i32, unwind::libunwind::_Unwind_Action, u64, *mut unwind::libunwind::_Unwind_Exception, *mut unwind::libunwind::_Unwind_Context) -> unwind::libunwind::_Unwind_Reason_Code {panic_unwind::imp::rust_eh_personality}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=unsafe extern "C" fn(i32, unwind::libunwind::_Unwind_Action, u64, *mut unwind::libunwind::_Unwind_Exception, *mut unwind::libunwind::_Unwind_Context) -> unwind::libunwind::_Unwind_Reason_Code {panic_unwind::imp::rust_eh_personality}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=unsafe extern "C" fn(i32, unwind::libunwind::_Unwind_Action, u64, *mut unwind::libunwind::_Unwind_Exception, *mut unwind::libunwind::_Unwind_Context) -> unwind::libunwind::_Unwind_Reason_Code {panic_unwind::imp::rust_eh_personality}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=unsafe extern "C" fn(i32, unwind::libunwind::_Unwind_Action, u64, *mut unwind::libunwind::_Unwind_Exception, *mut unwind::libunwind::_Unwind_Context) -> unwind::libunwind::_Unwind_Reason_Code {panic_unwind::imp::rust_eh_personality}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=unsafe extern "C" fn(i32, unwind::libunwind::_Unwind_Action, u64, *mut unwind::libunwind::_Unwind_Exception, *mut unwind::libunwind::_Unwind_Context) -> unwind::libunwind::_Unwind_Reason_Code, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([i32, unwind::libunwind::_Unwind_Action, u64, *mut unwind::libunwind::_Unwind_Exception, *mut unwind::libunwind::_Unwind_Context]; variadic: false)->unwind::libunwind::_Unwind_Reason_Code, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=unwind::libunwind::_Unwind_Reason_Code, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: type_known_to_meet_bound(ty=isize, bound="std::marker::Freeze")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<isize as std::marker::Freeze>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<isize as std::marker::Freeze>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<isize as std::marker::Freeze>)),depth=0)) - in global
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<isize as std::marker::Freeze>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<isize as std::marker::Freeze>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<isize as std::marker::Freeze>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::marker::Freeze>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::marker::Freeze> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:851 ~ core[f3a2]::marker[0]::{{impl}}[9]), obligation=Obligation(predicate=Binder(TraitPredicate(<isize as std::marker::Freeze>)),depth=0), impl_trait_ref=<&mut _ as std::marker::Freeze>, skol_obligation_trait_ref=<isize as std::marker::Freeze>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected isize, found &mut _`
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::marker::Freeze>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::marker::Freeze> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:850 ~ core[f3a2]::marker[0]::{{impl}}[8]), obligation=Obligation(predicate=Binder(TraitPredicate(<isize as std::marker::Freeze>)),depth=0), impl_trait_ref=<&_ as std::marker::Freeze>, skol_obligation_trait_ref=<isize as std::marker::Freeze>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected isize, found reference`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=isize)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<isize as std::marker::Freeze>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<isize as std::marker::Freeze>)),depth=0))
rustc::traits::select: assemble_candidates_from_auto_impls(self_ty=isize)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<isize as std::marker::Freeze>)),depth=0)): [AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<isize as std::marker::Freeze>)))=Ok(Some(AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))))
rustc::traits::select: insert_candidate_cache(trait_ref=<isize as std::marker::Freeze>, candidate=Ok(Some(AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))))) global
rustc::traits::select: evaluate_candidate: depth=0 candidate=AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<isize as std::marker::Freeze>)),depth=0), AutoImplCandidate(DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0])))
rustc::traits::select: confirm_auto_impl_candidate(Obligation(predicate=Binder(TraitPredicate(<isize as std::marker::Freeze>)),depth=0), DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::select: vtable_auto_impl: nested=Binder([])
rustc::traits::select: impl_or_trait_obligations(def_id=DefId(2/0:845 ~ core[f3a2]::marker[0]::Freeze[0]))
rustc::traits::project: normalize_with_depth(depth=1, value=Binder(TraitPredicate(<isize as std::marker::Freeze>)))
rustc::traits::project: normalize_with_depth: depth=1 result=Binder(TraitPredicate(<isize as std::marker::Freeze>)) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: vtable_auto_impl: obligations=[Obligation(predicate=Binder(TraitPredicate(<isize as std::marker::Freeze>)),depth=1)]
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<isize as std::marker::Freeze>)),depth=1))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<isize as std::marker::Freeze>)),depth=1))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<isize as std::marker::Freeze>)),depth=1)) - in global
rustc::traits::select: evaluate_stack(Binder(<isize as std::marker::Freeze>)) --> recursive
rustc::traits::select: coinductive_predicate(Binder(TraitPredicate(<isize as std::marker::Freeze>))) = true
rustc::traits::select: evaluate_stack(Binder(<isize as std::marker::Freeze>)) --> recursive, coinductive
rustc::traits::select: CACHE MISS: EVAL(Binder(<isize as std::marker::Freeze>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<isize as std::marker::Freeze>), candidate=EvaluatedToOk) global
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<isize as std::marker::Freeze>)),depth=1)) = EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<isize as std::marker::Freeze>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<isize as std::marker::Freeze>), candidate=EvaluatedToOk) global
rustc::traits: type_known_to_meet_ty=isize bound=std::marker::Freeze => true
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=unwind::libunwind::_Unwind_Action, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u64, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*mut unwind::libunwind::_Unwind_Exception, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=unwind::libunwind::_Unwind_Exception, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: type_known_to_meet_bound(ty=unwind::libunwind::_Unwind_Exception, bound="std::marker::Sized")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<unwind::libunwind::_Unwind_Exception as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<unwind::libunwind::_Unwind_Exception as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<unwind::libunwind::_Unwind_Exception as std::marker::Sized>)),depth=0)) - in global
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<unwind::libunwind::_Unwind_Exception as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<unwind::libunwind::_Unwind_Exception as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: builtin_bound: nested=Binder([])
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<unwind::libunwind::_Unwind_Exception as std::marker::Sized>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<unwind::libunwind::_Unwind_Exception as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<unwind::libunwind::_Unwind_Exception as std::marker::Sized>)),depth=0)): [BuiltinCandidate { has_nested: false }]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<unwind::libunwind::_Unwind_Exception as std::marker::Sized>)))=Ok(Some(BuiltinCandidate { has_nested: false }))
rustc::traits::select: insert_candidate_cache(trait_ref=<unwind::libunwind::_Unwind_Exception as std::marker::Sized>, candidate=Ok(Some(BuiltinCandidate { has_nested: false }))) global
rustc::traits::select: evaluate_candidate: depth=0 candidate=BuiltinCandidate { has_nested: false }
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<unwind::libunwind::_Unwind_Exception as std::marker::Sized>)),depth=0), BuiltinCandidate { has_nested: false })
rustc::traits::select: confirm_builtin_candidate(Obligation(predicate=Binder(TraitPredicate(<unwind::libunwind::_Unwind_Exception as std::marker::Sized>)),depth=0), false)
rustc::traits::select: confirm_builtin_candidate: obligations=[]
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<unwind::libunwind::_Unwind_Exception as std::marker::Sized>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<unwind::libunwind::_Unwind_Exception as std::marker::Sized>), candidate=EvaluatedToOk) global
rustc::traits: type_known_to_meet_ty=unwind::libunwind::_Unwind_Exception bound=std::marker::Sized => true
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=unwind::libunwind::_Unwind_Exception, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u64, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=extern "C" fn(unwind::libunwind::_Unwind_Reason_Code, *mut unwind::libunwind::_Unwind_Exception), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[usize; _], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize: normalize::<&rustc::ty::TyS>(value=[usize; _], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=[], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::List<ty::subst::Kind>>(value=[], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: type_known_to_meet_bound(ty=usize, bound="std::marker::Freeze")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<usize as std::marker::Freeze>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<usize as std::marker::Freeze>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<usize as std::marker::Freeze>)),depth=0)) - in global
rustc::traits::select: CACHE HIT: EVAL(Binder(<usize as std::marker::Freeze>))=EvaluatedToOk
rustc::traits: type_known_to_meet_ty=usize bound=std::marker::Freeze => true
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [], reveal: UserFacing })
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[]
rustc::traits: fully_normalize_with_fulfillcx(value=[])
rustc::traits::project: normalize_with_depth(depth=0, value=[])
rustc::traits::project: normalize_with_depth: depth=0 result=[] with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits: fully_normalize: normalized_value=[] obligations=[]
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[]
rustc::traits: normalize_param_env_or_error: normalized predicates=[]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[]
rustc::traits: type_known_to_meet_bound(ty=[usize; _], bound="std::marker::Sized")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<[usize; _] as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<[usize; _] as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<[usize; _] as std::marker::Sized>)),depth=0)) - in global
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<[usize; _] as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<[usize; _] as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: builtin_bound: nested=Binder([])
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<[usize; _] as std::marker::Sized>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<[usize; _] as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<[usize; _] as std::marker::Sized>)),depth=0)): [BuiltinCandidate { has_nested: false }]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<[usize; _] as std::marker::Sized>)))=Ok(Some(BuiltinCandidate { has_nested: false }))
rustc::traits::select: insert_candidate_cache(trait_ref=<[usize; _] as std::marker::Sized>, candidate=Ok(Some(BuiltinCandidate { has_nested: false }))) global
rustc::traits::select: evaluate_candidate: depth=0 candidate=BuiltinCandidate { has_nested: false }
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<[usize; _] as std::marker::Sized>)),depth=0), BuiltinCandidate { has_nested: false })
rustc::traits::select: confirm_builtin_candidate(Obligation(predicate=Binder(TraitPredicate(<[usize; _] as std::marker::Sized>)),depth=0), false)
rustc::traits::select: confirm_builtin_candidate: obligations=[]
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<[usize; _] as std::marker::Sized>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<[usize; _] as std::marker::Sized>), candidate=EvaluatedToOk) global
rustc::traits: type_known_to_meet_ty=[usize; _] bound=std::marker::Sized => true
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*mut unwind::libunwind::_Unwind_Context, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=unwind::libunwind::_Unwind_Context, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: type_known_to_meet_bound(ty=unwind::libunwind::_Unwind_Context, bound="std::marker::Sized")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<unwind::libunwind::_Unwind_Context as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<unwind::libunwind::_Unwind_Context as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<unwind::libunwind::_Unwind_Context as std::marker::Sized>)),depth=0)) - in global
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<unwind::libunwind::_Unwind_Context as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<unwind::libunwind::_Unwind_Context as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: builtin_bound: nested=Binder([])
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<unwind::libunwind::_Unwind_Context as std::marker::Sized>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<unwind::libunwind::_Unwind_Context as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<unwind::libunwind::_Unwind_Context as std::marker::Sized>)),depth=0)): [BuiltinCandidate { has_nested: false }]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<unwind::libunwind::_Unwind_Context as std::marker::Sized>)))=Ok(Some(BuiltinCandidate { has_nested: false }))
rustc::traits::select: insert_candidate_cache(trait_ref=<unwind::libunwind::_Unwind_Context as std::marker::Sized>, candidate=Ok(Some(BuiltinCandidate { has_nested: false }))) global
rustc::traits::select: evaluate_candidate: depth=0 candidate=BuiltinCandidate { has_nested: false }
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<unwind::libunwind::_Unwind_Context as std::marker::Sized>)),depth=0), BuiltinCandidate { has_nested: false })
rustc::traits::select: confirm_builtin_candidate(Obligation(predicate=Binder(TraitPredicate(<unwind::libunwind::_Unwind_Context as std::marker::Sized>)),depth=0), false)
rustc::traits::select: confirm_builtin_candidate: obligations=[]
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<unwind::libunwind::_Unwind_Context as std::marker::Sized>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<unwind::libunwind::_Unwind_Context as std::marker::Sized>), candidate=EvaluatedToOk) global
rustc::traits: type_known_to_meet_ty=unwind::libunwind::_Unwind_Context bound=std::marker::Sized => true
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=unwind::libunwind::_Unwind_Context, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=unwind::libunwind::_Unwind_Exception, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u64, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=extern "C" fn(unwind::libunwind::_Unwind_Reason_Code, *mut unwind::libunwind::_Unwind_Exception), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([unwind::libunwind::_Unwind_Reason_Code, *mut unwind::libunwind::_Unwind_Exception]; variadic: false)->(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=unwind::libunwind::_Unwind_Reason_Code, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*mut unwind::libunwind::_Unwind_Exception, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=unwind::libunwind::_Unwind_Exception, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[usize; _], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=usize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=unwind::libunwind::_Unwind_Context, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([i32, unwind::libunwind::_Unwind_Action, u64, *mut unwind::libunwind::_Unwind_Exception, *mut unwind::libunwind::_Unwind_Context]; variadic: false)->unwind::libunwind::_Unwind_Reason_Code, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=unwind::libunwind::_Unwind_Reason_Code, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=unwind::libunwind::_Unwind_Action, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u64, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*mut unwind::libunwind::_Unwind_Exception, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*mut unwind::libunwind::_Unwind_Context, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=unwind::libunwind::_Unwind_Reason_Code, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], value=Self, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], value=Self, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], value=<Self as std::ops::FnOnce<Args>>::Output, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>::Output, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], value=Self, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], value=Args, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], value=&mut Self, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], value=Args, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], value=<Self as std::ops::FnOnce<Args>>::Output, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>::Output, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], value=&mut Self, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], value=for<'r> extern "rust-call" fn(&'r mut Self, Args) -> <Self as std::ops::FnOnce<Args>>::Output {<Self as std::ops::FnMut<Args>>::call_mut}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=for<'r> extern "rust-call" fn(&'r mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()) -> <[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>::Output {<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>::call_mut}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], value=Const { ty: for<'r> extern "rust-call" fn(&'r mut Self, Args) -> <Self as std::ops::FnOnce<Args>>::Output {<Self as std::ops::FnMut<Args>>::call_mut}, val: Scalar(Bits { size: 0, bits: 0 }) }, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::sty::Const>(value=Const { ty: for<'r> extern "rust-call" fn(&'r mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()) -> <[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>::Output {<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>::call_mut}, val: Scalar(Bits { size: 0, bits: 0 }) }, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=for<'r> extern "rust-call" fn(&'r mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()) -> <[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>::Output {<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnMut<()>>::call_mut}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([&mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()]; variadic: false)-><[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>::Output, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize: normalize::<&rustc::ty::TyS>(value=&mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], value=&mut Self, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], value=Args, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[(), i8, extern "rust-call" fn(()) -> i32, fn()], value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:<upvar>], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=for<'r> extern "rust-call" fn(&'r [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()) -> i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()]; variadic: false)->i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=&[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(*mut u8, i32), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*mut u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*mut u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], value=Self, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]], value=unsafe fn(*mut T) {std::ptr::drop_in_place::<T>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=unsafe fn(*mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]) {std::ptr::drop_in_place::<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*mut u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: type_known_to_meet_bound(ty=*mut u8, bound="std::marker::Sized")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<*mut u8 as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<*mut u8 as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<*mut u8 as std::marker::Sized>)),depth=0)) - in global
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<*mut u8 as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<*mut u8 as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: builtin_bound: nested=Binder([])
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<*mut u8 as std::marker::Sized>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<*mut u8 as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<*mut u8 as std::marker::Sized>)),depth=0)): [BuiltinCandidate { has_nested: false }]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<*mut u8 as std::marker::Sized>)))=Ok(Some(BuiltinCandidate { has_nested: false }))
rustc::traits::select: insert_candidate_cache(trait_ref=<*mut u8 as std::marker::Sized>, candidate=Ok(Some(BuiltinCandidate { has_nested: false }))) global
rustc::traits::select: evaluate_candidate: depth=0 candidate=BuiltinCandidate { has_nested: false }
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<*mut u8 as std::marker::Sized>)),depth=0), BuiltinCandidate { has_nested: false })
rustc::traits::select: confirm_builtin_candidate(Obligation(predicate=Binder(TraitPredicate(<*mut u8 as std::marker::Sized>)),depth=0), false)
rustc::traits::select: confirm_builtin_candidate: obligations=[]
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<*mut u8 as std::marker::Sized>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<*mut u8 as std::marker::Sized>), candidate=EvaluatedToOk) global
rustc::traits: type_known_to_meet_ty=*mut u8 bound=std::marker::Sized => true
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits: type_known_to_meet_bound(ty=i32, bound="std::marker::Sized")
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<i32 as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<i32 as std::marker::Sized>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<i32 as std::marker::Sized>)),depth=0)) - in global
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<i32 as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<i32 as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: builtin_bound: nested=Binder([])
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<i32 as std::marker::Sized>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<i32 as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<i32 as std::marker::Sized>)),depth=0)): [BuiltinCandidate { has_nested: false }]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<i32 as std::marker::Sized>)))=Ok(Some(BuiltinCandidate { has_nested: false }))
rustc::traits::select: insert_candidate_cache(trait_ref=<i32 as std::marker::Sized>, candidate=Ok(Some(BuiltinCandidate { has_nested: false }))) global
rustc::traits::select: evaluate_candidate: depth=0 candidate=BuiltinCandidate { has_nested: false }
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<i32 as std::marker::Sized>)),depth=0), BuiltinCandidate { has_nested: false })
rustc::traits::select: confirm_builtin_candidate(Obligation(predicate=Binder(TraitPredicate(<i32 as std::marker::Sized>)),depth=0), false)
rustc::traits::select: confirm_builtin_candidate: obligations=[]
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<i32 as std::marker::Sized>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<i32 as std::marker::Sized>), candidate=EvaluatedToOk) global
rustc::traits: type_known_to_meet_ty=i32 bound=std::marker::Sized => true
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], value=Self, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]], value=unsafe fn(*mut T) {std::ptr::drop_in_place::<T>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=unsafe fn(*mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]) {std::ptr::drop_in_place::<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], ()], value=<Self as std::ops::FnOnce<Args>>::Output, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()] as std::ops::FnOnce<()>>::Output, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=i32, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]], value=unsafe fn(*mut T) {std::ptr::drop_in_place::<T>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=unsafe fn(*mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]) {std::ptr::drop_in_place::<[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([*mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]]; variadic: false)->(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]], value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]], value=*mut T, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*mut [closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()], param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[[closure@DefId(1/1:1823 ~ std[b095]::rt[0]::lang_start[0]::{{closure}}[0]) 0:fn()]], value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=fn() {main}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn() {main}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([]; variadic: false)->(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=fn() {main}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn() {main}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([]; variadic: false)->(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[], value=fn() {main}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn() {main}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=fn(fn() -> T, isize, *const *const u8) -> isize {std::rt::lang_start::<T>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(fn(), isize, *const *const u8) -> isize {std::rt::lang_start::<()>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::codegen: subst_and_normalize_erasing_regions(param_substs=[()], value=fn(fn() -> T, isize, *const *const u8) -> isize {std::rt::lang_start::<T>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(fn(), isize, *const *const u8) -> isize {std::rt::lang_start::<()>}, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(fn(), isize, *const *const u8) -> isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([fn(), isize, *const *const u8]; variadic: false)->isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*const *const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([]; variadic: false)->(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<ty::sty::FnSig>(value=([fn(), isize, *const *const u8]; variadic: false)->isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=fn(), param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=*const *const u8, param_env=ParamEnv { caller_bounds: [], reveal: All })
rustc::traits::query::normalize_erasing_regions: normalize_erasing_regions::<&ty::TyS>(value=isize, param_env=ParamEnv { caller_bounds: [], reveal: All })
