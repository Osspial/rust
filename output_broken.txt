rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))], reveal: UserFacing })
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits: fully_normalize_with_fulfillcx(value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))])
rustc::traits::project: normalize_with_depth(depth=0, value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))])
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(0/0:4 ~ impl_assoc[317d]::Geometry[0])) = []
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))] with 1 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits: fully_normalize: normalized_value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))] obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - ok, new index is 0
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=1)
rustc_data_structures::obligation_forest: process_obligations: node 0 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Geometry>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 0 got result Changed([])
rustc_data_structures::obligation_forest: process_cycles()
rustc_data_structures::obligation_forest: process_cycles: complete
rustc_data_structures::obligation_forest: process_obligations: complete
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits: normalize_param_env_or_error: normalized predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::project: normalize_with_depth(depth=0, value=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))]))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))]) with 1 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - ok, new index is 0
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - ok, new index is 1
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=<Self as Geometry>::D,depth=0), stalled_on: [] }, None) - ok, new index is 2
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Geometry>::D)
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0])) = []
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Point no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Vector no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0) with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - ok, new index is 3
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - ok, new index is 4
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - ok, new index is 5
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0), stalled_on: [] }, None) - ok, new index is 6
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 6 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - ok, new index is 7
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 6 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 6 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=<Self as Geometry>::D,depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 3 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 2 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 6 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Self,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, None) - ok, new index is 8
rustc::traits::fulfill: select(obligation-forest-size=9)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=9)
rustc_data_structures::obligation_forest: process_obligations: node 0 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Geometry>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 0 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 1 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as std::marker::Sized>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 1 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 2 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=<Self as Geometry>::D,depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc_data_structures::obligation_forest: process_obligations: node 2 got result Changed([PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }])
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 6 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 9 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: process_obligations: node 3 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 3 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 4 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(0/0:12 ~ impl_assoc[317d]::EuclideanSpace[0])) = [SizedSelf, SupertraitSelf]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(2/0:1265 ~ core[f3a2]::clone[0]::Clone[0])) = [SizedSelf]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(2/0:834 ~ core[f3a2]::marker[0]::Sized[0])) = [SizedSelf]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Sub<RHS>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as std::ops::Sub<RHS>>::Output as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<RHS as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Sub<RHS>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Sub<RHS>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as std::ops::Sub<RHS>>::Output as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<RHS as std::marker::Sized>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(2/0:869 ~ core[f3a2]::ops[0]::arith[0]::Sub[0])) = []
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<Self as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(2/0:836 ~ core[f3a2]::marker[0]::Copy[0])) = [SizedSelf]
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 4 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 5 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [NodeIndex { index: 3 }] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 5 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 6 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::project: poly_project_and_unify_type(obligation=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0))
rustc::traits::project: project_and_unify_type(obligation=Obligation(predicate=ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)) is_match=true same_def_id=true
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: confirm_candidate(candidate=TraitDef(Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector))), obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Vector depth=0 projected_obligations=[]
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=1)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=1)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type: normalized_ty=<<Self as Geometry>::D as Dimensionality>::Vector depth=0
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])
rustc::traits::project: project_and_unify_type: normalized_ty=<<Self as Geometry>::D as Dimensionality>::Vector obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1)]
rustc_data_structures::obligation_forest: process_obligations: node 6 got result Changed([PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1), stalled_on: [] }])
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 6 }!
rustc_data_structures::obligation_forest: process_obligations: node 7 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 7 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 8 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [NodeIndex { index: 3 }] }
rustc_data_structures::obligation_forest: process_obligations: node 8 got result Changed([])
rustc_data_structures::obligation_forest: process_cycles()
rustc_data_structures::obligation_forest: process_cycles: complete
rustc_data_structures::obligation_forest: process_obligations: complete
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Self,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=<Self as Geometry>::D,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))], reveal: UserFacing })
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits: fully_normalize_with_fulfillcx(value=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))])
rustc::traits::project: normalize_with_depth(depth=0, value=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))])
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)): [ParamCandidate(Binder(<Self as Dimensionality>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), ParamCandidate(Binder(<Self as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),Binder(<Self as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Dimensionality>::Vector no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) } }, value=Normalized(<Self as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), ParamCandidate(Binder(<Self as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),Binder(<Self as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Dimensionality>::Point no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) } }, value=Normalized(<Self as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Dimensionality>::Point as EuclideanSpace>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)) is_match=true same_def_id=true
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)) is_match=true same_def_id=true
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Dimensionality>::Point as EuclideanSpace>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::project: confirm_candidate(candidate=ParamEnv(Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector))), obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Dimensionality>::Vector depth=0 projected_obligations=[]
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=1)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type: normalized_ty=<Self as Dimensionality>::Vector depth=0
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) } }, value=Normalized(<Self as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <Self as Dimensionality>::Vector, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <Self as Dimensionality>::Vector, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))] with 12 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=1), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits: fully_normalize: normalized_value=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))] obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=1), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - ok, new index is 0
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=1))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=1), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - ok, new index is 1
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=2)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=2)
rustc_data_structures::obligation_forest: process_obligations: node 0 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), ParamCandidate(Binder(<Self as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),Binder(<Self as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Dimensionality>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 0 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 1 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 1 got result Changed([])
rustc_data_structures::obligation_forest: process_cycles()
rustc_data_structures::obligation_forest: process_cycles: complete
rustc_data_structures::obligation_forest: process_obligations: complete
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits: normalize_param_env_or_error: normalized predicates=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::project: normalize_with_depth(depth=0, value=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))]))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)): [ParamCandidate(Binder(<Self as Dimensionality>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), ParamCandidate(Binder(<Self as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),Binder(<Self as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Dimensionality>::Point no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) } }, value=Normalized(<Self as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), ParamCandidate(Binder(<Self as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),Binder(<Self as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Dimensionality>::Vector no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) } }, value=Normalized(<Self as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))]) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - ok, new index is 0
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Dimensionality>::Point,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Dimensionality>::Point,depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - ok, new index is 1
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as Dimensionality>::Point,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=<Self as Dimensionality>::Point,depth=0), stalled_on: [] }, None) - ok, new index is 2
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Dimensionality>::Point as EuclideanSpace>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)) is_match=true same_def_id=true
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)) is_match=true same_def_id=true
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Dimensionality>::Point as EuclideanSpace>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::project: confirm_candidate(candidate=ParamEnv(Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector))), obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Dimensionality>::Vector depth=0 projected_obligations=[]
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=1)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type: normalized_ty=<Self as Dimensionality>::Vector depth=0
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) } }, value=Normalized(<Self as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <Self as Dimensionality>::Vector, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 13 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 14 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 15 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)),depth=0) with 15 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=1), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <Self as Dimensionality>::Vector, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 14 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 15 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 16 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)),depth=0) with 16 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 14 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 14 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Dimensionality>::Point,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Dimensionality>::Point,depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0), stalled_on: [] }, None) - ok, new index is 3
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)),depth=0), stalled_on: [] }, None) - ok, new index is 4
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=1))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=1), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0), stalled_on: [] }, None) - ok, new index is 5
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)),depth=0), stalled_on: [] }, None) - ok, new index is 6
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - ok, new index is 7
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - ok, new index is 8
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 8 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 8 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as Dimensionality>::Point,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=<Self as Dimensionality>::Point,depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 3 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <Self as Dimensionality>::Vector, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 13 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 14 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 15 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)),depth=0) with 15 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <Self as Dimensionality>::Vector, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 14 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 15 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 16 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)),depth=0) with 16 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 14 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 14 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Dimensionality>::Point,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Dimensionality>::Point,depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 14 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)),depth=0) with 14 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 4 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 5 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 8 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 6 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 7 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 8 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 9 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 8 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 8 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as Dimensionality>::Point,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=<Self as Dimensionality>::Point,depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 3 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 8 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 2 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 8 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)),depth=0), stalled_on: [] }, None) - ok, new index is 9
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 9 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Self,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, None) - ok, new index is 10
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Dimensionality>::Vector,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Dimensionality>::Vector,depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 9 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as Dimensionality>::Vector,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=<Self as Dimensionality>::Vector,depth=0), stalled_on: [] }, None) - ok, new index is 11
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 14 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)),depth=0) with 14 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 2 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 8 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 10 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 9 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Self,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 11 }!
rustc::traits::fulfill: select(obligation-forest-size=12)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=12)
rustc_data_structures::obligation_forest: process_obligations: node 0 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), ParamCandidate(Binder(<Self as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),Binder(<Self as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Dimensionality>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 0 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 1 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>)
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::marker::Sized>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0),Binder(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::marker::Sized>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Sized>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Sized>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Sized>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Dimensionality>::Point as std::marker::Sized>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Sized>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0),Binder(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::marker::Sized>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 1 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 2 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=<Self as Dimensionality>::Point,depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 14 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)),depth=0) with 14 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc_data_structures::obligation_forest: process_obligations: node 2 got result Changed([PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }])
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 8 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 10 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 9 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 11 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: process_obligations: node 3 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: obligation self ty is <Self as Dimensionality>::Point
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::marker::Copy>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::marker::Copy> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:862 ~ core[f3a2]::marker[0]::copy_impls[0]::{{impl}}[3]), obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0), impl_trait_ref=<&_ as std::marker::Copy>, skol_obligation_trait_ref=<<Self as Dimensionality>::Point as std::marker::Copy>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found reference`
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::marker::Copy>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Copy>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Copy>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0),Binder(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::marker::Copy>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Copy>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Copy>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Copy>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Dimensionality>::Point as std::marker::Copy>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Copy>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::marker::Copy>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0),Binder(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::marker::Copy>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 3 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 4 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Dimensionality>::Point)
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Sub<RHS>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as std::ops::Sub<RHS>>::Output as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<RHS as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Sub<RHS>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Sub<RHS>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as std::ops::Sub<RHS>>::Output as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<RHS as std::marker::Sized>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(2/0:869 ~ core[f3a2]::ops[0]::arith[0]::Sub[0])) = []
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=None
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)),depth=0)): [ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)),depth=0),Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 4 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 5 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::clone::Clone>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::clone::Clone> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1279 ~ core[f3a2]::clone[0]::impls[0]::{{impl}}[3]), obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0), impl_trait_ref=<&_ as std::clone::Clone>, skol_obligation_trait_ref=<<Self as Dimensionality>::Point as std::clone::Clone>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found reference`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Dimensionality>::Point)
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(2/0:1265 ~ core[f3a2]::clone[0]::Clone[0])) = [SizedSelf]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(2/0:834 ~ core[f3a2]::marker[0]::Sized[0])) = [SizedSelf]
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::clone::Clone>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::clone::Clone>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0),Binder(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::clone::Clone>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::clone::Clone>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::clone::Clone>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::clone::Clone>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Dimensionality>::Point as std::clone::Clone>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::clone::Clone>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::clone::Clone>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0),Binder(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::clone::Clone>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 5 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 6 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::project: poly_project_and_unify_type(obligation=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)),depth=0))
rustc::traits::project: project_and_unify_type(obligation=Obligation(predicate=ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=true same_def_id=true
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)) is_match=false same_def_id=false
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=true
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)),depth=0),Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)
rustc::traits::project: confirm_candidate(candidate=ParamEnv(Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))), obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Dimensionality>::Point depth=0 projected_obligations=[]
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=1)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type: normalized_ty=<Self as Dimensionality>::Point depth=0
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) } }, value=Normalized(<Self as Dimensionality>::Point,[])
rustc::traits::project: project_and_unify_type: normalized_ty=<Self as Dimensionality>::Point obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=1)]
rustc_data_structures::obligation_forest: process_obligations: node 6 got result Changed([PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=1), stalled_on: [] }])
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=1), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: process_obligations: node 7 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [NodeIndex { index: 3 }] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 7 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 8 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [NodeIndex { index: 3 }] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>)
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as std::marker::Sized>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0),Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Dimensionality>::Vector as std::marker::Sized>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0),Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Vector as std::marker::Sized>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 8 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 9 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [NodeIndex { index: 3 }] }
rustc::traits::project: poly_project_and_unify_type(obligation=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)),depth=0))
rustc::traits::project: project_and_unify_type(obligation=Obligation(predicate=ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: project_and_unify_type: normalized_ty=<Self as Dimensionality>::Vector obligations=[Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)]
rustc_data_structures::obligation_forest: process_obligations: node 9 got result Changed([PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }])
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 10 })) - duplicate of NodeIndex { index: 8 }!
rustc_data_structures::obligation_forest: process_obligations: node 10 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [NodeIndex { index: 3 }] }
rustc_data_structures::obligation_forest: process_obligations: node 10 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 11 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=<Self as Dimensionality>::Vector,depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 14 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)),depth=0) with 14 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 13 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc_data_structures::obligation_forest: process_obligations: node 11 got result Changed([PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }])
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 8 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 10 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 9 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 11 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 12 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: process_cycles()
rustc_data_structures::obligation_forest: process_cycles: complete
rustc_data_structures::obligation_forest: process_obligations: complete
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=<Self as Dimensionality>::Vector,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Self,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=<Self as Dimensionality>::Point,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<Self as EuclideanSpace>))], reveal: UserFacing })
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<Self as std::clone::Clone>))]
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))]
rustc::traits: fully_normalize_with_fulfillcx(value=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))])
rustc::traits::project: normalize_with_depth(depth=0, value=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))])
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as EuclideanSpace>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<Self as EuclideanSpace>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)): [ParamCandidate(Binder(<Self as EuclideanSpace>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<Self as EuclideanSpace>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as EuclideanSpace>, candidate=Ok(Some(ParamCandidate(Binder(<Self as EuclideanSpace>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<Self as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0),Binder(<Self as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<Self as EuclideanSpace>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as EuclideanSpace>::Diff no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) } }, value=Normalized(<Self as EuclideanSpace>::Diff,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))] with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits: fully_normalize: normalized_value=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))] obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - ok, new index is 0
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=1)
rustc_data_structures::obligation_forest: process_obligations: node 0 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<Self as EuclideanSpace>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<Self as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0),Binder(<Self as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<Self as EuclideanSpace>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as EuclideanSpace>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 0 got result Changed([])
rustc_data_structures::obligation_forest: process_cycles()
rustc_data_structures::obligation_forest: process_cycles: complete
rustc_data_structures::obligation_forest: process_obligations: complete
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))]
rustc::traits: normalize_param_env_or_error: normalized predicates=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<Self as std::clone::Clone>))]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::project: normalize_with_depth(depth=0, value=InstantiatedPredicates([Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<Self as EuclideanSpace>))]))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as EuclideanSpace>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<Self as EuclideanSpace>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)): [ParamCandidate(Binder(<Self as EuclideanSpace>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<Self as EuclideanSpace>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as EuclideanSpace>, candidate=Ok(Some(ParamCandidate(Binder(<Self as EuclideanSpace>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<Self as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0),Binder(<Self as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<Self as EuclideanSpace>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as EuclideanSpace>::Diff no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) } }, value=Normalized(<Self as EuclideanSpace>::Diff,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=InstantiatedPredicates([Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<Self as EuclideanSpace>))]) with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - ok, new index is 0
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0), stalled_on: [] }, None) - ok, new index is 1
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0), stalled_on: [] }, None) - ok, new index is 2
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Self,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, None) - ok, new index is 3
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>::Output as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)) is_match=true same_def_id=true
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0) poly_trait_ref=Binder(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0)): [ParamCandidate(Binder(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)))=Ok(Some(ParamCandidate(Binder(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>, candidate=Ok(Some(ParamCandidate(Binder(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0), ParamCandidate(Binder(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0),Binder(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0) poly_trait_ref=Binder(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)
rustc::traits::project: confirm_candidate(candidate=ParamEnv(Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))), obligation=Obligation(predicate=ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: opt_normalize_projection_type: projected_ty=Self depth=0 projected_obligations=[]
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) } }, value=Normalized(Self,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>::Output to Self, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as EuclideanSpace>::Diff,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as EuclideanSpace>::Diff,depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - ok, new index is 4
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - ok, new index is 5
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0), stalled_on: [] }, None) - ok, new index is 6
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Self,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 4 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as EuclideanSpace>::Diff,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=<Self as EuclideanSpace>::Diff,depth=0), stalled_on: [] }, None) - ok, new index is 7
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 6 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 2 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Self,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 4 }!
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>::Output as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(Self,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>::Output to Self, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0) with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as EuclideanSpace>::Diff,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as EuclideanSpace>::Diff,depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 5 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 6 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 7 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 7 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Self,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 4 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as EuclideanSpace>::Diff,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=<Self as EuclideanSpace>::Diff,depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 8 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 7 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as EuclideanSpace>::Diff,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as EuclideanSpace>::Diff,depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 5 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as EuclideanSpace>::Diff,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=<Self as EuclideanSpace>::Diff,depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 8 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 3 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 7 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 2 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)),depth=0), stalled_on: [] }, None) - ok, new index is 8
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 5 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Self,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 4 }!
rustc::traits::fulfill: select(obligation-forest-size=9)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=9)
rustc_data_structures::obligation_forest: process_obligations: node 0 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<Self as EuclideanSpace>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<Self as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0),Binder(<Self as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<Self as EuclideanSpace>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as EuclideanSpace>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 0 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 1 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as std::clone::Clone>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::clone::Clone>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::clone::Clone> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1279 ~ core[f3a2]::clone[0]::impls[0]::{{impl}}[3]), obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0), impl_trait_ref=<&_ as std::clone::Clone>, skol_obligation_trait_ref=<Self as std::clone::Clone>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected Self, found reference`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0) poly_trait_ref=Binder(<Self as std::clone::Clone>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0)): [ParamCandidate(Binder(<Self as std::clone::Clone>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as std::clone::Clone>)))=Ok(Some(ParamCandidate(Binder(<Self as std::clone::Clone>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as std::clone::Clone>, candidate=Ok(Some(ParamCandidate(Binder(<Self as std::clone::Clone>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0), ParamCandidate(Binder(<Self as std::clone::Clone>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0),Binder(<Self as std::clone::Clone>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0) poly_trait_ref=Binder(<Self as std::clone::Clone>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as std::clone::Clone>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 1 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 2 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as std::marker::Copy>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: obligation self ty is Self
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::marker::Copy>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::marker::Copy> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:862 ~ core[f3a2]::marker[0]::copy_impls[0]::{{impl}}[3]), obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0), impl_trait_ref=<&_ as std::marker::Copy>, skol_obligation_trait_ref=<Self as std::marker::Copy>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected Self, found reference`
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0) poly_trait_ref=Binder(<Self as std::marker::Copy>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0)): [ParamCandidate(Binder(<Self as std::marker::Copy>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as std::marker::Copy>)))=Ok(Some(ParamCandidate(Binder(<Self as std::marker::Copy>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as std::marker::Copy>, candidate=Ok(Some(ParamCandidate(Binder(<Self as std::marker::Copy>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0), ParamCandidate(Binder(<Self as std::marker::Copy>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0),Binder(<Self as std::marker::Copy>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0) poly_trait_ref=Binder(<Self as std::marker::Copy>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as std::marker::Copy>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 2 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 3 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc_data_structures::obligation_forest: process_obligations: node 3 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 4 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:12 ~ impl_assoc[317d]::EuclideanSpace[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<Self as EuclideanSpace>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<Self as std::marker::Sized>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:12 ~ impl_assoc[317d]::EuclideanSpace[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<Self as EuclideanSpace>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0),Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)))=Ok(Some(ParamCandidate(Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as EuclideanSpace>::Diff as std::marker::Sized>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0),Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 4 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 5 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<Self as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0)): [ParamCandidate(Binder(<Self as std::marker::Sized>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as std::marker::Sized>)))=Ok(Some(ParamCandidate(Binder(<Self as std::marker::Sized>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as std::marker::Sized>, candidate=Ok(Some(ParamCandidate(Binder(<Self as std::marker::Sized>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<Self as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0),Binder(<Self as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<Self as std::marker::Sized>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 5 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 6 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)))=Ok(Some(ParamCandidate(Binder(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0), ParamCandidate(Binder(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0),Binder(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0) poly_trait_ref=Binder(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 6 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 7 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=<Self as EuclideanSpace>::Diff,depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc_data_structures::obligation_forest: process_obligations: node 7 got result Changed([PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }])
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 8 })) - duplicate of NodeIndex { index: 3 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 8 })) - duplicate of NodeIndex { index: 7 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 8 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 8 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 8 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 8 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 8 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 8 })) - duplicate of NodeIndex { index: 9 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 8 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 8 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 8 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 8 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 8 })) - duplicate of NodeIndex { index: 5 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 8 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 8 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 8 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 8 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 8 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, Some(NodeIndex { index: 8 })) - duplicate of NodeIndex { index: 4 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 8 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: process_obligations: node 8 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [NodeIndex { index: 8 }] }
rustc::traits::project: poly_project_and_unify_type(obligation=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)),depth=0))
rustc::traits::project: project_and_unify_type(obligation=Obligation(predicate=ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(Self,[])`
rustc::traits::project: project_and_unify_type: normalized_ty=Self obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0)]
rustc_data_structures::obligation_forest: process_obligations: node 8 got result Changed([PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0), stalled_on: [] }])
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 9 })) - duplicate of NodeIndex { index: 7 }!
rustc_data_structures::obligation_forest: process_cycles()
rustc_data_structures::obligation_forest: process_cycles: complete
rustc_data_structures::obligation_forest: process_obligations: complete
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=<Self as EuclideanSpace>::Diff,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Self,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::marker::Copy>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as std::clone::Clone>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [], reveal: UserFacing })
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[]
rustc::traits: fully_normalize_with_fulfillcx(value=[])
rustc::traits::project: normalize_with_depth(depth=0, value=[])
rustc::traits::project: normalize_with_depth: depth=0 result=[] with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits: fully_normalize: normalized_value=[] obligations=[]
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[]
rustc::traits: normalize_param_env_or_error: normalized predicates=[]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::project: normalize_with_depth(depth=0, value=Binder(([]; variadic: false)->()))
rustc::traits::project: normalize_with_depth: depth=0 result=Binder(([]; variadic: false)->()) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Binder(([]; variadic: false)->()))
rustc::traits::project: normalize_with_depth: depth=0 result=Binder(([]; variadic: false)->()) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=(),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=(),depth=0), stalled_on: [] }, None) - ok, new index is 0
rustc::traits::project: normalize_with_depth(depth=0, value=InstantiatedPredicates([]))
rustc::traits::project: normalize_with_depth: depth=0 result=InstantiatedPredicates([]) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=1)
rustc_data_structures::obligation_forest: process_obligations: node 0 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=(),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc_data_structures::obligation_forest: process_obligations: node 0 got result Changed([])
rustc_data_structures::obligation_forest: process_cycles()
rustc_data_structures::obligation_forest: process_cycles: complete
rustc_data_structures::obligation_forest: process_obligations: complete
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=(),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits::query::outlives_bounds: implied_outlives_bounds(ty = ())
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: implied_outlives_bounds for (): Ok(
    InferOk {
        value: [],
        obligations: []
    }
)
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))], reveal: UserFacing })
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits: fully_normalize_with_fulfillcx(value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))])
rustc::traits::project: normalize_with_depth(depth=0, value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))])
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))] with 1 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits: fully_normalize: normalized_value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))] obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - ok, new index is 0
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=1)
rustc_data_structures::obligation_forest: process_obligations: node 0 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Geometry>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 0 got result Changed([])
rustc_data_structures::obligation_forest: process_cycles()
rustc_data_structures::obligation_forest: process_cycles: complete
rustc_data_structures::obligation_forest: process_obligations: complete
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits: normalize_param_env_or_error: normalized predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))], reveal: UserFacing })
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits: fully_normalize_with_fulfillcx(value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))])
rustc::traits::project: normalize_with_depth(depth=0, value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))])
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))] with 1 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits: fully_normalize: normalized_value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))] obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - ok, new index is 0
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=1)
rustc_data_structures::obligation_forest: process_obligations: node 0 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Geometry>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 0 got result Changed([])
rustc_data_structures::obligation_forest: process_cycles()
rustc_data_structures::obligation_forest: process_cycles: complete
rustc_data_structures::obligation_forest: process_obligations: complete
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits: normalize_param_env_or_error: normalized predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::project: normalize_with_depth(depth=0, value=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Geometry>::D)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Point no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point) with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - ok, new index is 0
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - ok, new index is 1
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=&Self,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=&Self,depth=0), stalled_on: [] }, None) - ok, new index is 2
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0), stalled_on: [] }, None) - ok, new index is 3
rustc::traits::project: normalize_with_depth(depth=0, value=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))]))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))]) with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - ok, new index is 4
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=<Self as Geometry>::D,depth=0), stalled_on: [] }, None) - ok, new index is 5
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Vector no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0) with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - ok, new index is 6
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 2 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - ok, new index is 7
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 2 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0), stalled_on: [] }, None) - ok, new index is 8
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 2 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - ok, new index is 9
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 2 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 2 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=<Self as Geometry>::D,depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 6 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 5 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 2 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Self,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, None) - ok, new index is 10
rustc::traits::project: normalize_with_depth(depth=0, value=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point) with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 2 }!
rustc::traits::project: normalize_with_depth(depth=0, value=Self)
rustc::traits::project: normalize_with_depth: depth=0 result=Self with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=&Self)
rustc::traits::project: normalize_with_depth: depth=0 result=&Self with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: select(obligation-forest-size=11)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=11)
rustc_data_structures::obligation_forest: process_obligations: node 0 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Geometry>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 0 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 1 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 1 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 2 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=&Self,depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:6 ~ impl_assoc[317d]::Geometry[0]::min[0]), BrAnon(0)))),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:6 ~ impl_assoc[317d]::Geometry[0]::min[0]), BrAnon(0)))),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc_data_structures::obligation_forest: process_obligations: node 2 got result Changed([PendingPredicateObligation { obligation: Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:6 ~ impl_assoc[317d]::Geometry[0]::min[0]), BrAnon(0)))),depth=0), stalled_on: [] }])
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:6 ~ impl_assoc[317d]::Geometry[0]::min[0]), BrAnon(0)))),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - ok, new index is 11
rustc_data_structures::obligation_forest: process_obligations: node 3 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 6 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0) with 6 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc_data_structures::obligation_forest: process_obligations: node 3 got result Changed([PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=<Self as Geometry>::D,depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }])
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 7 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 8 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 9 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 10 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=<Self as Geometry>::D,depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 6 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: process_obligations: node 4 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as std::marker::Sized>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 4 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 5 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=<Self as Geometry>::D,depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [NodeIndex { index: 4 }] }
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc_data_structures::obligation_forest: process_obligations: node 5 got result Changed([PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }])
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 5 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 11 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: process_obligations: node 6 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [NodeIndex { index: 4 }] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 6 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 7 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [NodeIndex { index: 4 }] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 7 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 8 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [NodeIndex { index: 4 }] }
rustc::traits::project: poly_project_and_unify_type(obligation=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0))
rustc::traits::project: project_and_unify_type(obligation=Obligation(predicate=ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)) is_match=true same_def_id=true
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: confirm_candidate(candidate=TraitDef(Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector))), obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Vector depth=0 projected_obligations=[]
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=1)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=1)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type: normalized_ty=<<Self as Geometry>::D as Dimensionality>::Vector depth=0
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])
rustc::traits::project: project_and_unify_type: normalized_ty=<<Self as Geometry>::D as Dimensionality>::Vector obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1)]
rustc_data_structures::obligation_forest: process_obligations: node 8 got result Changed([PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1), stalled_on: [] }])
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1), stalled_on: [] }, Some(NodeIndex { index: 9 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1), stalled_on: [] }, Some(NodeIndex { index: 9 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: process_obligations: node 9 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [NodeIndex { index: 4 }] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 9 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 10 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [NodeIndex { index: 6 }] }
rustc_data_structures::obligation_forest: process_obligations: node 10 got result Changed([])
rustc_data_structures::obligation_forest: process_cycles()
rustc_data_structures::obligation_forest: process_cycles: complete
rustc_data_structures::obligation_forest: process_obligations: complete
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Self,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=<Self as Geometry>::D,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=2)
rustc_data_structures::obligation_forest: process_obligations: node 0 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=&Self,depth=0), stalled_on: [] }, state: Cell { value: Waiting }, parent: None, dependents: [] }
rustc_data_structures::obligation_forest: process_obligations: node 1 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:6 ~ impl_assoc[317d]::Geometry[0]::min[0]), BrAnon(0)))),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: Some(NodeIndex { index: 1 }), dependents: [] }
rustc_data_structures::obligation_forest: process_obligations: node 1 got result Changed([])
rustc_data_structures::obligation_forest: process_cycles()
rustc_data_structures::obligation_forest: process_cycles: complete
rustc_data_structures::obligation_forest: process_obligations: complete
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:6 ~ impl_assoc[317d]::Geometry[0]::min[0]), BrAnon(0)))),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=&Self,depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits::query::outlives_bounds: implied_outlives_bounds(ty = &Self)
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(OutlivesPredicate(Self, '_#0r)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(OutlivesPredicate(Self, '_#0r)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: implied_outlives_bounds for &Self: Ok(
    InferOk {
        value: [
            RegionSubParam(
                ReFree(DefId(0/0:6 ~ impl_assoc[317d]::Geometry[0]::min[0]), BrAnon(0)),
                Self/#0
            )
        ],
        obligations: []
    }
)
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: implied_outlives_bounds(ty = <<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Geometry>::D)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Point no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Vector no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0) with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: implied_outlives_bounds for <<Self as Geometry>::D as Dimensionality>::Point: Ok(
    InferOk {
        value: [],
        obligations: []
    }
)
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))], reveal: UserFacing })
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits: fully_normalize_with_fulfillcx(value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))])
rustc::traits::project: normalize_with_depth(depth=0, value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))])
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))] with 1 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits: fully_normalize: normalized_value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))] obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - ok, new index is 0
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=1)
rustc_data_structures::obligation_forest: process_obligations: node 0 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Geometry>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 0 got result Changed([])
rustc_data_structures::obligation_forest: process_cycles()
rustc_data_structures::obligation_forest: process_cycles: complete
rustc_data_structures::obligation_forest: process_obligations: complete
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits: normalize_param_env_or_error: normalized predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::project: normalize_with_depth(depth=0, value=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Geometry>::D)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Point no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point) with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - ok, new index is 0
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - ok, new index is 1
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=&Self,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=&Self,depth=0), stalled_on: [] }, None) - ok, new index is 2
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0), stalled_on: [] }, None) - ok, new index is 3
rustc::traits::project: normalize_with_depth(depth=0, value=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))]))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))]) with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - ok, new index is 4
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=<Self as Geometry>::D,depth=0), stalled_on: [] }, None) - ok, new index is 5
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Vector no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0) with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - ok, new index is 6
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 2 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - ok, new index is 7
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 2 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0), stalled_on: [] }, None) - ok, new index is 8
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 2 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - ok, new index is 9
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 2 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 2 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=<Self as Geometry>::D,depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 6 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 5 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 2 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Self,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, None) - ok, new index is 10
rustc::traits::project: normalize_with_depth(depth=0, value=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point) with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 2 }!
rustc::traits::project: normalize_with_depth(depth=0, value=Self)
rustc::traits::project: normalize_with_depth: depth=0 result=Self with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=&Self)
rustc::traits::project: normalize_with_depth: depth=0 result=&Self with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: select(obligation-forest-size=11)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=11)
rustc_data_structures::obligation_forest: process_obligations: node 0 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Geometry>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 0 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 1 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 1 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 2 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=&Self,depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:7 ~ impl_assoc[317d]::Geometry[0]::max[0]), BrAnon(0)))),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:7 ~ impl_assoc[317d]::Geometry[0]::max[0]), BrAnon(0)))),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc_data_structures::obligation_forest: process_obligations: node 2 got result Changed([PendingPredicateObligation { obligation: Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:7 ~ impl_assoc[317d]::Geometry[0]::max[0]), BrAnon(0)))),depth=0), stalled_on: [] }])
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:7 ~ impl_assoc[317d]::Geometry[0]::max[0]), BrAnon(0)))),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - ok, new index is 11
rustc_data_structures::obligation_forest: process_obligations: node 3 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 6 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0) with 6 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc_data_structures::obligation_forest: process_obligations: node 3 got result Changed([PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=<Self as Geometry>::D,depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }])
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 7 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 8 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 9 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 10 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=<Self as Geometry>::D,depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 6 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: process_obligations: node 4 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as std::marker::Sized>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 4 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 5 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=<Self as Geometry>::D,depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [NodeIndex { index: 4 }] }
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc_data_structures::obligation_forest: process_obligations: node 5 got result Changed([PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }])
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 5 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 11 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: process_obligations: node 6 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [NodeIndex { index: 4 }] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 6 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 7 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [NodeIndex { index: 4 }] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 7 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 8 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [NodeIndex { index: 4 }] }
rustc::traits::project: poly_project_and_unify_type(obligation=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0))
rustc::traits::project: project_and_unify_type(obligation=Obligation(predicate=ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)) is_match=true same_def_id=true
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: confirm_candidate(candidate=TraitDef(Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector))), obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Vector depth=0 projected_obligations=[]
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=1)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=1)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type: normalized_ty=<<Self as Geometry>::D as Dimensionality>::Vector depth=0
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])
rustc::traits::project: project_and_unify_type: normalized_ty=<<Self as Geometry>::D as Dimensionality>::Vector obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1)]
rustc_data_structures::obligation_forest: process_obligations: node 8 got result Changed([PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1), stalled_on: [] }])
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1), stalled_on: [] }, Some(NodeIndex { index: 9 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1), stalled_on: [] }, Some(NodeIndex { index: 9 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: process_obligations: node 9 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [NodeIndex { index: 4 }] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 9 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 10 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [NodeIndex { index: 6 }] }
rustc_data_structures::obligation_forest: process_obligations: node 10 got result Changed([])
rustc_data_structures::obligation_forest: process_cycles()
rustc_data_structures::obligation_forest: process_cycles: complete
rustc_data_structures::obligation_forest: process_obligations: complete
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Self,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=<Self as Geometry>::D,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=2)
rustc_data_structures::obligation_forest: process_obligations: node 0 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=&Self,depth=0), stalled_on: [] }, state: Cell { value: Waiting }, parent: None, dependents: [] }
rustc_data_structures::obligation_forest: process_obligations: node 1 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:7 ~ impl_assoc[317d]::Geometry[0]::max[0]), BrAnon(0)))),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: Some(NodeIndex { index: 1 }), dependents: [] }
rustc_data_structures::obligation_forest: process_obligations: node 1 got result Changed([])
rustc_data_structures::obligation_forest: process_cycles()
rustc_data_structures::obligation_forest: process_cycles: complete
rustc_data_structures::obligation_forest: process_obligations: complete
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:7 ~ impl_assoc[317d]::Geometry[0]::max[0]), BrAnon(0)))),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=&Self,depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits::query::outlives_bounds: implied_outlives_bounds(ty = &Self)
rustc::traits::query::outlives_bounds: implied_outlives_bounds for &Self: Ok(
    InferOk {
        value: [
            RegionSubParam(
                ReFree(DefId(0/0:7 ~ impl_assoc[317d]::Geometry[0]::max[0]), BrAnon(0)),
                Self/#0
            )
        ],
        obligations: []
    }
)
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: implied_outlives_bounds(ty = <<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::query::outlives_bounds: implied_outlives_bounds for <<Self as Geometry>::D as Dimensionality>::Point: Ok(
    InferOk {
        value: [],
        obligations: []
    }
)
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))], reveal: UserFacing })
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits: fully_normalize_with_fulfillcx(value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))])
rustc::traits::project: normalize_with_depth(depth=0, value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))])
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))] with 1 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits: fully_normalize: normalized_value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))] obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - ok, new index is 0
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=1)
rustc_data_structures::obligation_forest: process_obligations: node 0 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Geometry>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 0 got result Changed([])
rustc_data_structures::obligation_forest: process_cycles()
rustc_data_structures::obligation_forest: process_cycles: complete
rustc_data_structures::obligation_forest: process_obligations: complete
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits: normalize_param_env_or_error: normalized predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[Binder(TraitPredicate(<Self as Geometry>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::project: normalize_with_depth(depth=0, value=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Vector))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Geometry>::D)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Vector no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Vector) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Vector))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Vector) with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - ok, new index is 0
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - ok, new index is 1
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=&Self,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=&Self,depth=0), stalled_on: [] }, None) - ok, new index is 2
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Vector,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Vector,depth=0), stalled_on: [] }, None) - ok, new index is 3
rustc::traits::project: normalize_with_depth(depth=0, value=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))]))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))]) with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - ok, new index is 4
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=<Self as Geometry>::D,depth=0), stalled_on: [] }, None) - ok, new index is 5
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Point no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 6 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0) with 6 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - ok, new index is 6
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - ok, new index is 7
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 2 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0), stalled_on: [] }, None) - ok, new index is 8
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 2 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 2 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - ok, new index is 9
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 2 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 2 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=<Self as Geometry>::D,depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 6 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 5 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 2 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Self,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, None) - ok, new index is 10
rustc::traits::project: normalize_with_depth(depth=0, value=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Vector))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Binder(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Vector) with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 2 }!
rustc::traits::project: normalize_with_depth(depth=0, value=Self)
rustc::traits::project: normalize_with_depth: depth=0 result=Self with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=&Self)
rustc::traits::project: normalize_with_depth: depth=0 result=&Self with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: select(obligation-forest-size=11)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=11)
rustc_data_structures::obligation_forest: process_obligations: node 0 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Geometry>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 0 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 1 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 1 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 2 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=&Self,depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:8 ~ impl_assoc[317d]::Geometry[0]::dims[0]), BrAnon(0)))),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:8 ~ impl_assoc[317d]::Geometry[0]::dims[0]), BrAnon(0)))),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc_data_structures::obligation_forest: process_obligations: node 2 got result Changed([PendingPredicateObligation { obligation: Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:8 ~ impl_assoc[317d]::Geometry[0]::dims[0]), BrAnon(0)))),depth=0), stalled_on: [] }])
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:8 ~ impl_assoc[317d]::Geometry[0]::dims[0]), BrAnon(0)))),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - ok, new index is 11
rustc_data_structures::obligation_forest: process_obligations: node 3 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Vector,depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 6 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0) with 6 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc_data_structures::obligation_forest: process_obligations: node 3 got result Changed([PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=<Self as Geometry>::D,depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }])
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 7 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 8 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 9 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 10 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=<Self as Geometry>::D,depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 6 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: process_obligations: node 4 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as std::marker::Sized>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 4 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 5 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=<Self as Geometry>::D,depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [NodeIndex { index: 4 }] }
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc_data_structures::obligation_forest: process_obligations: node 5 got result Changed([PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }])
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 5 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 11 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 6 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: process_obligations: node 6 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [NodeIndex { index: 4 }] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 6 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 7 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [NodeIndex { index: 4 }] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 7 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 8 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [NodeIndex { index: 4 }] }
rustc::traits::project: poly_project_and_unify_type(obligation=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0))
rustc::traits::project: project_and_unify_type(obligation=Obligation(predicate=ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)) is_match=true same_def_id=true
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: confirm_candidate(candidate=TraitDef(Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector))), obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Vector depth=0 projected_obligations=[]
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=1)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=1)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type: normalized_ty=<<Self as Geometry>::D as Dimensionality>::Vector depth=0
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])
rustc::traits::project: project_and_unify_type: normalized_ty=<<Self as Geometry>::D as Dimensionality>::Vector obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1)]
rustc_data_structures::obligation_forest: process_obligations: node 8 got result Changed([PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1), stalled_on: [] }])
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1), stalled_on: [] }, Some(NodeIndex { index: 9 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1), stalled_on: [] }, Some(NodeIndex { index: 9 })) - duplicate of NodeIndex { index: 2 }!
rustc_data_structures::obligation_forest: process_obligations: node 9 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [NodeIndex { index: 4 }] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 9 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 10 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [NodeIndex { index: 6 }] }
rustc_data_structures::obligation_forest: process_obligations: node 10 got result Changed([])
rustc_data_structures::obligation_forest: process_cycles()
rustc_data_structures::obligation_forest: process_cycles: complete
rustc_data_structures::obligation_forest: process_obligations: complete
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Self,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=<Self as Geometry>::D,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Vector,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=2)
rustc_data_structures::obligation_forest: process_obligations: node 0 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=&Self,depth=0), stalled_on: [] }, state: Cell { value: Waiting }, parent: None, dependents: [] }
rustc_data_structures::obligation_forest: process_obligations: node 1 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:8 ~ impl_assoc[317d]::Geometry[0]::dims[0]), BrAnon(0)))),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: Some(NodeIndex { index: 1 }), dependents: [] }
rustc_data_structures::obligation_forest: process_obligations: node 1 got result Changed([])
rustc_data_structures::obligation_forest: process_cycles()
rustc_data_structures::obligation_forest: process_cycles: complete
rustc_data_structures::obligation_forest: process_obligations: complete
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(OutlivesPredicate(Self, ReFree(DefId(0/0:8 ~ impl_assoc[317d]::Geometry[0]::dims[0]), BrAnon(0)))),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=&Self,depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits::query::outlives_bounds: implied_outlives_bounds(ty = &Self)
rustc::traits::query::outlives_bounds: implied_outlives_bounds for &Self: Ok(
    InferOk {
        value: [
            RegionSubParam(
                ReFree(DefId(0/0:8 ~ impl_assoc[317d]::Geometry[0]::dims[0]), BrAnon(0)),
                Self/#0
            )
        ],
        obligations: []
    }
)
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: implied_outlives_bounds(ty = <<Self as Geometry>::D as Dimensionality>::Vector)
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Geometry>::D)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Point no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Vector no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0) with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: implied_outlives_bounds for <<Self as Geometry>::D as Dimensionality>::Vector: Ok(
    InferOk {
        value: [],
        obligations: []
    }
)
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))], reveal: UserFacing })
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits: fully_normalize_with_fulfillcx(value=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))])
rustc::traits::project: normalize_with_depth(depth=0, value=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))])
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)): [ParamCandidate(Binder(<Self as Dimensionality>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), ParamCandidate(Binder(<Self as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),Binder(<Self as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Dimensionality>::Vector no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) } }, value=Normalized(<Self as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), ParamCandidate(Binder(<Self as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),Binder(<Self as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Dimensionality>::Point no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) } }, value=Normalized(<Self as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Dimensionality>::Point as EuclideanSpace>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)) is_match=true same_def_id=true
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)) is_match=true same_def_id=true
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Dimensionality>::Point as EuclideanSpace>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::project: confirm_candidate(candidate=ParamEnv(Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector))), obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Dimensionality>::Vector depth=0 projected_obligations=[]
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=1)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type: normalized_ty=<Self as Dimensionality>::Vector depth=0
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) } }, value=Normalized(<Self as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <Self as Dimensionality>::Vector, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <Self as Dimensionality>::Vector, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))] with 12 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=1), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits: fully_normalize: normalized_value=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))] obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=1), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - ok, new index is 0
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=1))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=1), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - ok, new index is 1
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=2)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=2)
rustc_data_structures::obligation_forest: process_obligations: node 0 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), ParamCandidate(Binder(<Self as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),Binder(<Self as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Dimensionality>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 0 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 1 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 1 got result Changed([])
rustc_data_structures::obligation_forest: process_cycles()
rustc_data_structures::obligation_forest: process_cycles: complete
rustc_data_structures::obligation_forest: process_obligations: complete
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits: normalize_param_env_or_error: normalized predicates=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))], reveal: UserFacing })
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits: fully_normalize_with_fulfillcx(value=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))])
rustc::traits::project: normalize_with_depth(depth=0, value=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))])
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)): [ParamCandidate(Binder(<Self as Dimensionality>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), ParamCandidate(Binder(<Self as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),Binder(<Self as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Dimensionality>::Vector no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) } }, value=Normalized(<Self as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), ParamCandidate(Binder(<Self as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),Binder(<Self as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Dimensionality>::Point no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) } }, value=Normalized(<Self as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Dimensionality>::Point as EuclideanSpace>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)) is_match=true same_def_id=true
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)) is_match=true same_def_id=true
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<Self as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<<Self as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <<Self as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Dimensionality>::Point as EuclideanSpace>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::project: confirm_candidate(candidate=ParamEnv(Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector))), obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Dimensionality>::Vector depth=0 projected_obligations=[]
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=1)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <Self as Dimensionality>::Vector to <Self as Dimensionality>::Vector, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type: normalized_ty=<Self as Dimensionality>::Vector depth=0
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) } }, value=Normalized(<Self as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <Self as Dimensionality>::Vector, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Dimensionality>::Point as EuclideanSpace>::Diff to <Self as Dimensionality>::Vector, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Dimensionality>::Point to <Self as Dimensionality>::Point, now with 12 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))] with 12 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=1), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits: fully_normalize: normalized_value=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))] obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=1), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - ok, new index is 0
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=1))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=1), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - ok, new index is 1
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=2)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=2)
rustc_data_structures::obligation_forest: process_obligations: node 0 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<Self as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0), ParamCandidate(Binder(<Self as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),Binder(<Self as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0) poly_trait_ref=Binder(<Self as Dimensionality>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Dimensionality>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 0 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 1 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),Binder(<<Self as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<<Self as Dimensionality>::Point as EuclideanSpace>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 1 got result Changed([])
rustc_data_structures::obligation_forest: process_cycles()
rustc_data_structures::obligation_forest: process_cycles: complete
rustc_data_structures::obligation_forest: process_obligations: complete
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Dimensionality>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits: normalize_param_env_or_error: normalized predicates=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[Binder(TraitPredicate(<Self as Dimensionality>)), Binder(TraitPredicate(<<Self as Dimensionality>::Vector as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <Self as Dimensionality>::Vector)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<Self as Dimensionality>::Point, <Self as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <Self as Dimensionality>::Point)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::clone::Clone>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::ops::Sub<<Self as Dimensionality>::Vector>>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<Self as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: normalize_param_env_or_error(unnormalized_env=ParamEnv { caller_bounds: [Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(TraitPredicate(<Self as EuclideanSpace>))], reveal: UserFacing })
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Copy>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<Self as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<Self as std::clone::Clone>))]
rustc::traits: normalize_param_env_or_error: elaborated-predicates=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))]
rustc::traits: fully_normalize_with_fulfillcx(value=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))])
rustc::traits::project: normalize_with_depth(depth=0, value=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))])
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as EuclideanSpace>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)) is_match=false same_def_id=false
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::clone::Clone>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as std::marker::Copy>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<Self as EuclideanSpace>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)): [ParamCandidate(Binder(<Self as EuclideanSpace>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<Self as EuclideanSpace>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as EuclideanSpace>, candidate=Ok(Some(ParamCandidate(Binder(<Self as EuclideanSpace>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<Self as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0),Binder(<Self as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<Self as EuclideanSpace>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as EuclideanSpace>::Diff no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) } }, value=Normalized(<Self as EuclideanSpace>::Diff,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as EuclideanSpace>::Diff,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as EuclideanSpace>::Diff to <Self as EuclideanSpace>::Diff, now with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))] with 2 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits: fully_normalize: normalized_value=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))] obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - ok, new index is 0
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits: fully_normalize: select_all_or_error start
rustc::traits::fulfill: select(obligation-forest-size=1)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=1)
rustc_data_structures::obligation_forest: process_obligations: node 0 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as EuclideanSpace>)))=Ok(Some(ParamCandidate(Binder(<Self as EuclideanSpace>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0), ParamCandidate(Binder(<Self as EuclideanSpace>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0),Binder(<Self as EuclideanSpace>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0) poly_trait_ref=Binder(<Self as EuclideanSpace>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as EuclideanSpace>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 0 got result Changed([])
rustc_data_structures::obligation_forest: process_cycles()
rustc_data_structures::obligation_forest: process_cycles: complete
rustc_data_structures::obligation_forest: process_obligations: complete
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as EuclideanSpace>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits: fully_normalize: select_all_or_error complete
rustc::traits: fully_normalize: resolved_value=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))]
rustc::traits: normalize_param_env_or_error: normalized predicates=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))]
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits: normalize_param_env_or_error: resolved predicates=[Binder(TraitPredicate(<Self as EuclideanSpace>)), Binder(TraitPredicate(<<Self as EuclideanSpace>::Diff as std::marker::Sized>)), Binder(ProjectionPredicate(ProjectionTy { substs: [Self, <Self as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, Self)), Binder(TraitPredicate(<Self as std::clone::Clone>)), Binder(TraitPredicate(<Self as std::marker::Sized>)), Binder(TraitPredicate(<Self as std::ops::Sub<<Self as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<Self as std::marker::Copy>))]
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::query::outlives_bounds: explicit_outlives_bounds()
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::project: normalize_with_depth(depth=0, value=([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<Self as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)): [ParamCandidate(Binder(<Self as Geometry>))]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as Geometry>, candidate=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<Self as Geometry>::D no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) } }, value=Normalized(<Self as Geometry>::D,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 0 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<Self as Geometry>::D)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as Dimensionality>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as Dimensionality>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Point no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - ok, new index is 0
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<_ as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<_ as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - ok, new index is 1
rustc::traits::project: normalize_with_depth(depth=0, value=_)
rustc::traits::project: normalize_with_depth: depth=0 result=&Self with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Deref>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Deref>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as std::ops::Deref>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Deref>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Deref>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::ops::Deref>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::ops::Deref> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:956 ~ core[f3a2]::ops[0]::deref[0]::{{impl}}[0]), obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Deref>)),depth=0), impl_trait_ref=<&_ as std::ops::Deref>, skol_obligation_trait_ref=<Self as std::ops::Deref>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected Self, found reference`
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::ops::Deref>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::ops::Deref> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:959 ~ core[f3a2]::ops[0]::deref[0]::{{impl}}[1]), obligation=Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Deref>)),depth=0), impl_trait_ref=<&mut _ as std::ops::Deref>, skol_obligation_trait_ref=<Self as std::ops::Deref>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected Self, found &mut _`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=Self)
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Deref>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Deref>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::Deref>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(2/0:953 ~ core[f3a2]::ops[0]::deref[0]::Deref[0])) = []
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Deref>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Deref>)),depth=0))
rustc::traits::select: assemble_candidates_from_auto_impls(self_ty=Self)
rustc::traits::select: candidate list size: 0
rustc::traits::select: assembled 0 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Deref>)),depth=0)): []
rustc::traits::select: winnowed to 0 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as std::ops::Deref>)),depth=0)): []
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<Self as std::ops::Deref>)))=Err(Unimplemented)
rustc::traits::select: insert_candidate_cache(trait_ref=<Self as std::ops::Deref>, candidate=Err(Unimplemented)) local
rustc::traits::select: CACHE MISS: EVAL(Binder(<Self as std::ops::Deref>))=EvaluatedToErr
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<Self as std::ops::Deref>), candidate=EvaluatedToErr)
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: normalize_with_depth(depth=0, value=&Self)
rustc::traits::project: normalize_with_depth: depth=0 result=&Self with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point, InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=(([&Self]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point, InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - ok, new index is 2
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - ok, new index is 3
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 3 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 3 }!
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::util: predicates_for_generics(generic_bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))]))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - ok, new index is 4
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 4 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 3 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Self,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, None) - ok, new index is 5
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=fn(&Self) -> <<Self as Geometry>::D as Dimensionality>::Point,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=fn(&Self) -> <<Self as Geometry>::D as Dimensionality>::Point,depth=0), stalled_on: [] }, None) - ok, new index is 6
rustc::traits::fulfill: select(obligation-forest-size=7)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=7)
rustc_data_structures::obligation_forest: process_obligations: node 0 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 0 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 1 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<_ as std::marker::Sized>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<&Self as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: builtin_bound: nested=Binder([])
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0)): [BuiltinCandidate { has_nested: false }]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<&Self as std::marker::Sized>)))=Ok(Some(BuiltinCandidate { has_nested: false }))
rustc::traits::select: insert_candidate_cache(trait_ref=<&Self as std::marker::Sized>, candidate=Ok(Some(BuiltinCandidate { has_nested: false }))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0), BuiltinCandidate { has_nested: false })
rustc::traits::select: confirm_builtin_candidate(Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0), false)
rustc::traits::select: confirm_builtin_candidate: obligations=[]
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<&Self as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 1 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 2 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<Self as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<Self as Geometry>)))=Ok(Some(ParamCandidate(Binder(<Self as Geometry>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), ParamCandidate(Binder(<Self as Geometry>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),Binder(<Self as Geometry>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) poly_trait_ref=Binder(<Self as Geometry>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<Self as Geometry>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 2 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 3 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 3 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 4 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 2
rustc::traits::select: assembled 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)): [ProjectionCandidate, ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))]
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:4 ~ impl_assoc[317d]::Geometry[0]), substs=[Self]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), Binder(TraitPredicate(<Self as Geometry>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: evaluate_candidate: depth=0 candidate=ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: winnowed to 2 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0)): [EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }, EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)), evaluation: EvaluatedToOk }]
rustc::traits::select: Dropping candidate #0/2: EvaluatedCandidate { candidate: ProjectionCandidate, evaluation: EvaluatedToOk }
rustc::traits::select: Retaining candidate #0/1: EvaluatedCandidate { candidate: ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)), evaluation: EvaluatedToOk }
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))))
rustc::traits::select: insert_candidate_cache(trait_ref=<<Self as Geometry>::D as std::marker::Sized>, candidate=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>))))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as std::marker::Sized>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),Binder(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 4 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 5 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc_data_structures::obligation_forest: process_obligations: node 5 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 6 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=fn(&Self) -> <<Self as Geometry>::D as Dimensionality>::Point,depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(OutlivesPredicate(Self, '_#1r)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(OutlivesPredicate(Self, '_#1r)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<Self as Geometry>::D as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as Geometry>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)))=Ok(Some(ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>))))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), ParamCandidate(Binder(<<Self as Geometry>::D as Dimensionality>)))
rustc::traits::select: confirm_param_candidate(Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),Binder(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as Dimensionality>)
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Vector no progress
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0) with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc_data_structures::obligation_forest: process_obligations: node 6 got result Changed([PendingPredicateObligation { obligation: Obligation(predicate=Binder(OutlivesPredicate(Self, '_#1r)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=<Self as Geometry>::D,depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }])
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(OutlivesPredicate(Self, '_#1r)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - ok, new index is 7
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 3 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 4 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 3 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 3 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - ok, new index is 8
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 3 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 4 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 3 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 3 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - ok, new index is 9
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 3 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 4 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 3 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 3 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 3 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - ok, new index is 10
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 3 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 4 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 3 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 3 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 4 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 3 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 3 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 3 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=<Self as Geometry>::D,depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - ok, new index is 11
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 3 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 3 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 3 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 4 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 3 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 3 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 7 })) - duplicate of NodeIndex { index: 3 }!
rustc_data_structures::obligation_forest: process_cycles()
rustc_data_structures::obligation_forest: process_cycles: complete
rustc_data_structures::obligation_forest: process_obligations: complete
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Self,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<&Self as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=6)
rustc_data_structures::obligation_forest: process_obligations: node 0 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=fn(&Self) -> <<Self as Geometry>::D as Dimensionality>::Point,depth=0), stalled_on: [] }, state: Cell { value: Waiting }, parent: None, dependents: [] }
rustc_data_structures::obligation_forest: process_obligations: node 1 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(OutlivesPredicate(Self, '_#1r)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: Some(NodeIndex { index: 1 }), dependents: [] }
rustc_data_structures::obligation_forest: process_obligations: node 1 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 2 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: Some(NodeIndex { index: 1 }), dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 2 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 3 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: Some(NodeIndex { index: 1 }), dependents: [] }
rustc::traits::project: poly_project_and_unify_type(obligation=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0))
rustc::traits::project: project_and_unify_type(obligation=Obligation(predicate=ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)) is_match=true same_def_id=true
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)) is_match=false same_def_id=false
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: confirm_candidate(candidate=TraitDef(Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector))), obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) },depth=0))
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Vector depth=0 projected_obligations=[]
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=1)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=1)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type: normalized_ty=<<Self as Geometry>::D as Dimensionality>::Vector depth=0
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])
rustc::traits::project: project_and_unify_type: normalized_ty=<<Self as Geometry>::D as Dimensionality>::Vector obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1)]
rustc_data_structures::obligation_forest: process_obligations: node 3 got result Changed([PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1), stalled_on: [] }])
rustc_data_structures::obligation_forest: process_obligations: node 4 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: Some(NodeIndex { index: 1 }), dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::select: match_poly_trait_ref: obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) poly_trait_ref=Binder(<<Self as Geometry>::D as std::marker::Sized>)
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 4 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 5 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=<Self as Geometry>::D,depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: Some(NodeIndex { index: 1 }), dependents: [] }
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Self,depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Self,depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0) with 0 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[]
rustc_data_structures::obligation_forest: process_obligations: node 5 got result Changed([PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Self,depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }])
rustc_data_structures::obligation_forest: process_cycles()
rustc_data_structures::obligation_forest: process_cycles: complete
rustc_data_structures::obligation_forest: process_obligations: complete
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=<Self as Geometry>::D,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(OutlivesPredicate(Self, '_#1r)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=fn(&Self) -> <<Self as Geometry>::D as Dimensionality>::Point,depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::fulfill: select(obligation-forest-size=0)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=0)
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(0 predicates remaining, 0 errors) done
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<FreshTy(0)>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::ops::CoerceUnsized<&mut _>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::ops::CoerceUnsized<&mut _>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1108 ~ core[f3a2]::ops[0]::unsize[0]::{{impl}}[0]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0), impl_trait_ref=<&mut _ as std::ops::CoerceUnsized<&mut _>>, skol_obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found &mut _`
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::ops::CoerceUnsized<*const _>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::ops::CoerceUnsized<*const _>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1113 ~ core[f3a2]::ops[0]::unsize[0]::{{impl}}[5]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0), impl_trait_ref=<&_ as std::ops::CoerceUnsized<*const _>>, skol_obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found reference`
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::ops::CoerceUnsized<&_>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::ops::CoerceUnsized<&_>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1112 ~ core[f3a2]::ops[0]::unsize[0]::{{impl}}[4]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0), impl_trait_ref=<&_ as std::ops::CoerceUnsized<&_>>, skol_obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found reference`
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::ops::CoerceUnsized<&_>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::ops::CoerceUnsized<&_>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1109 ~ core[f3a2]::ops[0]::unsize[0]::{{impl}}[1]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0), impl_trait_ref=<&mut _ as std::ops::CoerceUnsized<&_>>, skol_obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found &mut _`
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::ops::CoerceUnsized<*const _>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::ops::CoerceUnsized<*const _>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1111 ~ core[f3a2]::ops[0]::unsize[0]::{{impl}}[3]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0), impl_trait_ref=<&mut _ as std::ops::CoerceUnsized<*const _>>, skol_obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found &mut _`
rustc::traits::project: normalize_with_depth(depth=1, value=<&mut _ as std::ops::CoerceUnsized<*mut _>>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&mut _ as std::ops::CoerceUnsized<*mut _>> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1110 ~ core[f3a2]::ops[0]::unsize[0]::{{impl}}[2]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0), impl_trait_ref=<&mut _ as std::ops::CoerceUnsized<*mut _>>, skol_obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found &mut _`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<Self as std::ops::CoerceUnsized<T>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<T as std::marker::Sized>)) predicates=[]
rustc::traits::object_safety: object_safety_violations_for_trait(trait_def_id=DefId(2/0:1107 ~ core[f3a2]::ops[0]::unsize[0]::CoerceUnsized[0])) = []
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=None
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0))
rustc::traits::select: assemble_candidates_from_auto_impls(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: candidate list size: 0
rustc::traits::select: assembled 0 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0)): []
rustc::traits::select: winnowed to 0 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<_>>)),depth=0)): []
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<FreshTy(0)>>)))=Err(Unimplemented)
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::CoerceUnsized<FreshTy(0)>>, candidate=Err(Unimplemented)) local
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<FreshTy(0)>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<FreshTy(0)>>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<FreshTy(0)>>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: evaluate_candidate: depth=0 candidate=ProjectionCandidate
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::select: evaluate_candidate: depth=0 result=EvaluatedToOk
rustc::traits::select: CACHE MISS: EVAL(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<FreshTy(0)>>))=EvaluatedToOk
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<FreshTy(0)>>), candidate=EvaluatedToOk)
rustc::traits::project: normalize_with_depth(depth=0, value=([<<Self as Geometry>::D as Dimensionality>::Point, _]; variadic: false)-><<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>::Output)
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, _], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, _], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, _], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, _], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)) is_match=false same_def_id=false
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)) is_match=true same_def_id=true
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<FreshTy(0)>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<FreshTy(0)>>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<FreshTy(0)>>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::project: confirm_candidate(candidate=TraitDef(Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))), obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, _], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: opt_normalize_projection_type: projected_ty=<<Self as Geometry>::D as Dimensionality>::Point depth=0 projected_obligations=[]
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=1)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=1)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=1 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type: normalized_ty=<<Self as Geometry>::D as Dimensionality>::Point depth=0
rustc::traits::project: ProjectionCacheEntry::insert_ty: adding cache entry: key=ProjectionCacheKey { ty: ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, _], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) } }, value=Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>::Output to <<Self as Geometry>::D as Dimensionality>::Point, now with 6 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=([<<Self as Geometry>::D as Dimensionality>::Point, _]; variadic: false)-><<Self as Geometry>::D as Dimensionality>::Point with 6 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1)]
rustc::traits::project: normalize_with_depth(depth=0, value=InstantiatedPredicates([Binder(TraitPredicate(<_ as std::marker::Sized>)), Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>::Output as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<_>>))]))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Geometry>::D as Dimensionality>::Vector, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Geometry>::D as Dimensionality>::Vector, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<Self as Geometry>::D as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<Self as Geometry>::D as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<Self as Geometry>::D as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<Self as Geometry>::D as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) },depth=0))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)) is_match=false same_def_id=false
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))
rustc::traits::project: assemble_candidates_from_predicates: candidate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)) is_match=false same_def_id=true
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0))
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)) predicates=[]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=None
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0))
rustc::traits::select: assemble_candidates_from_auto_impls(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: candidate list size: 0
rustc::traits::select: assembled 0 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0)): []
rustc::traits::select: winnowed to 0 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0)): []
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)))=Err(Unimplemented)
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>, candidate=Err(Unimplemented)) local
rustc::traits::project: assemble_candidates_from_impls: selection error Unimplemented
rustc::traits::project: opt_normalize_projection_type: ERROR
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>::Output to _, now with 9 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 10 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 11 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 12 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 13 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Geometry>::D as Dimensionality>::Vector, now with 14 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<_ as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>))]) with 14 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0)]
rustc::traits::util: predicates_for_generics(generic_bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<_ as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>))]))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=1))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=1))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0), stalled_on: [] }, None) - ok, new index is 0
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<_ as std::marker::Sized>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<_ as std::marker::Sized>)),depth=0), stalled_on: [] }, None) - ok, new index is 1
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0), stalled_on: [] }, None) - duplicate of NodeIndex { index: 1 }!
rustc::traits::fulfill: register_predicate_obligation(obligation=Obligation(predicate=fn(<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff) -> <<Self as Geometry>::D as Dimensionality>::Point,depth=0))
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=fn(<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff) -> <<Self as Geometry>::D as Dimensionality>::Point,depth=0), stalled_on: [] }, None) - ok, new index is 2
rustc::traits::fulfill: select(obligation-forest-size=3)
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=3)
rustc_data_structures::obligation_forest: process_obligations: node 0 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)))=Err(Unimplemented)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>))` at depth 0 yielded Err
rustc_data_structures::obligation_forest: process_obligations: node 0 got result Error(Unimplemented)
rustc_data_structures::obligation_forest: process_obligations: node 1 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<_ as std::marker::Sized>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<_ as std::marker::Sized>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<FreshTy(0) as std::marker::Sized>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<_ as std::marker::Sized>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: candidate set contains ambig
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<FreshTy(0) as std::marker::Sized>)))=Ok(None)
rustc::traits::select: insert_candidate_cache(trait_ref=<FreshTy(0) as std::marker::Sized>, candidate=Ok(None)) local
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<_ as std::marker::Sized>))` at depth 0 yielded Ok(None)
rustc::traits::fulfill: process_predicate: pending obligation Obligation(predicate=Binder(TraitPredicate(<_ as std::marker::Sized>)),depth=0) now stalled on [_]
rustc_data_structures::obligation_forest: process_obligations: node 1 got result Unchanged
rustc_data_structures::obligation_forest: process_obligations: node 2 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=fn(<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff) -> <<Self as Geometry>::D as Dimensionality>::Point,depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 6 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0) with 6 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Geometry>::D as Dimensionality>::Vector, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 7 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0) with 7 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Geometry>::D as Dimensionality>::Vector, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 6 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 7 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 8 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 9 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<Self as Geometry>::D as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)),depth=0) with 9 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff to <<Self as Geometry>::D as Dimensionality>::Vector, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 5 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 6 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0) with 6 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc_data_structures::obligation_forest: process_obligations: node 2 got result Changed([PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=<Self as Geometry>::D,depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<Self as Geometry>::D as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=<Self as Geometry>::D,depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }])
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - ok, new index is 3
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - duplicate of NodeIndex { index: 1 }!
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - ok, new index is 4
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<Self as Geometry>::D as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - ok, new index is 5
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0), stalled_on: [] }, Some(NodeIndex { index: 3 })) - ok, new index is 6
rustc_data_structures::obligation_forest: process_cycles()
rustc_data_structures::obligation_forest: process_cycles: complete
rustc_data_structures::obligation_forest: process_obligations: complete
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [
        Error {
            error: Unimplemented,
            backtrace: [
                PendingPredicateObligation {
                    obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0),
                    stalled_on: []
                }
            ]
        }
    ],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=5)
rustc_data_structures::obligation_forest: process_obligations: node 0 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<_ as std::marker::Sized>)),depth=0), stalled_on: [_] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::fulfill: process_predicate: pending obligation Obligation(predicate=Binder(TraitPredicate(<_ as std::marker::Sized>)),depth=0) still stalled on [_]
rustc_data_structures::obligation_forest: process_obligations: node 0 got result Unchanged
rustc_data_structures::obligation_forest: process_obligations: node 1 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)


rustc::traits::select: obligation self ty is <<Self as Geometry>::D as Dimensionality>::Point
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::marker::Copy>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::marker::Copy> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:862 ~ core[f3a2]::marker[0]::copy_impls[0]::{{impl}}[3]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0), impl_trait_ref=<&_ as std::marker::Copy>, skol_obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found reference`
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]

~~~ YOU ARE HERE ~~~
rustc::traits::select:
    match_projection_obligation_against_definition_bounds
        bounds=InstantiatedPredicates(
            [
                Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),
                Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),
                Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
                Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),
                Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]

rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 1 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 2 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::project: normalize_with_depth(depth=1, value=<&_ as std::clone::Clone>)
rustc::traits::project: normalize_with_depth: depth=1 result=<&_ as std::clone::Clone> with 0 obligations
rustc::traits::project: normalize_with_depth: depth=1 obligations=[]
rustc::traits::select: match_impl(impl_def_id=DefId(2/0:1279 ~ core[f3a2]::clone[0]::impls[0]::{{impl}}[3]), obligation=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0), impl_trait_ref=<&_ as std::clone::Clone>, skol_obligation_trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)
rustc::traits::select: match_impl: failed eq_trait_refs due to `expected associated type, found reference`
rustc::traits::select: assemble_candidates_from_object_ty(self_ty=<<Self as Geometry>::D as Dimensionality>::Point)
rustc::traits::select: assemble_candidates_for_projected_tys(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::select: assemble_candidates_from_caller_bounds(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0))
rustc::traits::select: candidate list size: 1
rustc::traits::select: assembled 1 candidates for TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0)): [ProjectionCandidate]
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)))=Ok(Some(ProjectionCandidate))
rustc::traits::select: insert_candidate_cache(trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>, candidate=Ok(Some(ProjectionCandidate))) local
rustc::traits::select: confirm_candidate(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0), ProjectionCandidate)
rustc::traits::select: match_projection_obligation_against_definition_bounds: skol_trait_predicate=TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>) skol_map={}
rustc::traits::select: match_projection_obligation_against_definition_bounds: def_id=DefId(0/0:9 ~ impl_assoc[317d]::Dimensionality[0]), substs=[<Self as Geometry>::D]
rustc::traits::select: match_projection_obligation_against_definition_bounds: bounds=InstantiatedPredicates([Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)), Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))])
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)) predicates=[]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff>>)), Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)), Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>::Diff], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point))]
rustc::traits::util: super_predicates: data=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)) predicates=[Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>))]
rustc::traits::select: match_projection_obligation_against_definition_bounds: matching_bound=Some(Binder(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>))` at depth 0 yielded Ok(Some)
rustc_data_structures::obligation_forest: process_obligations: node 2 got result Changed([])
rustc_data_structures::obligation_forest: process_obligations: node 3 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<Self as Geometry>::D as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::project: poly_project_and_unify_type(obligation=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<Self as Geometry>::D as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)),depth=0))
rustc::traits::project: project_and_unify_type(obligation=Obligation(predicate=ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<Self as Geometry>::D as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<Self as Geometry>::D as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found error
rustc::traits::project: project_and_unify_type: normalized_ty=_ obligations=[Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0)]
rustc_data_structures::obligation_forest: process_obligations: node 3 got result Changed([PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0), stalled_on: [] }])
rustc_data_structures::obligation_forest: register_obligation_at(PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0), stalled_on: [] }, Some(NodeIndex { index: 4 })) - ok, new index is 5
rustc_data_structures::obligation_forest: process_obligations: node 4 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Point,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Point to <<Self as Geometry>::D as Dimensionality>::Point, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 4 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 5 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 6 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0) with 6 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [<Self as Geometry>::D], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<<Self as Geometry>::D as Dimensionality>::Vector,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <<Self as Geometry>::D as Dimensionality>::Vector to <<Self as Geometry>::D as Dimensionality>::Vector, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=<Self as Geometry>::D,depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=<Self as Geometry>::D,depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc::traits::project: normalize_with_depth(depth=0, value=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [Self], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found normalized ty `Normalized(<Self as Geometry>::D,[])`
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <Self as Geometry>::D to <Self as Geometry>::D, now with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0) with 3 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0)]
rustc_data_structures::obligation_forest: process_obligations: node 4 got result Changed([PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Sized>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as EuclideanSpace>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point], item_def_id: DefId(0/0:13 ~ impl_assoc[317d]::EuclideanSpace[0]::Diff[0]) }, <<Self as Geometry>::D as Dimensionality>::Vector)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Vector as std::marker::Sized>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=<Self as Geometry>::D,depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }, PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<Self as Geometry>)),depth=0), stalled_on: [] }])
rustc_data_structures::obligation_forest: process_cycles()
rustc_data_structures::obligation_forest: process_cycles: complete
rustc_data_structures::obligation_forest: process_obligations: complete
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::clone::Clone>)),depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=<<Self as Geometry>::D as Dimensionality>::Point,depth=0),
            stalled_on: []
        },
        PendingPredicateObligation {
            obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::marker::Copy>)),depth=0),
            stalled_on: []
        }
    ],
    errors: [],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=3)
rustc_data_structures::obligation_forest: process_obligations: node 0 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<_ as std::marker::Sized>)),depth=0), stalled_on: [_] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::fulfill: process_predicate: pending obligation Obligation(predicate=Binder(TraitPredicate(<_ as std::marker::Sized>)),depth=0) still stalled on [_]
rustc_data_structures::obligation_forest: process_obligations: node 0 got result Unchanged
rustc_data_structures::obligation_forest: process_obligations: node 1 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<Self as Geometry>::D as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)),depth=0), stalled_on: [] }, state: Cell { value: Waiting }, parent: None, dependents: [] }
rustc_data_structures::obligation_forest: process_obligations: node 2 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0), stalled_on: [] }, state: Cell { value: Pending }, parent: Some(NodeIndex { index: 2 }), dependents: [] }
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)))=Err(Unimplemented)
rustc::traits::fulfill: selecting trait `Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>))` at depth 0 yielded Err
rustc_data_structures::obligation_forest: process_obligations: node 2 got result Error(Unimplemented)
rustc_data_structures::obligation_forest: process_cycles()
rustc_data_structures::obligation_forest: process_cycles: complete
rustc_data_structures::obligation_forest: process_obligations: complete
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [
        Error {
            error: Unimplemented,
            backtrace: [
                PendingPredicateObligation {
                    obligation: Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0),
                    stalled_on: []
                },
                PendingPredicateObligation {
                    obligation: Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [<<Self as Geometry>::D as Dimensionality>::Point, <<Self as Geometry>::D as Dimensionality>::Vector], item_def_id: DefId(2/0:870 ~ core[f3a2]::ops[0]::arith[0]::Sub[0]::Output[0]) }, <<Self as Geometry>::D as Dimensionality>::Point)),depth=0),
                    stalled_on: []
                }
            ]
        }
    ],
    stalled: false
}
rustc::traits::fulfill: select: starting another iteration
rustc_data_structures::obligation_forest: process_obligations(len=1)
rustc_data_structures::obligation_forest: process_obligations: node 0 == Node { obligation: PendingPredicateObligation { obligation: Obligation(predicate=Binder(TraitPredicate(<_ as std::marker::Sized>)),depth=0), stalled_on: [_] }, state: Cell { value: Pending }, parent: None, dependents: [] }
rustc::traits::fulfill: process_predicate: pending obligation Obligation(predicate=Binder(TraitPredicate(<_ as std::marker::Sized>)),depth=0) still stalled on [_]
rustc_data_structures::obligation_forest: process_obligations: node 0 got result Unchanged
rustc::traits::fulfill: select: outcome=Outcome {
    completed: [],
    errors: [],
    stalled: true
}
rustc::traits::fulfill: select(1 predicates remaining, 2 errors) done
rustc::traits::error_reporting: skipping ErrorDescriptor { predicate: Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)), index: Some(1) } (implied by ErrorDescriptor { predicate: Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)), index: Some(0) })
rustc::traits::error_reporting: report_fulfillment_errors(FulfillmentError(Obligation(predicate=Binder(TraitPredicate(<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>)),depth=0),Unimplemented))
rustc::traits::on_unimplemented: of_item(DefId(2/0:869 ~ core[f3a2]::ops[0]::arith[0]::Sub[0])/DefId(2/0:869 ~ core[f3a2]::ops[0]::arith[0]::Sub[0])) = Ok(Some(OnUnimplementedDirective { condition: None, subcommands: [], message: Some(OnUnimplementedFormatString("cannot subtract `{RHS}` from `{Self}`")), label: Some(OnUnimplementedFormatString("no implementation for `{Self} - {RHS}`")), note: None }))
rustc::traits::on_unimplemented: evaluate(OnUnimplementedDirective { condition: None, subcommands: [], message: Some(OnUnimplementedFormatString("cannot subtract `{RHS}` from `{Self}`")), label: Some(OnUnimplementedFormatString("no implementation for `{Self} - {RHS}`")), note: None }, trait_ref=<<<Self as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>>, options=[("direct", None), ("_Self", Some("<<Self as Geometry>::D as Dimensionality>::Point")), ("Self", Some("<<Self as Geometry>::D as Dimensionality>::Point")), ("RHS", Some("<<Self as Geometry>::D as Dimensionality>::Vector"))])
rustc::traits::on_unimplemented: evaluate: OnUnimplementedDirective { condition: None, subcommands: [], message: Some(OnUnimplementedFormatString("cannot subtract `{RHS}` from `{Self}`")), label: Some(OnUnimplementedFormatString("no implementation for `{Self} - {RHS}`")), note: None } succeeded
rustc::traits::project: normalize_with_depth(depth=0, value=Binder(<<<_ as Geometry>::D as Dimensionality>::Point as std::ops::Sub<<<_ as Geometry>::D as Dimensionality>::Vector>>))
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [_], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [_], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<_ as Geometry>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [_], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<_ as Geometry>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<FreshTy(0) as Geometry>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<_ as Geometry>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: candidate set contains ambig
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<FreshTy(0) as Geometry>)))=Ok(None)
rustc::traits::select: insert_candidate_cache(trait_ref=<FreshTy(0) as Geometry>, candidate=Ok(None)) local
rustc::traits::project: opt_normalize_projection_type: too many candidates
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <_ as Geometry>::D to _, now with 1 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [_], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [_], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<_ as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [_], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<_ as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<FreshTy(0) as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<_ as Dimensionality>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: candidate set contains ambig
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<FreshTy(0) as Dimensionality>)))=Ok(None)
rustc::traits::select: insert_candidate_cache(trait_ref=<FreshTy(0) as Dimensionality>, candidate=Ok(None)) local
rustc::traits::project: opt_normalize_projection_type: too many candidates
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <_ as Dimensionality>::Point to _, now with 2 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [_], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, depth=0)
rustc::traits::project: opt_normalize_projection_type: found cache entry: ambiguous
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <_ as Geometry>::D to _, now with 3 obligations
rustc::traits::project: opt_normalize_projection_type(projection_ty=ProjectionTy { substs: [_], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, depth=0)
rustc::traits::project: project(obligation=Obligation(predicate=ProjectionTy { substs: [_], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: project: obligation_trait_ref=<_ as Dimensionality>
rustc::traits::project: assemble_candidates_from_param_env(..)
rustc::traits::project: assemble_candidates_from_predicates(obligation=Obligation(predicate=ProjectionTy { substs: [_], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) },depth=0))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<Self as Geometry>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as Dimensionality>))
rustc::traits::project: assemble_candidates_from_predicates: predicate=Binder(TraitPredicate(<<Self as Geometry>::D as std::marker::Sized>))
rustc::traits::project: assemble_candidates_from_trait_def(..)
rustc::traits::select: select(Obligation(predicate=Binder(TraitPredicate(<_ as Dimensionality>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<FreshTy(0) as Dimensionality>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<_ as Dimensionality>)),depth=0)))
rustc::traits::select: CACHE HIT: SELECT(Binder(TraitPredicate(<FreshTy(0) as Dimensionality>)))=Ok(None)
rustc::traits::project: opt_normalize_projection_type: too many candidates
rustc::traits::project: AssociatedTypeNormalizer: depth=0 normalized <_ as Dimensionality>::Vector to _, now with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 result=Binder(<_ as std::ops::Sub<_>>) with 4 obligations
rustc::traits::project: normalize_with_depth: depth=0 obligations=[Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [_], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, _)),depth=1), Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [_], item_def_id: DefId(0/0:10 ~ impl_assoc[317d]::Dimensionality[0]::Point[0]) }, _)),depth=1), Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [_], item_def_id: DefId(0/0:5 ~ impl_assoc[317d]::Geometry[0]::D[0]) }, _)),depth=1), Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [_], item_def_id: DefId(0/0:11 ~ impl_assoc[317d]::Dimensionality[0]::Vector[0]) }, _)),depth=1)]
rustc::traits::select: with_query_mode(Canonical)
rustc::traits::select: evaluate_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<_ as std::ops::Sub<_>>)),depth=0))
rustc::traits::select: evaluate_trait_predicate_recursively(Obligation(predicate=Binder(TraitPredicate(<_ as std::ops::Sub<_>>)),depth=0))
rustc::traits::select: candidate_from_obligation(cache_fresh_trait_pred=Binder(TraitPredicate(<FreshTy(0) as std::ops::Sub<FreshTy(1)>>)), obligation=TraitObligationStack(Obligation(predicate=Binder(TraitPredicate(<_ as std::ops::Sub<_>>)),depth=0)))
rustc::traits::select: is_knowable(intercrate=None)
rustc::traits::select: candidate set contains ambig
rustc::traits::select: CACHE MISS: SELECT(Binder(TraitPredicate(<FreshTy(0) as std::ops::Sub<FreshTy(1)>>)))=Ok(None)
rustc::traits::select: insert_candidate_cache(trait_ref=<FreshTy(0) as std::ops::Sub<FreshTy(1)>>, candidate=Ok(None)) local
rustc::traits::select: CACHE MISS: EVAL(Binder(<FreshTy(0) as std::ops::Sub<FreshTy(1)>>))=EvaluatedToAmbig
rustc::traits::select: insert_evaluation_cache(trait_ref=Binder(<FreshTy(0) as std::ops::Sub<FreshTy(1)>>), candidate=EvaluatedToAmbig)
error[E0277]: cannot subtract `<<Self as Geometry>::D as Dimensionality>::Vector` from `<<Self as Geometry>::D as Dimensionality>::Point`
 --> ./impl_assoc.rs:7:20
  |
7 |         self.max() - self.dims()
  |                    ^ no implementation for `<<Self as Geometry>::D as Dimensionality>::Point - <<Self as Geometry>::D as Dimensionality>::Vector`
  |
  = help: the trait `std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>` is not implemented for `<<Self as Geometry>::D as Dimensionality>::Point`
  = help: consider adding a `where <<Self as Geometry>::D as Dimensionality>::Point: std::ops::Sub<<<Self as Geometry>::D as Dimensionality>::Vector>` bound

thread 'main' panicked at 'encountered error with `-Z treat_err_as_bug', librustc_errors/lib.rs:499:13
stack backtrace:
   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace
             at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49
   1: std::sys_common::backtrace::print
             at libstd/sys_common/backtrace.rs:71
             at libstd/sys_common/backtrace.rs:59
   2: std::panicking::default_hook::{{closure}}
             at libstd/panicking.rs:211
   3: std::panicking::default_hook
             at libstd/panicking.rs:227
   4: rustc::util::common::panic_hook
             at librustc/util/common.rs:51
   5: std::panicking::rust_panic_with_hook
             at libstd/panicking.rs:481
   6: std::panicking::begin_panic
             at libstd/panicking.rs:411
   7: rustc_errors::Handler::emit_db
             at librustc_errors/lib.rs:499
             at librustc_errors/lib.rs:606
             at librustc_errors/lib.rs:723
   8: rustc_errors::diagnostic_builder::DiagnosticBuilder::emit
             at librustc_errors/diagnostic_builder.rs:98
   9: rustc::traits::error_reporting::<impl rustc::infer::InferCtxt<'a, 'gcx, 'tcx>>::report_selection_error
             at librustc/traits/error_reporting.rs:855
  10: rustc::traits::error_reporting::<impl rustc::infer::InferCtxt<'a, 'gcx, 'tcx>>::report_fulfillment_errors
             at librustc/traits/error_reporting.rs:164
             at librustc/traits/error_reporting.rs:115
  11: rustc_typeck::check::FnCtxt::select_obligations_where_possible
             at librustc_typeck/check/mod.rs:2479
  12: rustc_typeck::check::op::<impl rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx>>::lookup_op_method
             at librustc_typeck/check/op.rs:605
  13: rustc_typeck::check::op::<impl rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx>>::check_overloaded_binop
             at librustc_typeck/check/op.rs:197
  14: rustc_typeck::check::FnCtxt::check_expr_kind
             at librustc_typeck/check/op.rs:88
             at librustc_typeck/check/mod.rs:3845
  15: rustc_typeck::check::FnCtxt::check_expr_with_expectation_and_needs
             at librustc_typeck/check/mod.rs:3791
  16: rustc_typeck::check::FnCtxt::check_expr_with_expectation
             at librustc_typeck/check/mod.rs:3094
  17: rustc_typeck::check::FnCtxt::with_breakable_ctxt
             at librustc_typeck/check/mod.rs:4652
             at ./src/libcore/option.rs:424
             at librustc_typeck/check/mod.rs:4652
             at librustc_typeck/check/mod.rs:5335
  18: rustc_typeck::check::FnCtxt::check_block_with_expected
             at librustc_typeck/check/mod.rs:4645
  19: rustc_typeck::check::FnCtxt::check_expr_kind
             at librustc_typeck/check/mod.rs:4193
  20: rustc_typeck::check::FnCtxt::check_expr_with_expectation_and_needs
             at librustc_typeck/check/mod.rs:3791
  21: rustc_typeck::check::FnCtxt::check_return_expr
             at librustc_typeck/check/mod.rs:3094
             at librustc_typeck/check/mod.rs:3088
             at librustc_typeck/check/mod.rs:3226
  22: rustc_typeck::check::check_fn
             at librustc_typeck/check/mod.rs:1101
  23: rustc::ty::context::tls::set_tlv
             at librustc_typeck/check/mod.rs:864
             at librustc_typeck/check/mod.rs:620
             at ./src/librustc/infer/mod.rs:505
             at ./src/librustc/ty/context.rs:1714
             at ./src/librustc/ty/context.rs:2060
             at ./src/librustc/ty/context.rs:1999
  24: rustc::ty::context::tls::with_context_opt
             at ./src/librustc/ty/context.rs:2059
             at ./src/librustc/ty/context.rs:1713
             at ./src/librustc/ty/context.rs:2160
             at ./src/librustc/ty/context.rs:2144
             at ./src/librustc/ty/context.rs:2135
  25: rustc::ty::context::tls::with_related_context
             at ./src/librustc/ty/context.rs:2144
             at ./src/librustc/ty/context.rs:2155
  26: rustc::ty::context::GlobalCtxt::enter_local
             at ./src/librustc/ty/context.rs:1706
  27: rustc::infer::InferCtxtBuilder::enter
             at ./src/librustc/infer/mod.rs:504
  28: rustc_typeck::check::InheritedBuilder::enter
             at librustc_typeck/check/mod.rs:620
  29: rustc_typeck::check::typeck_tables_of
             at librustc_typeck/check/mod.rs:848
  30: rustc::ty::query::__query_compute::typeck_tables_of
             at librustc/ty/query/plumbing.rs:830
             at librustc/ty/query/plumbing.rs:792
  31: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors<'tcx> for rustc::ty::query::queries::typeck_tables_of<'tcx>>::compute
             at librustc/ty/query/plumbing.rs:822
  32: rustc::dep_graph::graph::DepGraph::with_task_impl
             at librustc/dep_graph/graph.rs:342
  33: rustc::dep_graph::graph::DepGraph::with_task
             at librustc/dep_graph/graph.rs:208
  34: rustc::ty::context::tls::set_tlv
             at librustc/ty/query/plumbing.rs:550
             at librustc/ty/query/plumbing.rs:208
             at librustc/ty/context.rs:2060
             at librustc/ty/context.rs:1999
  35: rustc::ty::context::tls::with_context_opt
             at librustc/ty/context.rs:2059
             at librustc/ty/query/plumbing.rs:207
             at librustc/ty/context.rs:2160
             at librustc/ty/context.rs:2144
             at librustc/ty/context.rs:2135
  36: rustc::ty::context::tls::with_related_context
             at librustc/ty/context.rs:2144
             at librustc/ty/context.rs:2155
  37: <rustc::ty::query::plumbing::JobOwner<'a, 'tcx, Q>>::start
             at librustc/ty/query/plumbing.rs:197
  38: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::force_query_with_job
             at librustc/ty/query/plumbing.rs:543
  39: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::get_query
             at librustc/ty/query/plumbing.rs:383
             at librustc/ty/query/plumbing.rs:629
             at librustc/ty/query/plumbing.rs:640
  40: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::ensure_query
             at librustc/ty/query/plumbing.rs:602
  41: rustc::ty::query::<impl rustc::ty::query::queries::typeck_tables_of<'tcx>>::ensure
             at librustc/ty/query/plumbing.rs:848
  42: rustc::ty::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::par_body_owners
             at librustc_typeck/check/mod.rs:721
             at ./src/librustc/ty/mod.rs:2542
             at ./src/libcore/iter/iterator.rs:553
             at ./src/libcore/slice/mod.rs:2733
             at ./src/libcore/iter/iterator.rs:553
             at ./src/librustc/ty/mod.rs:2541
  43: rustc::session::Session::track_errors
             at librustc_typeck/check/mod.rs:720
             at ./src/librustc/session/mod.rs:326
  44: rustc_typeck::check::typeck_item_bodies
             at librustc_typeck/check/mod.rs:719
  45: rustc::ty::query::__query_compute::typeck_item_bodies
             at librustc/ty/query/plumbing.rs:830
             at librustc/ty/query/plumbing.rs:792
  46: rustc::ty::query::<impl rustc::ty::query::config::QueryAccessors<'tcx> for rustc::ty::query::queries::typeck_item_bodies<'tcx>>::compute
             at librustc/ty/query/plumbing.rs:822
  47: rustc::dep_graph::graph::DepGraph::with_task_impl
             at librustc/dep_graph/graph.rs:342
  48: rustc::dep_graph::graph::DepGraph::with_task
             at librustc/dep_graph/graph.rs:208
  49: rustc::ty::context::tls::set_tlv
             at librustc/ty/query/plumbing.rs:550
             at librustc/ty/query/plumbing.rs:208
             at librustc/ty/context.rs:2060
             at librustc/ty/context.rs:1999
  50: rustc::ty::context::tls::with_context_opt
             at librustc/ty/context.rs:2059
             at librustc/ty/query/plumbing.rs:207
             at librustc/ty/context.rs:2160
             at librustc/ty/context.rs:2144
             at librustc/ty/context.rs:2135
  51: rustc::ty::context::tls::with_related_context
             at librustc/ty/context.rs:2144
             at librustc/ty/context.rs:2155
  52: <rustc::ty::query::plumbing::JobOwner<'a, 'tcx, Q>>::start
             at librustc/ty/query/plumbing.rs:197
  53: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::force_query_with_job
             at librustc/ty/query/plumbing.rs:543
  54: rustc::ty::query::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::get_query
             at librustc/ty/query/plumbing.rs:383
             at librustc/ty/query/plumbing.rs:629
             at librustc/ty/query/plumbing.rs:640
  55: rustc::ty::query::<impl rustc::ty::context::TyCtxt<'a, 'tcx, 'lcx>>::typeck_item_bodies
             at librustc/ty/query/plumbing.rs:877
  56: rustc::util::common::time_ext
             at librustc_typeck/lib.rs:372
             at ./src/librustc/util/common.rs:163
  57: rustc_typeck::check_crate
             at librustc_typeck/lib.rs:372
  58: rustc::ty::context::tls::set_tlv
             at librustc_driver/driver.rs:1285
             at ./src/librustc/ty/context.rs:2092
             at ./src/librustc/ty/context.rs:2060
             at ./src/librustc/ty/context.rs:1999
  59: rustc::ty::context::tls::enter_context
             at ./src/librustc/ty/context.rs:2059
  60: <std::thread::local::LocalKey<T>>::try_with
             at ./src/librustc/ty/context.rs:2091
             at ./src/librustc/ty/context.rs:2049
             at ./src/libstd/thread/local.rs:294
  61: <std::thread::local::LocalKey<T>>::try_with
             at ./src/libstd/thread/local.rs:248
             at ./src/librustc/ty/context.rs:2041
             at ./src/libstd/thread/local.rs:294
  62: <std::thread::local::LocalKey<T>>::with
             at ./src/libstd/thread/local.rs:248
  63: rustc::ty::context::tls::enter_global
             at ./src/librustc/ty/context.rs:2033
             at ./src/librustc/ty/context.rs:2071
  64: rustc::ty::context::TyCtxt::create_and_enter
             at ./src/librustc/ty/context.rs:1282
  65: rustc_driver::driver::phase_3_run_analysis_passes
             at librustc_driver/driver.rs:1259
  66: rustc_driver::driver::compile_input
             at librustc_driver/driver.rs:287
  67: rustc_driver::run_compiler_with_pool
             at librustc_driver/lib.rs:563
  68: <scoped_tls::ScopedKey<T>>::set
             at librustc_driver/lib.rs:485
             at librustc_driver/driver.rs:76
             at /home/ossi/.cargo/registry/src/github.com-1ecc6299db9ec823/scoped-tls-0.1.2/src/lib.rs:155
  69: rustc_driver::driver::spawn_thread_pool
             at librustc_driver/driver.rs:75
  70: rustc_driver::run_compiler
             at librustc_driver/lib.rs:484
  71: <scoped_tls::ScopedKey<T>>::set
             at librustc_driver/lib.rs:1745
             at librustc_driver/lib.rs:190
             at /home/ossi/.cargo/registry/src/github.com-1ecc6299db9ec823/scoped-tls-0.1.2/src/lib.rs:155
  72: <scoped_tls::ScopedKey<T>>::set
             at ./src/libsyntax/lib.rs:106
             at /home/ossi/.cargo/registry/src/github.com-1ecc6299db9ec823/scoped-tls-0.1.2/src/lib.rs:155
  73: syntax::with_globals
             at ./src/libsyntax/lib.rs:105
  74: std::panicking::try::do_call
             at ./src/libstd/panicking.rs:310
  75: __rust_maybe_catch_panic
             at libpanic_unwind/lib.rs:102
  76: std::panicking::try
             at ./src/libstd/panicking.rs:289
  77: rustc_driver::in_named_rustc_thread
             at librustc_driver/lib.rs:1574
  78: rustc_driver::monitor
             at librustc_driver/lib.rs:1585
             at librustc_driver/lib.rs:1659
  79: rustc_driver::run
             at librustc_driver/lib.rs:188
  80: rustc_driver::main
             at librustc_driver/lib.rs:1738
  81: std::rt::lang_start::{{closure}}
             at ./src/libstd/rt.rs:74
  82: std::panicking::try::do_call
             at libstd/rt.rs:59
             at libstd/panicking.rs:310
  83: __rust_maybe_catch_panic
             at libpanic_unwind/lib.rs:102
  84: std::panicking::try
             at libstd/panicking.rs:289
  85: std::panic::catch_unwind
             at libstd/panic.rs:392
  86: std::rt::lang_start_internal
             at libstd/rt.rs:58
  87: std::rt::lang_start
             at ./src/libstd/rt.rs:74
  88: __libc_start_main
  89: _start
query stack during panic:
#0 [typeck_tables_of] processing `Geometry::min`
#1 [typeck_item_bodies] type-checking all item bodies
end of query stack

error: internal compiler error: unexpected panic

note: the compiler unexpectedly panicked. this is a bug.

note: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports

note: rustc 1.30.0-dev running on x86_64-unknown-linux-gnu

note: compiler flags: -Z treat-err-as-bug

